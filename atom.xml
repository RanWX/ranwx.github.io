<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rosy&#39;s</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-11T16:31:43.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Rosy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>devicemapper设置direct-lvm踩坑记</title>
    <link href="http://yoursite.com/2017/04/11/devicemappe%E8%AE%BE%E7%BD%AEdirect-LVM%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/04/11/devicemappe设置direct-LVM踩坑记/</id>
    <published>2017-04-11T12:44:52.000Z</published>
    <updated>2017-04-11T16:31:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇碎碎念，想到哪儿就写到哪儿。。<br>官网上说：<em>Docker hosts running the devicemapper storage driver default to a configuration mode known as loop-lvm. This mode uses sparse files to build the thin pool used by image and container snapshots. The mode is designed to work out-of-the-box with no additional configuration. However, production deployments should not run under loop-lvm mode.</em><br>所有的资料都说生产环境中建议用direct-lvm进行存储。网上说优点是便于扩容，备份和数据的迁移，还有的说性能更好。<br>扩容，备份和数据易迁移是使用外挂硬盘的优点，并不能解释为什么devicemapper用direct-lvm存储模式被官方强烈推荐。甚至在第一次启动docker的时候如果devicemapper不是用direct-lvm还会被警告：<br><em>WARNING: Usage of loopback devices is strongly discouraged for production use. Either use <code>–storage-opt dm.thinpooldev</code> or use <code>–storage-opt dm.no_warn_on_loop_devices=true</code> to suppress this warning.</em><br>性能好这个优点有一定道理，网上有人对此做过性能的测试<a href="http://blog.csdn.net/gushenbusi/article/details/49494629" target="_blank" rel="external">http://blog.csdn.net/gushenbusi/article/details/49494629</a>，得出结论“direct-lvm直接使用dm-thin内核模块，直接使用raw分区，在高负载和高密度下具有性能优势。”可能我没有在高负载高密度下使用docker的需求，所以使用direct-lvm的性能优势对我作用也不大。<br>在实际使用过程中碰到的问题是：在centos7.1下使用docker1.8.1，devicemapper的loop-lvm模式。某天发现容器的空间被占满了，于是便将文件清掉。然后发现了奇怪的情况：删除容器内的文件，宿主机并不会释放空间，容器空间依然是被占满的。在对精简池（thin pool），宿主机磁盘，和容器限制大小进行了改变，并在docker1.8.2和docker1.12.6下分别进行实验，发现有以下情况：<br> 在centos7.1下，docker1.8.2和1.12.6容器内文件的变化对宿主机存储空间的影响基本一致：</p>
<blockquote>
<ul>
<li>容器内内生成文件，再删除，宿主机不会释放空间，需要删除容器才会释放空间。</li>
<li>容器内生成文件，再删除，宿主机不会释放空间，再生成文件，宿主机重新可能会重新分配空间；也可能不会重新分配空间。</li>
<li>docker1.8.2下:<br>资源池预设空间小于宿主机磁盘大小，在容器中生成文件大于容器预设大小时，无法写入文件，但容器不会崩。<br>资源池预设空间大于宿主机磁盘大小，在容器中生成文件大于容器预设大小时，无法写入文件，但容器崩，退出后将无法再启动容器。<br>docker1.12.6下,当容器中生成文件大于容器预设大小时，无法写入文件，且容器崩溃。</li>
<li>当资源池和宿主机的预设空间大于宿主机空间，在容器中生成文件大于容器预设大小时，宿主机提示磁盘空间占满，docker1.8.2导致了宿主机崩溃，docker1.12.6则不会导致宿主机崩溃，但删除容器后不会释放空间，需要删除devicemapper文件夹。<br><a href="http://www.cnblogs.com/Andrew-XinFei/p/6245330.html" target="_blank" rel="external">http://www.cnblogs.com/Andrew-XinFei/p/6245330.html</a>这篇文章中提到<em>devicemapper + loop-lvm 还有一个缺陷，因为它是稀疏文件，所以它会不断增长。用户在使用过程中会注意到 /var/lib/docker/devicemapper/devicemapper/data 不断增长，而且无法控制。很多人会希望删除镜像或者可以解决这个问题，结果发现效果并不明显。原因就是这个稀疏文件的空间释放后基本不进行垃圾回收的问题。因此往往会出现即使删除了文件内容，空间却无法回收，随着使用这个稀疏文件一直在不断增长。所以:对于 CentOS/RHEL 的用户来说，在没有办法使用 UnionFS 的情况下，一定要配置 direct-lvm 给 devicemapper，无论是为了性能、稳定性还是空间利用率。</em>感觉这段话是解决了上述问题。于是便千辛万苦申请了磁盘，设置之后发现情况并没有改变，删除文件磁盘依然不会释放空间，可能对上述文章理解有误吧，总之改成direct-lvm模式也没有解决我的问题。如果容器内有持续增长的文件，比如日志文件这种，撑爆容器是迟早的事情针对这种情况，目前想到的方法是将这些文件外挂到宿主机上，不知道还有没有别的方法。<br>上文说到千辛万苦挂磁盘，也想说一下。对于设置direct-lvm模式，官网讲得很清楚：<a href="https://docs.docker.com/engine/userguide/storagedriver/device-mapper-driver/#configure-docker-with-devicemapper" target="_blank" rel="external">https://docs.docker.com/engine/userguide/storagedriver/device-mapper-driver/#configure-docker-with-devicemapper</a>，过了英语四级的小伙伴就不要犯懒了。总之我烦了个懒，还用了百度，百度了中文安装方法。还是上述文章，里面的步骤写的很清楚，但是我运行老是报错，我的环境是centos7.3，docker1.12.6，出现的问题，在起容器的时候会有：<br><em>/usr/bin/docker-current: Error response from daemon: shim error: docker-runc not installed on system.</em><br>在给容器映射端口的时候有：<br><em>/usr/bin/docker-current: Error response from daemon: driver failed programming external connectivity on endpoint stoic_wright (35ded5c721d0ccde517d932e54c4062197a84252a72b951de4fd66fbe6f01d88): exec: “docker-proxy”: executable file not found in $PATH.</em><br>仔细对照官网，发现官网在添加direct-pool信息的时候，是将其直接写入配置文件：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[root@localhost Desktop]# vi /usr/lib/systemd/system/docker.service</div><div class="line">[Service]</div><div class="line">Type=notify</div><div class="line">NotifyAccess=all</div><div class="line">EnvironmentFile=-/etc/sysconfig/docker</div><div class="line">EnvironmentFile=-/etc/sysconfig/docker-storage</div><div class="line">EnvironmentFile=-/etc/sysconfig/docker-network</div><div class="line">Environment=GOTRACEBACK=crash</div><div class="line">Environment=DOCKER_HTTP_HOST_COMPAT=1</div><div class="line">Environment=PATH=/usr/libexec/docker:/usr/bin:/usr/sbin</div><div class="line">ExecStart=/usr/bin/dockerd-current \</div><div class="line">          --add-runtime docker-runc=/usr/libexec/docker/docker-runc-current \</div><div class="line">          --default-runtime=docker-runc \</div><div class="line">          --exec-opt native.cgroupdriver=systemd \</div><div class="line">          --userland-proxy-path=/usr/libexec/docker/docker-proxy-current \</div><div class="line">          --storage-driver=devicemapper \</div><div class="line">          --storage-opt=dm.thinpooldev=/dev/mapper/docker-thinpool \</div><div class="line">          --storage-opt=dm.use_deferred_removal=true \</div><div class="line">          --storage-opt=dm.use_deferred_deletion=true</div><div class="line">          $OPTIONS \</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<p>而上述文章采用了drop-in方法（官网也有提及），修改了daemon.conf和daemon.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@srv00 ~]# mkdir /etc/systemd/system/docker.service.d</div><div class="line">[root@srv00 ~]# vi /etc/systemd/system/docker.service.d/daemon.conf</div><div class="line">[Service]</div><div class="line">ExecStart=</div><div class="line">ExecStart=/usr/bin/dockerd</div><div class="line">[root@srv00 ~]# vi /etc/docker/daemon.json</div><div class="line">&#123;</div><div class="line">  &quot;storage-driver&quot;: &quot;devicemapper&quot;,</div><div class="line">   &quot;storage-opts&quot;: [</div><div class="line">     &quot;dm.thinpooldev=/dev/mapper/vgdocker-thinpool&quot;,</div><div class="line">     &quot;dm.use_deferred_removal=true&quot;,</div><div class="line">     &quot;dm.use_deferred_deletion=true&quot;</div><div class="line">   ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不同在于ExecStart，原始配置文件启动的是<em>/usr/bin/dockerd-current</em>，而drop-in的方法启动的是<em>/usr/bin/dockerd</em>。<br>进入<em>/usr/libexec/docker/</em>文件夹，确实没有<em>docker-runc</em>和<em>docker-proxy</em>存在，有的是<em>docker-runc-current</em>和<em>docker-proxy-current</em>。加上两个软连接，文件解决：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># cd /usr/libexec/docker/ </div><div class="line"># sudo ln -s docker-runc-current docker-runc</div><div class="line"># sudo ln -s docker-proxy-current docker-proxy</div></pre></td></tr></table></figure></p>
<p>使用配置文件本来是件好事，比如修改配置不必重启服务，只需发送SIGHUP信号即可。<br>但是目前在dockerd中使用配置文件会有一些问题：例如无法得知具体哪项生效了，启动日志以及docker info，还有ps -ef都不会给出生效配置，这对于排障很不方便。<br>当 dockerd的参数和daemon.json文件中的配置有所重复或者冲突，会直接导致引擎启动失败。<strong>因此在这些问题解决前，先使用修改docker.service这类做法来实现。</strong><br><a href="https://blog.lab99.org/post/docker-2016-07-14-faq.html" target="_blank" rel="external">https://blog.lab99.org/post/docker-2016-07-14-faq.html</a>这篇文章解决了我的很多疑惑，对初学者很有意义。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇碎碎念，想到哪儿就写到哪儿。。&lt;br&gt;官网上说：&lt;em&gt;Docker hosts running the devicemapper storage driver default to a configuration mode known as loop-lvm. T
    
    </summary>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="devicemapper" scheme="http://yoursite.com/tags/devicemapper/"/>
    
      <category term="direct-lvm" scheme="http://yoursite.com/tags/direct-lvm/"/>
    
  </entry>
  
  <entry>
    <title>搭建docker私有仓库并进行用户认证</title>
    <link href="http://yoursite.com/2017/03/01/%E6%90%AD%E5%BB%BAdocker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%B9%B6%E8%BF%9B%E8%A1%8C%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81/"/>
    <id>http://yoursite.com/2017/03/01/搭建docker私有仓库并进行用户认证/</id>
    <published>2017-03-01T07:42:38.000Z</published>
    <updated>2017-03-02T06:57:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>自定义的镜像可以通过公有仓库进行管理，也可以搭建一个本地的私有仓库进行管理。</p>
<h2 id="1-运行环境"><a href="#1-运行环境" class="headerlink" title="1.运行环境"></a>1.运行环境</h2><blockquote>
<ul>
<li>OS:centos7</li>
<li>docker-reistry1.0 下载<a href="http://7ycyh7.com1.z1.glb.clouddn.com/registry.tar" target="_blank" rel="external">registry.tar</a></li>
<li>nginx1.10.2</li>
<li>docker1.8.2</li>
</ul>
</blockquote>
<h2 id="2-使用docker-registry搭建私有仓库"><a href="#2-使用docker-registry搭建私有仓库" class="headerlink" title="2.使用docker-registry搭建私有仓库"></a>2.使用docker-registry搭建私有仓库</h2><p>将registry.tar上传到安装了docker的centos7中，导入nginx镜像。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# docker load &lt; registry.tar</div><div class="line">[root@registry ~]# docker images</div><div class="line">REPOSITORY           TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">docker.io/registry   latest              07d93e41c370        13 months ago       422.8 MB</div></pre></td></tr></table></figure></p>
<p>修改所有计算节点的的hosts配置文件，并刷新hostname。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# vi /etc/hosts</div><div class="line">192.168.147.130  registry</div><div class="line">192.168.147.130  registry_private</div><div class="line">[root@localhost ~]# hostname -F /etc/hostname(刷新hostname)</div></pre></td></tr></table></figure></p>
<p>在docker配置文件中添加允许连接镜像仓库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# vi /etc/sysconfig/docker</div><div class="line">OPTIONS=&apos;--insecure-registry registry:5000 --insecure-registry registry_private:5001</div></pre></td></tr></table></figure></p>
<p>重启docker：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# service docker restart</div></pre></td></tr></table></figure></p>
<p>运行镜像仓库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# docker run -d -p 5000:5000 --name=registry --restart=always --privileged=true  --log-driver=none -v /home/data/registrydata:/tmp/registry registry</div><div class="line">03859903eb0322eaa7b29a915737bb22b685c466d020da499d491485c1f67307</div><div class="line">[root@registry ~]# docker ps -a</div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                    NAMES</div><div class="line">03859903eb03        registry            &quot;docker-registry&quot;   About an hour ago   Up 45 minutes       0.0.0.0:5000-&gt;5000/tcp   registry</div></pre></td></tr></table></figure></p>
<p>上传镜像到仓库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# docker tag sshd:centos  registry:5000/sshd:centos</div><div class="line">[root@localhost ~]# docker push registry:5000/sshd:centos</div><div class="line">The push refers to a repository [registry:5000/sshd] (len: 1)</div><div class="line">Sending image list</div><div class="line">Pushing repository registry:5000/sshd (1 tags)</div><div class="line">9509659cbefb: Image successfully pushed </div><div class="line">f0efe62f33e4: Image successfully pushed </div><div class="line">Pushing tag for rev [f0efe62f33e4] on &#123;http://registry:5000/v1/repositories/sshd/tags/centos&#125;</div><div class="line">[root@localhost ~]# curl registry:5000/v1/search</div><div class="line">&#123;&quot;num_results&quot;: 1, &quot;query&quot;: &quot;&quot;, &quot;results&quot;: [&#123;&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;library/sshd&quot;&#125;]&#125;</div></pre></td></tr></table></figure></p>
<p>下载镜像到本地：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@registry ~]# docker pull registry:5000/sshd:centos</div><div class="line">f0efe62f33e4: Download complete </div><div class="line">9509659cbefb: Download complete </div><div class="line">Status: Image is up to date for registry:5000/sshd:centos</div></pre></td></tr></table></figure></p>
<h2 id="3-为私有仓库添加用户认证"><a href="#3-为私有仓库添加用户认证" class="headerlink" title="3.为私有仓库添加用户认证"></a>3.为私有仓库添加用户认证</h2><p>registry没有安全权限的设置，除非防火墙限制，否则任何人都可以pull、push镜像到registry。更安全的做法是在外层加入登录认证机制。可以使用nginx做反向代理，为私有仓库添加用户认证。</p>
<h3 id="3-1安装及配置nginx"><a href="#3-1安装及配置nginx" class="headerlink" title="3.1安装及配置nginx"></a>3.1安装及配置nginx</h3><p>安装nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@registry ~]# yum install nginx</div></pre></td></tr></table></figure></p>
<p>安装htpasswd工具，生成加密后的密码，并将用户名和密码存储在本地指定路径的文件中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@registry ~]# git clone git://github.com/http-auth/htpasswd.git</div><div class="line">[root@registry ~]# npm install -g htpasswd</div><div class="line">[root@registry ~]# npm install -g htpasswd</div><div class="line">[root@registry ~]# htpasswd -c /etc/nginx/docker-registry.htpasswd usr1</div><div class="line">New password: </div><div class="line">Re-type new password: </div><div class="line">Adding password for user usr1.</div></pre></td></tr></table></figure></p>
<p>配置nginx：在/etc/nginx/sites-enabled/目录下添加新的站点配置文件docker-registry：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">[root@registry nginx]# mkdir /etc/nginx/sites-enabled/</div><div class="line">[root@registry nginx]# vi /etc/nginx/sites-enabled/docker-registry</div><div class="line">upstream docker-registry &#123;</div><div class="line"> server localhost:5000;</div><div class="line">&#125;</div><div class="line">server &#123;</div><div class="line"> listen 5001;</div><div class="line"> server_name registry_private;</div><div class="line"> proxy_set_header Host       $http_host;   # required for Docker client sake</div><div class="line"> proxy_set_header X-Real-IP  $remote_addr; # pass on real client IP</div><div class="line"> client_max_body_size 0; # disable any limits to avoid HTTP 413 for large image uploads</div><div class="line"> # required to avoid HTTP 411: see Issue #1486 (https://github.com/dotcloud/docker/issues/1486)</div><div class="line"> chunked_transfer_encoding on;</div><div class="line"> location / &#123;</div><div class="line">     # let Nginx know about our auth file</div><div class="line">     auth_basic              &quot;Restricted&quot;;</div><div class="line">     auth_basic_user_file    docker-registry.htpasswd;</div><div class="line">     proxy_pass http://docker-registry;</div><div class="line"> &#125;</div><div class="line"> location /_ping &#123;</div><div class="line">     auth_basic off;</div><div class="line">     proxy_pass http://docker-registry;</div><div class="line"> &#125;</div><div class="line"> location /v1/_ping &#123;</div><div class="line">     auth_basic off;</div><div class="line">     proxy_pass http://docker-registry;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>建立配置文件软连接，放在/etc/nginx/conf.d/下，让nginx启用它，然后重启nginx服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@registry sites-enabled]# sudo ln -s /etc/nginx/sites-enabled/docker-registry /etc/nginx/conf.d/docker-registry.conf</div><div class="line">[root@registry sites-enabled]# service nginx restart</div></pre></td></tr></table></figure></p>
<p>如果这一步遇到这个问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@registry sites-enabled]# systemctl status nginx.service</div><div class="line">nginx.service - The nginx HTTP and reverse proxy server</div><div class="line">   Loaded: loaded (/usr/lib/systemd/system/nginx.service; disabled)</div><div class="line">   Active: failed (Result: exit-code) since Thu 2017-03-02 11:08:27 CST; 14s ago</div><div class="line">  Process: 39831 ExecStartPre=/usr/sbin/nginx -t (code=exited, status=1/FAILURE)</div><div class="line">  Process: 39830 ExecStartPre=/usr/bin/rm -f /run/nginx.pid (code=exited, status=0/SUCCESS)</div><div class="line">Mar 02 11:08:27 registry systemd[1]: Starting The nginx HTTP and reverse proxy server...</div><div class="line">Mar 02 11:08:27 registry nginx[39831]: nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</div><div class="line">**Mar 02 11:08:27 registry nginx[39831]: nginx: [emerg] bind() to 0.0.0.0:5001 failed (13: Permission denied)**</div><div class="line">Mar 02 11:08:27 registry nginx[39831]: nginx: configuration file /etc/nginx/nginx.conf test failed</div><div class="line">Mar 02 11:08:27 registry systemd[1]: nginx.service: control process exited, code=exited status=1</div><div class="line">Mar 02 11:08:27 registry systemd[1]: Failed to start The nginx HTTP and reverse proxy server.</div><div class="line">Mar 02 11:08:27 registry systemd[1]: Unit nginx.service entered failed state.</div></pre></td></tr></table></figure></p>
<p>可能是是开启了selinux导致的，查看是否开启了selinux，”Enforecing”代表开启了selinux，”disabled”或者”permissive”则是关闭了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@registry sites-enabled]# getenforce</div><div class="line">Enforcing</div><div class="line">[root@registry sites-enabled]# setenforce 0 (临时关闭selinux)</div><div class="line">[root@registry sites-enabled]# getenforce</div><div class="line">Permissive</div></pre></td></tr></table></figure></p>
<p>这时访问registry_private:5001，则被禁止：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@registry sites-enabled]# getenforce</div><div class="line">Permissive</div></pre></td></tr></table></figure></p>
<p>临时修改重启电脑后再重启nginx，每次均需要修改，可以永久关闭，修改/etc/selinux/config 文件，将SELINUX=enforcing改为SELINUX=disabled，重启电脑生效。<br>通过用户名和密码登录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@registry sites-enabled]# curl usr1:123456@registry_private:5001/v1/search</div><div class="line">&#123;&quot;num_results&quot;: 1, &quot;query&quot;: &quot;&quot;, &quot;results&quot;: [&#123;&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;library/sshd&quot;&#125;]&#125;</div></pre></td></tr></table></figure></p>
<p>如果用浏览器登录，则会出现要求填写用户名和密码的对话框。</p>
<h3 id="3-2为nginx安装ssl证书"><a href="#3-2为nginx安装ssl证书" class="headerlink" title="3.2为nginx安装ssl证书"></a>3.2为nginx安装ssl证书</h3><p>此时登录registry_private下载镜像，会无法下载：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@registry sites-enabled]# docker login registry_private:5001</div><div class="line">Username: usr1</div><div class="line">Password: </div><div class="line">Email: </div><div class="line">WARNING: login credentials saved in /root/.docker/config.json</div><div class="line">Login Succeeded</div><div class="line">[root@registry sites-enabled]# docker pull registry_private:5001/sshd:centos</div><div class="line">Trying to pull repository registry_private:5001/sshd ... failed</div><div class="line">Could not reach any registry endpoint</div></pre></td></tr></table></figure></p>
<p>这是因为docker-registry不允许http明文传输，此时可以安装SSL证书，使用HTTPS传输。<br>首先在nginx配置文件中添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@registry sites-enabled]#  vi /etc/nginx/conf.d/docker-registry.conf</div><div class="line">......</div><div class="line">server &#123;</div><div class="line"> listen 5001;</div><div class="line"> server_name registry_private;</div><div class="line"> ssl on;</div><div class="line"> ssl_certificate /etc/nginx/ssl/nginx.crt;</div><div class="line"> ssl_certificate_key /etc/nginx/ssl/nginx.key;</div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>创建相关证书：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">[root@registry sites-enabled]# mkdir /etc/nginx/ssl  (创建配置目录)</div><div class="line">[root@registry sites-enabled]# cd /etc/pki/CA</div><div class="line">[root@registry CA]# openssl genrsa -out private/cakey.pem 2048  (生成秘钥)</div><div class="line">[root@registry CA]# cd /etc/pki/CA/private/</div><div class="line">y.pem</div><div class="line">[root@registry private]# chmod 400 cakey.pem (修改私钥文件权限)[root@registry private]# cd /etc/pki/CA/</div><div class="line">[root@registry CA]# openssl req -new -x509 -key private/cakey.pem -out cacert.pem  (生成根证书)</div><div class="line">You are about to be asked to enter information that will be incorporated</div><div class="line">into your certificate request.</div><div class="line">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class="line">There are quite a few fields but you can leave some blank</div><div class="line">For some fields there will be a default value,</div><div class="line">If you enter &apos;.&apos;, the field will be left blank.</div><div class="line">-----</div><div class="line">Country Name (2 letter code) [XX]:CN</div><div class="line">State or Province Name (full name) []:BJ</div><div class="line">Locality Name (eg, city) [Default City]:BJ</div><div class="line">Organization Name (eg, company) [Default Company Ltd]:  </div><div class="line">Organizational Unit Name (eg, section) []:</div><div class="line">Common Name (eg, your name or your server&apos;s hostname) []:</div><div class="line">Email Address []:</div></pre></td></tr></table></figure></p>
<p>生成根证书的时候会提示输入一些内容，可以随便输入，也可直接回车。如果有入，最好与后续为nginx生成证书签署请求的填写内容保持一致。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">[root@registry private]# cd /etc/pki/CA/</div><div class="line">[root@registry CA]# openssl req -new -x509 -key private/cakey.pem -out cacert.pem  (生成根证书)</div><div class="line">[root@registry CA]# cd /etc/nginx/ssl</div><div class="line">[root@registry ssl]# openssl genrsa -out nginx.key 2048  (为nginx web服务器生成ssl密钥)</div><div class="line">[root@registry ssl]# openssl req -new -key nginx.key -out nginx.csr  (为nginx生成证书请求)</div><div class="line">You are about to be asked to enter information that will be incorporated</div><div class="line">into your certificate request.</div><div class="line">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class="line">There are quite a few fields but you can leave some blank</div><div class="line">For some fields there will be a default value,</div><div class="line">If you enter &apos;.&apos;, the field will be left blank.</div><div class="line">-----</div><div class="line">Country Name (2 letter code) [XX]:CN</div><div class="line">State or Province Name (full name) []:BJ</div><div class="line">Locality Name (eg, city) [Default City]:BJ</div><div class="line">Organization Name (eg, company) [Default Company Ltd]:</div><div class="line">Organizational Unit Name (eg, section) []:</div><div class="line">Common Name (eg, your name or your server&apos;s hostname) []:regstry_private(**此处一定要填写需要授予证书的服务器域名或主机名**)</div><div class="line">Email Address []:</div><div class="line">Please enter the following &apos;extra&apos; attributes</div><div class="line">to be sent with your certificate request</div><div class="line">A challenge password []:</div><div class="line">An optional company name []:</div><div class="line">[root@registry ssl]# touch /etc/pki/CA/index.txt</div><div class="line">[root@registry ssl]# touch /etc/pki/CA/serial</div><div class="line">[root@registry ssl]# echo &quot;00&quot; &gt; /etc/pki/CA/serial</div><div class="line">[root@registry ssl]# openssl ca -in nginx.csr -out nginx.crt  (私有CA根据请求来签发证书)</div><div class="line">Using configuration from /etc/pki/tls/openssl.cnf</div><div class="line">Check that the request matches the signature</div><div class="line">Signature ok</div><div class="line">The commonName field needed to be supplied and was missing (生成证书请求是没有填写任何信息,所以有这一句话的提示。)</div></pre></td></tr></table></figure></p>
<p>让根证书起作用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@registry ssl]# cp /etc/pki/tls/certs/ca-bundle.crt&#123;,.bak&#125;  (备份，以防出错)</div><div class="line">[root@registry ssl]# cat /etc/pki/CA/cacert.pem &gt;&gt; /etc/pki/tls/certs/ca-bundle.crt</div></pre></td></tr></table></figure></p>
<p>此时再下载私有仓库的镜像：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@registry certs]# docker pull registry_private:5001/sshd:centos</div><div class="line">f0efe62f33e4: Download complete </div><div class="line">9509659cbefb: Download complete </div><div class="line">Status: Image is up to date for registry_private:5001/sshd:centos</div></pre></td></tr></table></figure></p>
<p>用网页登录时，需要注意是https协议。<br><img src="http://7ycyh7.com1.z1.glb.clouddn.com/屏幕快照%202017-03-02%20下午2.10.31.png" alt="网页登录"></p>
<p><strong>注意：下载不在同一主机上的私有仓库时，需要在docker的配置文件中添加 <em>–insecurity-registry</em> 参数。</strong></p>
<p>参考博客：<br><a href="https://segmentfault.com/a/1190000000801162" target="_blank" rel="external">https://segmentfault.com/a/1190000000801162</a><br><a href="http://cloud.51cto.com/art/201412/458680_all.htm" target="_blank" rel="external">http://cloud.51cto.com/art/201412/458680_all.htm</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自定义的镜像可以通过公有仓库进行管理，也可以搭建一个本地的私有仓库进行管理。&lt;/p&gt;
&lt;h2 id=&quot;1-运行环境&quot;&gt;&lt;a href=&quot;#1-运行环境&quot; class=&quot;headerlink&quot; title=&quot;1.运行环境&quot;&gt;&lt;/a&gt;1.运行环境&lt;/h2&gt;&lt;blockquote
    
    </summary>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="ssl" scheme="http://yoursite.com/tags/ssl/"/>
    
  </entry>
  
  <entry>
    <title>docker搭建elk镜像</title>
    <link href="http://yoursite.com/2017/02/27/docker%E6%90%AD%E5%BB%BAelk%E9%95%9C%E5%83%8F/"/>
    <id>http://yoursite.com/2017/02/27/docker搭建elk镜像/</id>
    <published>2017-02-27T03:34:49.000Z</published>
    <updated>2017-02-27T14:48:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用elk(elasticsearch+logstash+kibana)不需要openssh，搭建openssh是为了方便往elasticsearch里添加数据。</p>
<p><strong>因为安装过程用到了service，亲测centos7的基础镜像不能用。用service起的命令可以手动起，也可以安装centos7.2版本，然后用 <em>–privileged</em> 赋予容器root权限</strong></p>
<h2 id="1-安装openssh"><a href="#1-安装openssh" class="headerlink" title="1.安装openssh"></a>1.安装openssh</h2><h3 id="1-1创建容器"><a href="#1-1创建容器" class="headerlink" title="1.1创建容器"></a>1.1创建容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">rosyMacBook-Pro:~ rosy$ docker run -tid --privileged yasanbee/centos7.2-systemd /bin/bash</div><div class="line">a435707cf766d50b517b61ffb74b86539bb0ce208965af566ee5e688726b041f</div><div class="line">rosyMacBook-Pro:~ rosy$ docker ps -a</div><div class="line">CONTAINER ID        IMAGE                        COMMAND                  CREATED             STATUS                    PORTS                     NAMES</div><div class="line">a435707cf766        yasanbee/centos7.2-systemd   &quot;/usr/sbin/init /bin/&quot;   5 seconds ago       Up 4 seconds                                        hungry_darwin</div></pre></td></tr></table></figure>
<p>进入容器，如果启动的时候就进入，亲测会出现无法退出的问题，所以建议先创建后进入容器。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rosyMacBook-Pro:~ rosy$ docker exec -ti a435 /bin/bash</div></pre></td></tr></table></figure>
<h3 id="1-2安装passwd"><a href="#1-2安装passwd" class="headerlink" title="1.2安装passwd"></a>1.2安装passwd</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@a435707cf766 /]# yum install passwd -y</div></pre></td></tr></table></figure>
<h3 id="1-3修改centos密码"><a href="#1-3修改centos密码" class="headerlink" title="1.3修改centos密码"></a>1.3修改centos密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@a435707cf766 /]# passwd</div><div class="line">Changing password for user root.</div><div class="line">New password: #此处输入密码并记住它，ssh连接需要</div><div class="line">BAD PASSWORD: The password is shorter than 8 characters</div><div class="line">Retype new password: </div><div class="line">passwd: all authentication tokens updated successfully.</div></pre></td></tr></table></figure>
<h3 id="1-4安装openssh"><a href="#1-4安装openssh" class="headerlink" title="1.4安装openssh"></a>1.4安装openssh</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@a435707cf766 /]# yum install openssh-server -y</div></pre></td></tr></table></figure>
<h3 id="1-5生成公钥、私钥"><a href="#1-5生成公钥、私钥" class="headerlink" title="1.5生成公钥、私钥"></a>1.5生成公钥、私钥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">[root@a435707cf766 /]# ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key</div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter passphrase (empty for no passphrase): #回车</div><div class="line">Enter same passphrase again: #回车</div><div class="line">Your identification has been saved in /etc/ssh/ssh_host_rsa_key.</div><div class="line">Your public key has been saved in /etc/ssh/ssh_host_rsa_key.pub.</div><div class="line">The key fingerprint is:</div><div class="line">f7:eb:32:e9:26:6a:ec:82:e7:0d:ae:2e:1a:61:38:f7 root@a435707cf766</div><div class="line">The key&apos;s randomart image is:</div><div class="line">+--[ RSA 2048]----+</div><div class="line">|                 |</div><div class="line">|                 |</div><div class="line">|                 |</div><div class="line">|.                |</div><div class="line">|+..     S .      |</div><div class="line">|.+ .     . .     |</div><div class="line">|.  .E.     ..    |</div><div class="line">|....ooo . =  .   |</div><div class="line">|ooo+o++. +.+o    |</div><div class="line">+-----------------+</div><div class="line">[root@a435707cf766 /]# ssh-keygen -t rsa -f /etc/ssh/ssh_host_ecdsa_key</div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter passphrase (empty for no passphrase): #回车</div><div class="line">Enter same passphrase again: #回车</div><div class="line">Your identification has been saved in /etc/ssh/ssh_host_ecdsa_key.</div><div class="line">Your public key has been saved in /etc/ssh/ssh_host_ecdsa_key.pub.</div><div class="line">The key fingerprint is:</div><div class="line">62:d8:41:ed:de:8f:26:4d:61:3b:66:37:d7:3e:7c:3f root@a435707cf766</div><div class="line">The key&apos;s randomart image is:</div><div class="line">+--[ RSA 2048]----+</div><div class="line">|      ..         |</div><div class="line">|     .  .        |</div><div class="line">|      ..         |</div><div class="line">|     o .. o      |</div><div class="line">|    . +.So o   . |</div><div class="line">|     . .. B o . .|</div><div class="line">|         = = o.. |</div><div class="line">|        . + .  Eo|</div><div class="line">|         o      *|</div><div class="line">+-----------------+</div><div class="line">[root@a435707cf766 /]# ssh-keygen -t rsa -f /etc/ssh/ssh_host_ed25519_key</div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter passphrase (empty for no passphrase): #回车</div><div class="line">Enter same passphrase again: #回车</div><div class="line">Your identification has been saved in /etc/ssh/ssh_host_ed25519_key.</div><div class="line">Your public key has been saved in /etc/ssh/ssh_host_ed25519_key.pub.</div><div class="line">The key fingerprint is:</div><div class="line">cb:6f:98:dc:b0:65:83:dd:d0:aa:25:c1:c2:ab:cb:7d root@a435707cf766</div><div class="line">The key&apos;s randomart image is:</div><div class="line">+--[ RSA 2048]----+</div><div class="line">|                 |</div><div class="line">|                 |</div><div class="line">|     . .   .     |</div><div class="line">|      o o . .    |</div><div class="line">|       oS+ +     |</div><div class="line">|      ..+.B .    |</div><div class="line">|     . .o% .     |</div><div class="line">|   ...  E.o      |</div><div class="line">|    o... ..      |</div><div class="line">+-----------------+</div></pre></td></tr></table></figure>
<h3 id="1-6编写启动脚本"><a href="#1-6编写启动脚本" class="headerlink" title="1.6编写启动脚本"></a>1.6编写启动脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@a435707cf766 /]# vi /run.sh</div><div class="line">#!/bin/bash</div><div class="line">/usr/sbin/sshd -D</div><div class="line">[root@a435707cf766 /]# chmod +x /run.sh</div></pre></td></tr></table></figure>
<h3 id="1-7修改SSH默认端口"><a href="#1-7修改SSH默认端口" class="headerlink" title="1.7修改SSH默认端口"></a>1.7修改SSH默认端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@a435707cf766 /]# vi /etc/ssh/sshd_config </div><div class="line">Port 222</div></pre></td></tr></table></figure>
<h3 id="1-8退出容器并将其保存为镜像"><a href="#1-8退出容器并将其保存为镜像" class="headerlink" title="1.8退出容器并将其保存为镜像"></a>1.8退出容器并将其保存为镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">rosyMacBook-Pro:~ rosy$ docker commit a435 sshd_centos7.2:centos7.2 </div><div class="line">sha256:8857ac6591c67e1a573a51faace20e958f148730ffe2e7ac49d26272cded8a51</div><div class="line">rosyMacBook-Pro:~ rosy$ docker images</div><div class="line">REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">sshd_centos7.2               centos7.2           8857ac6591c6        25 seconds ago      427.7 MB</div></pre></td></tr></table></figure>
<h2 id="2-搭建elk"><a href="#2-搭建elk" class="headerlink" title="2.搭建elk"></a>2.搭建elk</h2><p>添加数据和展示数据用elasticsearch和kibana就足够了，暂时用不到logstash，可以需要的时候再添加。<br>用各种方法，将elk.zip放进容器里面。可以外挂数据卷，外挂数据卷容器等，这里采用另起终端开了个服务器，再在容器里进行下载的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rosyMacBook-Pro:~ rosy$ python -m SimpleHTTPServer 8080</div></pre></td></tr></table></figure></p>
<p>在容器里面下载并保存在/root/下面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@39e9e27c9863 /]# curl -o /root/elk.zip 192.168.234.52:8080/elk.zip</div></pre></td></tr></table></figure></p>
<p>将elk.zip解压缩，如果容器里面没有unzip命令，需要安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@39e9e27c9863 /]# yum install unzip </div><div class="line">[root@39e9e27c9863 ~]# unzip /root/elk.zip</div><div class="line">[root@39e9e27c9863 ~]# cd /root/elk</div><div class="line">[root@39e9e27c9863 elk]# ls</div><div class="line">elasticsearch-1.7.3.noarch.rpm  kibana-4.1.2-linux-x64.tar.gz  logstash-1.5.4-1.noarch.rpm  logstash-forwarder-0.4.0-1.x86_64.rpm</div></pre></td></tr></table></figure></p>
<h3 id="2-1安装环境和安装包"><a href="#2-1安装环境和安装包" class="headerlink" title="2.1安装环境和安装包"></a>2.1安装环境和安装包</h3><h4 id="2-1-1安装环境"><a href="#2-1-1安装环境" class="headerlink" title="2.1.1安装环境"></a>2.1.1安装环境</h4><blockquote>
<ul>
<li>OS：Centos7.1</li>
<li>jdk1.7</li>
</ul>
</blockquote>
<h4 id="2-1-2安装包"><a href="#2-1-2安装包" class="headerlink" title="2.1.2安装包"></a>2.1.2安装包</h4><blockquote>
<ul>
<li>elasticsearch-1.7.3.noarch.rpm </li>
<li>kibana-4.1.2-linux-x64.tar.gz     </li>
</ul>
</blockquote>
<h4 id="2-1-2创建容器"><a href="#2-1-2创建容器" class="headerlink" title="2.1.2创建容器"></a>2.1.2创建容器</h4><p>基于我们生产的sshd镜像创建容器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rosyMacBook-Pro:~ rosy$ docker run -tid --privileged sshd_centos7.2:centos7.2 /bin/bash</div><div class="line">39e9e27c98630d10461621e71d12074a91d0d4a7a69f836a5155cd3a84493d30</div><div class="line">rosyMacBook-Pro:~ rosy$ docker exec -ti 39e9e /bin/bash</div></pre></td></tr></table></figure></p>
<p>也可以点击<a href="http://7ycyh7.com1.z1.glb.clouddn.com/elk.zip" target="_blank" rel="external">elk.zip</a>下载相关安装包</p>
<h3 id="2-2安装jdk1-7"><a href="#2-2安装jdk1-7" class="headerlink" title="2.2安装jdk1.7"></a>2.2安装jdk1.7</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@39e9e27c9863 /]# yum install java-1.7.0-openjdk</div></pre></td></tr></table></figure>
<h3 id="2-3安装elasticsearch"><a href="#2-3安装elasticsearch" class="headerlink" title="2.3安装elasticsearch"></a>2.3安装elasticsearch</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[root@39e9e27c9863 ~]# cd /root/elk</div><div class="line">[root@39e9e27c9863 elk]# yum localinstall elasticsearch-1.7.3.noarch.rpm</div><div class="line">[root@39e9e27c9863 elk]# systemctl daemon-reload </div><div class="line">[root@39e9e27c9863 elk]# systemctl enable elasticsearch.service (设置开机自启动)</div><div class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/elasticsearch.service to /usr/lib/systemd/system/elasticsearch.service.</div><div class="line">[root@39e9e27c9863 elk]# systemctl start elasticsearch.service (开启服务)</div><div class="line">[root@39e9e27c9863 elk]# systemctl status elasticsearch.service (查询服务状态)</div><div class="line">● elasticsearch.service - Elasticsearch</div><div class="line">   Loaded: loaded (/usr/lib/systemd/system/elasticsearch.service; enabled; vendor preset: disabled)</div><div class="line">   Active: active (running) since Mon 2017-02-27 12:09:14 UTC; 9s ago</div><div class="line">     Docs: http://www.elastic.co</div><div class="line"> Main PID: 271 (java)</div><div class="line">   CGroup: /docker/39e9e27c98630d10461621e71d12074a91d0d4a7a69f836a5155cd3a84493d30/system.slice/elasticsearch.service</div><div class="line">           └─271 java -Xms256m -Xmx1g -Djava.awt.headless=true -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupa...</div><div class="line">Feb 27 12:09:14 39e9e27c9863 systemd[1]: Started Elasticsearch.</div><div class="line">Feb 27 12:09:14 39e9e27c9863 systemd[1]: Starting Elasticsearch...</div></pre></td></tr></table></figure>
<p>查看服务状态，看到服务在运行，则证明elasticsearch安装完成，对外提供服务的端口为9200。</p>
<h3 id="2-4安装kibana"><a href="#2-4安装kibana" class="headerlink" title="2.4安装kibana"></a>2.4安装kibana</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@39e9e27c9863 elk]# tar zxf /root/elk/kibana-4.1.2-linux-x64.tar.gz -C /usr/local/ </div><div class="line">[root@39e9e27c9863 elk]# cd /usr/local/</div><div class="line">[root@39e9e27c9863 local]# mv kibana-4.1.2-linux-x64/ kibana</div><div class="line">[root@39e9e27c9863 local]# cd /usr/local/kibana/bin</div><div class="line">[root@39e9e27c9863 bin]# ls</div><div class="line">kibana  kibana.bat</div></pre></td></tr></table></figure>
<p>此时运行<em>./kibana</em>即可开启，将启动kibana写到service里面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">[root@39e9e27c9863 local]# vi /etc/systemd/system/kibana.service</div><div class="line"></div><div class="line">[Service]</div><div class="line">ExecStart=/usr/local/kibana/bin/kibana</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div><div class="line">[root@39e9e27c9863 bin]# systemctl enable kibana.service</div><div class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/kibana.service to /etc/systemd/system/kibana.service.</div><div class="line">[root@39e9e27c9863 bin]# systemctl start kibana.service</div><div class="line">[root@39e9e27c9863 bin]# systemctl status kibana.service </div><div class="line">● kibana.service</div><div class="line">   Loaded: loaded (/etc/systemd/system/kibana.service; enabled; vendor preset: disabled)</div><div class="line">   Active: active (running) since Mon 2017-02-27 12:22:18 UTC; 7s ago</div><div class="line"> Main PID: 348 (node)</div><div class="line">   CGroup: /docker/39e9e27c98630d10461621e71d12074a91d0d4a7a69f836a5155cd3a84493d30/system.slice/kibana.service</div><div class="line">           └─348 /usr/local/kibana/bin/../node/bin/node /usr/local/kibana/bin/../src/bin/kibana.js</div><div class="line"></div><div class="line">Feb 27 12:22:18 39e9e27c9863 systemd[1]: Started kibana.service.</div><div class="line">Feb 27 12:22:18 39e9e27c9863 systemd[1]: Starting kibana.service...</div><div class="line">Feb 27 12:22:23 39e9e27c9863 kibana[348]: &#123;&quot;name&quot;:&quot;Kibana&quot;,&quot;hostname&quot;:&quot;39e9e27c9863&quot;,&quot;pid&quot;:348,&quot;level&quot;:30,&quot;msg&quot;:&quot;No existing kibana index found&quot;,&quot;time&quot;:&quot;2017-0...3Z&quot;,&quot;v&quot;:0&#125;</div><div class="line">Feb 27 12:22:23 39e9e27c9863 kibana[348]: &#123;&quot;name&quot;:&quot;Kibana&quot;,&quot;hostname&quot;:&quot;39e9e27c9863&quot;,&quot;pid&quot;:348,&quot;level&quot;:30,&quot;msg&quot;:&quot;Listening on 0.0.0.0:5601&quot;,&quot;time&quot;:&quot;2017-02-27T...9Z&quot;,&quot;v&quot;:0&#125;</div><div class="line">Hint: Some lines were ellipsized, use -l to show in full.</div></pre></td></tr></table></figure></p>
<p>查看服务状态，看到服务在运行，则证明kibana安装完成，kibana对外提供服务的端口为5601。</p>
<h3 id="2-5退出容器并将其保存为镜像"><a href="#2-5退出容器并将其保存为镜像" class="headerlink" title="2.5退出容器并将其保存为镜像"></a>2.5退出容器并将其保存为镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">rosyMacBook-Pro:~ rosy$ docker ps -a</div><div class="line">CONTAINER ID        IMAGE                        COMMAND                  CREATED             STATUS                    PORTS                     NAMES</div><div class="line">39e9e27c9863        sshd_centos7.2:centos7.2     &quot;/usr/sbin/init /bin/&quot;   3 hours ago         Up About an hour                                    ecstatic_liskov</div><div class="line">rosyMacBook-Pro:~ rosy$ docker commit 39e9e elk:sshd_centos7.2</div><div class="line">sha256:fe5366107fa2ddc79edc3a73091ef78789f3d28ecb8b2d88884ce69cb13511be</div><div class="line">rosyMacBook-Pro:~ rosy$ docker images</div><div class="line">REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">elk                          sshd_centos7.2      fe5366107fa2        11 seconds ago      1.027 GB</div></pre></td></tr></table></figure>
<h2 id="3-验证elk镜像"><a href="#3-验证elk镜像" class="headerlink" title="3.验证elk镜像"></a>3.验证elk镜像</h2><h3 id="3-1验证kibana"><a href="#3-1验证kibana" class="headerlink" title="3.1验证kibana"></a>3.1验证kibana</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rosyMacBook-Pro:~ rosy$ docker run -tid --privileged -p 5050:5601 -p 223:222 --name elk_test elk:sshd_centos7.2 /run.sh</div><div class="line">d2db917f76f5e176a2bec7fb2ce19c74078d22ba567395406b092171f174bb7b</div></pre></td></tr></table></figure>
<p>打开浏览器，输入ip地址和对外映射的端口5050，可以访问kibana的网页：<br><img src="http://7ycyh7.com1.z1.glb.clouddn.com/屏幕快照%202017-02-27%20下午8.58.05.png" alt="kibana"><br>则基于elk的镜像搭建成功。<br><strong>如果不是在本机上进行的访问，则需要注意关闭防火墙或者开启相应的端口。</strong><br>关闭防火墙方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rosyMacBook-Pro:~ rosy$ systemctl disable firewalld.service</div><div class="line">rosyMacBook-Pro:~ rosy$ systemctl stop firewalld.service</div></pre></td></tr></table></figure></p>
<p>防火墙开启端口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rosyMacBook-Pro:~ rosy$ firewall-cmd --permanent --add-port=5601/tcp    （防火墙开启5601端口）</div><div class="line">success</div><div class="line">rosyMacBook-Pro:~ rosy$ firewall-cmd --reload    （重载防火墙）</div><div class="line">success</div></pre></td></tr></table></figure></p>
<h3 id="3-2验证ssh"><a href="#3-2验证ssh" class="headerlink" title="3.2验证ssh"></a>3.2验证ssh</h3><p>远程ssh登录，启动容器对外映射的端口为223。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">rosyMacBook-Pro:~ rosy$ sudo ssh 192.168.234.52 -p 223</div><div class="line">Password:</div><div class="line">The authenticity of host &apos;[192.168.234.52]:223 ([192.168.234.52]:223)&apos; can&apos;t be established.</div><div class="line">RSA key fingerprint is f7:eb:32:e9:26:6a:ec:82:e7:0d:ae:2e:1a:61:38:f7.</div><div class="line">Are you sure you want to continue connecting (yes/no)? yes</div><div class="line">Warning: Permanently added &apos;[192.168.234.52]:223&apos; (RSA) to the list of known hosts.</div><div class="line">root@192.168.234.52&apos;s password: </div><div class="line">System is booting up. See pam_nologin(8)</div><div class="line">[root@d2db917f76f5 ~]# ls</div><div class="line">anaconda-ks.cfg  elk  elk.zip</div></pre></td></tr></table></figure></p>
<p>ssh成功连接容器。</p>
<h3 id="3-3验证elasticsearch"><a href="#3-3验证elasticsearch" class="headerlink" title="3.3验证elasticsearch"></a>3.3验证elasticsearch</h3><p>在容器中添加一条数据，ssh连接或者进入容器均可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@d2db917f76f5 ~]# curl -XPUT &apos;http://localhost:9200/twitter/tweet/1&apos; -d &apos;&#123;</div><div class="line">    &quot;user&quot; : &quot;kimchy&quot;,</div><div class="line">    &quot;post_date&quot; : &quot;2017-1-15T14:12:12&quot;,</div><div class="line">    &quot;message&quot; : &quot;trying out Elasticsearch&quot;</div><div class="line">&#125;&apos;</div><div class="line">&#123;&quot;_index&quot;:&quot;twitter&quot;,&quot;_type&quot;:&quot;tweet&quot;,&quot;_id&quot;:&quot;1&quot;,&quot;_version&quot;:1,&quot;created&quot;:true&#125;[root@d2db917f76f5 ~]# </div><div class="line">[root@d2db917f76f5 ~]#</div></pre></td></tr></table></figure></p>
<p>在网页中打开kibana，在setting中选择关键字“twitter”可以看见我们添加的数据：<br><img src="http://7ycyh7.com1.z1.glb.clouddn.com/屏幕快照%202017-02-27%20下午9.18.41.png" alt="twitter"></p>
<p>至此，elk的镜像便搭好了，至于elasticsearch和kibana的用法，会另起一篇叨叨。</p>
<p>本文参考了以下博客：<br>1.<a href="http://www.cnblogs.com/zhenyuyaodidiao/p/4948000.html" target="_blank" rel="external">http://www.cnblogs.com/zhenyuyaodidiao/p/4948000.html</a><br>2.<a href="http://www.cnblogs.com/zhenyuyaodidiao/p/4512249.html" target="_blank" rel="external">http://www.cnblogs.com/zhenyuyaodidiao/p/4512249.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用elk(elasticsearch+logstash+kibana)不需要openssh，搭建openssh是为了方便往elasticsearch里添加数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因为安装过程用到了service，亲测centos7的基础镜像不能用。用serv
    
    </summary>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="elk" scheme="http://yoursite.com/tags/elk/"/>
    
      <category term="openssh" scheme="http://yoursite.com/tags/openssh/"/>
    
  </entry>
  
  <entry>
    <title>mtr丢包率分析</title>
    <link href="http://yoursite.com/2017/02/15/mtr%E4%B8%A2%E5%8C%85%E7%8E%87%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/02/15/mtr丢包率分析/</id>
    <published>2017-02-15T13:00:15.000Z</published>
    <updated>2017-02-16T07:46:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Linux下，我们一般用ping来判断网络的丢包和延迟，用traceroute来跟踪路由路径。mtr将ping和traceroute结合起来，既能判断网络路由路径，又能得到丢包和延迟等信息。</p>
<p>mtr的用法网上随便一搜就一大堆：<a href="https://www.mankier.com/8/mtr" target="_blank" rel="external">https://www.mankier.com/8/mtr</a></p>
<p>mtr的数据一般长这样：</p>
<p><img src="http://7ycyh7.com1.z1.glb.clouddn.com/屏幕快照%202017-02-15%20下午10.15.06.png" alt="mtr数据图"></p>
<p>其中host为“???”的地方表示该节点不让ping。</p>
<p>Loss%:表示该节点的丢包率；</p>
<p>Snt:表示每秒发送数据包的数量，默认值是10 可以通过参数 <em>-c</em> 来指定数量；</p>
<p>Last:表示最近一次的返回延时；</p>
<p>Avg:表示延时平均值这个应该是发送ping包的平均延时；</p>
<p>Best:表示最好或者说延时最短的值；</p>
<p>Wrst:表示最差或者说时延最常的值；</p>
<p>StDev:表示标准偏差。</p>
<p>然后我对各节点丢包率无法理解：1.前n-1行的丢包率相加和最后一行的丢包率不想等；2.某些点的丢包率超过了最后一行的丢包率；3.ping其中丢包率高的节点，ping的丢包率和mtr结果在该点的丢包率差别极大。</p>
<p>针对这些问题，百度，Google提供了很多很有参考价值的信息，比如：<br><a href="https://www.linode.com/docs/networking/diagnostics/diagnosing-network-issues-with-mtr/" target="_blank" rel="external">https://www.linode.com/docs/networking/diagnostics/diagnosing-network-issues-with-mtr/</a></p>
<p><a href="http://serverfault.com/questions/585862/why-mtr-is-much-faster-than-traceroute" target="_blank" rel="external">http://serverfault.com/questions/585862/why-mtr-is-much-faster-than-traceroute</a></p>
<p><a href="http://serverfault.com/questions/260414/how-to-interpret-traceroute-output-of-mtr" target="_blank" rel="external">http://serverfault.com/questions/260414/how-to-interpret-traceroute-output-of-mtr</a></p>
<p><a href="http://superuser.com/questions/591804/where-is-packet-loss-occuring-interpreting-mtr" target="_blank" rel="external">http://superuser.com/questions/591804/where-is-packet-loss-occuring-interpreting-mtr</a></p>
<p>对于中间节点丢包总结起来大约是这样说的：该节点本身<strong>网络不好</strong>；ICMP<strong>速率限制</strong>引起了数据包的丢失。判断方法是：</p>
<p>1.如果某节点有丢包，但是下一节点没有丢包，则证明该节点是ICMP速率限制。解决方法可以增加参数 <em>-i</em>（设置ICMP发送一次包的时间，默认为1秒）。</p>
<p>2.如果连续几个节点都存在丢包，则这些节点存在因网络不好而产生的丢包，但无法判断是否存在因速率限制而产生的丢包。</p>
<p>3.如果最后一个节点存在丢包，则这个节点的丢包率看做整条目录的丢包率。</p>
<p>但是以上判断方法是如何得到的，网上就没有很多的说明了。只好从mtr的原理开始研究。</p>
<p>从网络抓包开始。分别对同一个目标地址进行ping和mtr，抓取这两种操作时的网络发icmp包情况如下：</p>
<p>mtr的路径和抓包：</p>
<p><img src="http://7ycyh7.com1.z1.glb.clouddn.com/屏幕快照%202017-02-15%20下午11.22.58.png" alt=""></p>
<p><img src="http://7ycyh7.com1.z1.glb.clouddn.com/屏幕快照%202017-02-15%20下午11.23.45.png" alt=""></p>
<p>ping的抓包：</p>
<p><img src="http://7ycyh7.com1.z1.glb.clouddn.com/屏幕快照%202017-02-15%20下午11.28.57.png" alt=""></p>
<p>由ping和mtr的抓包情况图可以看出：<br>mtr对目标地址发送一个icmp包，然后在一个节点返回一个icmp包；然后再对目标节点发送一个icmp包，再第二个节点返回一个icmp包；一直到最后一个节点返回icmp包，这样一次发包完成。参数 <em>-i</em> 便是控制这一过程时间的，默认是1秒钟。当节点比较多的时候，会出现发送了很多icmp包，之前所说的增加 <em>-i</em> 的参数值，能够降低这个发包频率，以达到避免被icmp限速的目的。如果其中某个节点返回的包丢掉了，则在该节点上产生了丢包率。<br>ping的icmp发包过程是本地发送给目标地址一个icmp包，然后目标地址返回一个icmp包。中通节点没有返回任何icmp包。如果目标地址返回的包丢失，则产生丢包率。</p>
<p>由抓包可以看出，mtr的发包原理和traceroute类似，如下图：</p>
<p><img src="http://7ycyh7.com1.z1.glb.clouddn.com/mtr1.png" alt="mtr图"></p>
<p>其中TTL(Time To Live)指定IP包被路由器丢弃之前允许通过的最大网段数量，当TTL减少为0时，路由器将会丢弃收到的TTL=0的icmp包并向icmp包的发送者发送 <em>ICMP time exceeded</em> 消息。假设本地mtr目标主机中途经过了3个节点，本地向目标主机发送一个icmp包，TTL=1，遇到第一个路由的时候，TTL变为0，向本地返回 <em>ICMP time exceeded in-transit</em> 消息；然后本地再向目标主机发送一个icmp包，TTL=2，再遇到第二个路由的时候TTL变为哦，返回 <em>ICMP time exceeded in-transit</em>；以此类推；当icmp包经过n跳到达最终的目标地址，则返回 <em>ICMP echo reply</em> 消息。如果某个阶段返回的icmp包丢失，则在此节点产生了丢包。</p>
<p>按照这个原理，理论上当某个节点的ip地址产生较大丢包的时候，我们调整发包间隔，使发包速率不大于ping的发包速率，那么这个节点mtr得到的丢包率应该和直接ping这个节点得到的丢包率相等。然而事实上mtr的丢包率远大于ping这个节点的丢包率。问题出在ping和mtr返回的icmp包上。</p>
<p>对于ping，本地给目标地址发送一个icmp包，如果目标主机收到了这个包，则返回一个类型为00的icmp (“ICMP echo reply”)。</p>
<p>对于mtr，是hop by hop 的ping，在每个节点因为TTL=0而返回一个icmp包，此时返回的icmp包类型是110(“ICMP time exceeded”)，到最后一个节点返回一个跟ping类似的icmp包(“ICMP echo reply”)，如果某个路由的规则对类型为110的icmp进行了限制，则可能导致该节点产生丢包，而ping该节点返回的类型为00的icmp包则没有影响，因此ping不会产生丢包。或者某一个路由为了防止icmp包攻击，只开放了ping发出的字段的icmp包。如果某一个节点因为icmp限制而产生丢包，而下一节点不对110类型的icmp包做限制，所以下一节点不产生丢包。这就是网上所说的<strong>如果本节点丢包，接下来的节点没有丢包，则该节点可能是路由限速导致的丢包，和网络好坏没有关系</strong>。另外，除了对110包的限制，还有可能返回路径和发包路径不一致，即返回路过了别的节点，那个节点对icmp限制了，但是mtr不会打印出来。这就是网上建议的<strong>两个方向进行监控</strong>。当mtr发包到达最后一个节点（即目标主机），主机正常返回一个 <em>ICMP echo reply</em>，相当于一个正常的ping过程，因此<strong>最后一跳存在丢包率，可以看做整个链路的丢包率</strong>。</p>
<p>对网络路由路径和中间节点丢包率的计算，常用工具都用了TTL机制，不知道是否有其他工具能够更加准确的测试，这个有待调查。<br>看到一个网站上对mtr丢包率问题的回答，其中有这样一段话：</p>
<p><em>As for assigning fault based on traceroutes: I’ve professionally done senior-level network operations for over a decade, with full access to switches and routers (error counts, traffic levels, cache flows – all manners of stats and metrics – giving me visibility well beyond what a simple traceroute could provide, yet determining where packet loss was occurring to a host on a remote network was still an inexact art, mostly because the return path from the other host was obscured: Unless I had a traceroute back to me from the remote host, I could only guess at how return traffic was getting back to my workstation. I shall suggest that beyond the first or second hop in your traceroutes, there’s not much you can do (or make meaningful deductions) with ping and traceroute.</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Linux下，我们一般用ping来判断网络的丢包和延迟，用traceroute来跟踪路由路径。mtr将ping和traceroute结合起来，既能判断网络路由路径，又能得到丢包和延迟等信息。&lt;/p&gt;
&lt;p&gt;mtr的用法网上随便一搜就一大堆：&lt;a href=&quot;https:/
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="mtr" scheme="http://yoursite.com/tags/mtr/"/>
    
      <category term="丢包率" scheme="http://yoursite.com/tags/%E4%B8%A2%E5%8C%85%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>模拟HTTP请求工具安装配置手册</title>
    <link href="http://yoursite.com/2017/01/16/%E6%A8%A1%E6%8B%9FHTTP%E8%AF%B7%E6%B1%82%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C/"/>
    <id>http://yoursite.com/2017/01/16/模拟HTTP请求工具安装配置手册/</id>
    <published>2017-01-16T12:20:12.000Z</published>
    <updated>2017-01-16T12:30:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>近期做网络测试，需要给网络加一定的压力，再测试此压力下的网络情况，提出的需求是：</p>
<blockquote>
<ul>
<li>模拟http请求，能够返回不同的大小的页面</li>
<li>自由调节压力，不需要将带宽跑满</li>
<li>轻量级</li>
</ul>
</blockquote>
<p>在网上调研了一些工具，例如iperf之类的，都是测带宽用的，换言之都会将带宽跑满，于是便自己搭了个简易的服务器，在服务器上造出不同大小的文件，然后在客户端进行curl请求，以造成不同的压力。</p>
<h2 id="1-服务器端"><a href="#1-服务器端" class="headerlink" title="1.服务器端"></a>1.服务器端</h2><h3 id="1-1系统环境"><a href="#1-1系统环境" class="headerlink" title="1.1系统环境"></a>1.1系统环境</h3><p>centos7</p>
<h3 id="1-2安装nginx"><a href="#1-2安装nginx" class="headerlink" title="1.2安装nginx"></a>1.2安装nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[$ yum install nginx</div></pre></td></tr></table></figure>
<p>如果这一步找不到合适的源可以安装第三方软件库：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum -y install epel-release</div></pre></td></tr></table></figure>
<p>卸载该软件库为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum -y remove epel-releas</div></pre></td></tr></table></figure>
<h3 id="1-3配置nginx"><a href="#1-3配置nginx" class="headerlink" title="1.3配置nginx"></a>1.3配置nginx</h3><p>打开配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/nginx/nginx.conf</div></pre></td></tr></table></figure>
<p>修改配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">server &#123;listen       80 default_server; #此处为服务器监听端口，默认为80端口。listen       [::]:80 default_server; #此处为服务器监听端口，默认为80端口。server_name  _;root         /usr/share/nginx/html;   # Load configuration files for the default server block.include /etc/nginx/default.d/*.conf;location / &#123;autoindex on; #此处为开启服务器端目录浏览功能autoindex_exact_size on; #此处为显示目录中文件的大小autoindex_localtime on; #此处为显示目录中文件的创建时间        &#125;error_page 404 /404.html;location = /40x.html &#123;        &#125;error_page 500 502 503 504 /50x.html;location = /50x.html &#123;        &#125;</div></pre></td></tr></table></figure>
<p>修改好后保存退出，并检查配置文件的语法是否正确。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ nginx -t -c /etc/nginx/nginx.conf</div><div class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is oknginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</div></pre></td></tr></table></figure>
<p>启动nginx</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /usr/sbin/nginx -c /etc/nginx/nginx.conf</div></pre></td></tr></table></figure>
<h3 id="1-4服务器端造数据"><a href="#1-4服务器端造数据" class="headerlink" title="1.4服务器端造数据"></a>1.4服务器端造数据</h3><p>进入配置文件中的root文件夹root/usr/share/nginx/html，添加一个存放自己数据的文件夹</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /usr/share/nginx/html$ mkdir logs$ ls404.html  50x.html  index.html  logs  nginx-logo.png  poweredby.png</div></pre></td></tr></table></figure>
<p>进入自己创建的存放数据的文件夹logs，添加不同大小的文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /usr/share/nginx/html/logs$ dd <span class="keyword">if</span>=/dev/zero of=1M bs=1M count=1</div></pre></td></tr></table></figure>
<p>dd if=/dev/zero of=1M bs=1M count=1:bs=1M为创建文件大小；of=1M为创建文件的名称，可带上文件类型，如1M.txt。</p>
<h3 id="1-5通过网页访问服务器"><a href="#1-5通过网页访问服务器" class="headerlink" title="1.5通过网页访问服务器"></a>1.5通过网页访问服务器</h3><p>访问网站：<a href="http://10.0.251.180/logs/，其中10.0.251.180为服务器IP。出现我们创建的文件，则nginx正在运行。" target="_blank" rel="external">http://10.0.251.180/logs/，其中10.0.251.180为服务器IP。出现我们创建的文件，则nginx正在运行。</a></p>
<h2 id="2客户端配置文件"><a href="#2客户端配置文件" class="headerlink" title="2客户端配置文件"></a>2客户端配置文件</h2><h3 id="2-1修改配置文件"><a href="#2-1修改配置文件" class="headerlink" title="2.1修改配置文件"></a>2.1修改配置文件</h3><p>将httpdownload文件夹拷贝至root下面。<br>进入httpdownload文件夹，根据需求修改config.txt配置文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /root/httpdownload$ vi /root/httpdownload/config.txtIP:http://10.0.251.180/logs/filesize1:500Kcount1:1filesize2:1Mcount1:2</div></pre></td></tr></table></figure>
<p>第一项是下载服务器文件IP；第二项是下载文件大小；第三项是同时下载该大小文件的数量；可配置同时并发下载不同大小和数量的文件。需要将“filesize”和“count”的序号依次递增。</p>
<h3 id="2-2运行curls-sh"><a href="#2-2运行curls-sh" class="headerlink" title="2.2运行curls.sh"></a>2.2运行curls.sh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /root/httpdownload/curls.sh</div></pre></td></tr></table></figure>
<p><a href="https://github.com/RanWX/netMonitor/tree/master/httpdownload" target="_blank" rel="external">相关代码下载</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期做网络测试，需要给网络加一定的压力，再测试此压力下的网络情况，提出的需求是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;模拟http请求，能够返回不同的大小的页面&lt;/li&gt;
&lt;li&gt;自由调节压力，不需要将带宽跑满&lt;/li&gt;
&lt;li&gt;轻量级&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/01/11/hello-world/"/>
    <id>http://yoursite.com/2017/01/11/hello-world/</id>
    <published>2017-01-11T13:48:07.000Z</published>
    <updated>2017-01-11T13:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
