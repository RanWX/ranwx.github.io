<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rosy&#39;s</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-31T14:34:50.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Rosy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hibernate实体类与数据库表的常见映射</title>
    <link href="http://yoursite.com/2018/07/31/hibernate%E5%AE%9E%E4%BD%93%E7%B1%BB%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%9A%84%E5%B8%B8%E8%A7%81%E6%98%A0%E5%B0%84/"/>
    <id>http://yoursite.com/2018/07/31/hibernate实体类与数据库表的常见映射/</id>
    <published>2018-07-31T14:27:10.000Z</published>
    <updated>2018-07-31T14:34:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hibernate的核心功能是根据数据库到实体类的映射，自动从数据库绑定数据到实体类。</p>
<p>这使我们操作实体类(Java对象)就能对数据库进行增、删、查、改，而不用调用JDBC API使数据操作变得简单而不繁琐。本文主要总结了实体类的各种属性类型到数据库表的映射以及各种关联关系的映射。</p>
<h3 id="1-基本类型的映射"><a href="#1-基本类型的映射" class="headerlink" title="1. 基本类型的映射"></a>1. 基本类型的映射</h3><p>在业务中常见的基本类型有Integer、Short、Float、Double、Long、Boolean、String。</p>
<h4 id="1-1-Integer"><a href="#1-1-Integer" class="headerlink" title="1.1 Integer"></a>1.1 Integer</h4><p>实体类的属性用Integer可以映射数据的int类型的字段，模型为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@Column(name = &quot;integer_number&quot;)</div><div class="line">private Integer integerNumber;</div></pre></td></tr></table></figure>
<h4 id="1-2-Short"><a href="#1-2-Short" class="headerlink" title="1.2 Short"></a>1.2 Short</h4><p>实体类的属性用Short可以映射数据的tinyint类型的字段，模型为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@Column(name = &quot;short_num&quot;)</div><div class="line">private Short shortNum;</div></pre></td></tr></table></figure>
<h4 id="1-3-Float"><a href="#1-3-Float" class="headerlink" title="1.3 Float"></a>1.3 Float</h4><p>实体类的属性用Float可以映射数据的float类型的字段，模型为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@Column(name = &quot;float_num&quot;)</div><div class="line">private Float floatNum;</div></pre></td></tr></table></figure>
<h4 id="1-3-Double"><a href="#1-3-Double" class="headerlink" title="1.3 Double"></a>1.3 Double</h4><p>实体类的属性用Double可以映射数据的double类型的字段，模型为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@Column(name = &quot;Double_num&quot;)</div><div class="line">private Double doubleNum;</div></pre></td></tr></table></figure>
<h4 id="1-4-Long"><a href="#1-4-Long" class="headerlink" title="1.4 Long"></a>1.4 Long</h4><p>实体类的属性用Long可以映射数据的bigint类型的字段，模型为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@Column(name = &quot;long_num&quot;)</div><div class="line">private Long longNum;</div></pre></td></tr></table></figure>
<h4 id="1-5-Boolean"><a href="#1-5-Boolean" class="headerlink" title="1.5 Boolean"></a>1.5 Boolean</h4><p>实体类的属性用Boolean可以映射数据的tinyint类型的字段，模型为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@Column(name = &quot;boolean_type&quot;)</div><div class="line">private Boolean booleanType;</div></pre></td></tr></table></figure>
<h4 id="1-6-String"><a href="#1-6-String" class="headerlink" title="1.6 String"></a>1.6 String</h4><p>实体类的属性用String可以映射数据的varchar或者char类型的字段，模型为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@Column(name = &quot;string_type&quot;)</div><div class="line">private String stringType;</div></pre></td></tr></table></figure>
<h3 id="2-枚举类型的映射"><a href="#2-枚举类型的映射" class="headerlink" title="2. 枚举类型的映射"></a>2. 枚举类型的映射</h3><p>实体类的属性的枚举类型，在数据库表中可以被映射为int，或者tinyint类型的字段，具体视枚举数量的多少决定，模型为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@Enumerated(EnumType.ORDINAL)</div><div class="line">@Column(name = &quot;sex&quot;)</div><div class="line">private Sex sex;</div></pre></td></tr></table></figure>
<p>其中Sex为枚举类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public enum Sex &#123;</div><div class="line">    MALE(0,&quot;MALE&quot;),</div><div class="line">    FEMALE(1,&quot;FEMALE&quot;),</div><div class="line">    UNKNOWN(2,&quot;UNKNOWN&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-BigDecimal"><a href="#3-BigDecimal" class="headerlink" title="3. BigDecimal"></a>3. BigDecimal</h3><p>实体类的属性的BigDecimal类型，在数据库表中可以被映射为decimal，可以指定精度，模型为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@Column(name = &quot;charge&quot;)</div><div class="line">private BigDecimal charge;</div></pre></td></tr></table></figure>
<h3 id="4-时间相关"><a href="#4-时间相关" class="headerlink" title="4. 时间相关"></a>4. 时间相关</h3><p>常用的时间相关的类型是Datetime和Instant，在数据库表中可以被映射为datetime，注意如果不指定datetime的精度，则默认四舍五入到秒，而Instant的默认精度是毫秒，实际值和存储值可能出现1秒的误差。模型为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@Column(name = &quot;instant_date&quot;)</div><div class="line">private Instant instantDate;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hibernate的核心功能是根据数据库到实体类的映射，自动从数据库绑定数据到实体类。&lt;/p&gt;
&lt;p&gt;这使我们操作实体类(Java对象)就能对数据库进行增、删、查、改，而不用调用JDBC API使数据操作变得简单而不繁琐。本文主要总结了实体类的各种属性类型到数据库表的映射以
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>mybatis pageHelper插件研究</title>
    <link href="http://yoursite.com/2018/07/31/mybatis-pageHelper%E6%8F%92%E4%BB%B6%E7%A0%94%E7%A9%B6/"/>
    <id>http://yoursite.com/2018/07/31/mybatis-pageHelper插件研究/</id>
    <published>2018-07-31T14:26:50.000Z</published>
    <updated>2018-07-31T14:34:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-mybatis插件"><a href="#1-mybatis插件" class="headerlink" title="1. mybatis插件"></a>1. mybatis插件</h2><p>在mybatis中使用插件，需要先实现接口Interceptor：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public interface Interceptor &#123;</div><div class="line"></div><div class="line">  Object intercept(Invocation invocation) throws Throwable;</div><div class="line"></div><div class="line">  Object plugin(Object target);</div><div class="line"></div><div class="line">  void setProperties(Properties properties);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Interceptor中有三个方法：</p>
<ul>
<li>intercept方法：是插件的核心方法，它将直接覆盖你所拦截的对象原有的方法。intercept里有个参数Invocation对象，通过它可以反射调度原料对象的方法。</li>
<li>plugin方法：target是被拦截对象，plugin方法的作用是给被拦截对象生成一个代理对象并返回。</li>
<li>setProperties方法：允许在plugin中配置所需要的参数，该方法在插件初始化的时候就被调用一次，然后把插件对象存到配置中，以便后续取出。</li>
</ul>
<h2 id="2-PageHelper"><a href="#2-PageHelper" class="headerlink" title="2. PageHelper"></a>2. PageHelper</h2><p>PageHelper会使用ThreadLocal获取到同一线程中的变量信息，各个线程之间的Threadlocal不会相互干扰，也就是Thread1中的ThreadLocal1之后获取到Tread1中的变量的信息，不会获取到Thread2中的信息所以在多线程环境下，各个Threadlocal之间相互隔离，可以实现，不同thread使用不同的数据源或不同的Thread中执行不同的SQL语句，所以，PageHelper利用这一点通过拦截器获取到同一线程中的预编译好的SQL语句之后将SQL语句包装成具有分页功能的SQL语句，并将其再次赋值给下一步操作，所以实际执行的SQL语句就是有了分页功能的SQL语句。</p>
<p>startPage源码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 开始分页</div><div class="line"> *</div><div class="line"> * @param pageNum  页码</div><div class="line"> * @param pageSize 每页显示数量</div><div class="line"> * @param count    是否进行count查询</div><div class="line"> */</div><div class="line">public static Page startPage(int pageNum, int pageSize, boolean count) &#123;</div><div class="line">    return startPage(pageNum, pageSize, count, null);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终执行的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public static Page startPage(int pageNum, int pageSize, boolean count, Boolean reasonable, Boolean pageSizeZero) &#123;</div><div class="line">    Page page = new Page(pageNum, pageSize, count);</div><div class="line">    page.setReasonable(reasonable);</div><div class="line">    page.setPageSizeZero(pageSizeZero);</div><div class="line">    SqlUtil.setLocalPage(page);</div><div class="line">    return page;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中SqlUtil.setLocalPage是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public static void setLocalPage(Page page) &#123;</div><div class="line">    LOCAL_PAGE.set(page);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>LOCAL_PAGE是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">private static final ThreadLocal&lt;Page&gt; LOCAL_PAGE = new ThreadLocal&lt;Page&gt;();</div></pre></td></tr></table></figure>
<p>PageHelper就是使用ThreadLocal存储了Page对象，在这个对象中有我们设置的pageNum、pageSize，也会查询返回的pages、total。</p>
<h2 id="3-PageHelper执行过程"><a href="#3-PageHelper执行过程" class="headerlink" title="3. PageHelper执行过程"></a>3. PageHelper执行过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Page page = PageHelper.startPage(pageNumber, pageSize, true);</div></pre></td></tr></table></figure>
<p>配置好PageHelper后，在代码中使用PageHelper后，LOCAL_PAGE会存入分页信息。</p>
<p>在PageHelper下的第一个查询的方法会被PageHelper拦截住，然后重新组装sql语句。具体组装的源码为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">private Object _processPage(Invocation invocation) throws Throwable &#123;</div><div class="line">    final Object[] args = invocation.getArgs();</div><div class="line">    RowBounds rowBounds = (RowBounds) args[2];</div><div class="line">    if (SqlUtil.getLocalPage() == null &amp;&amp; rowBounds == RowBounds.DEFAULT) &#123;</div><div class="line">        if (OrderByHelper.getOrderBy() != null) &#123;</div><div class="line">            OrderByHelper.processIntercept(invocation);</div><div class="line">        &#125;</div><div class="line">        return invocation.proceed();</div><div class="line">    &#125; else &#123;</div><div class="line">        //获取原始的ms</div><div class="line">        MappedStatement ms = (MappedStatement) args[0];</div><div class="line">        //判断并处理为PageSqlSource</div><div class="line">        if (!isPageSqlSource(ms)) &#123;</div><div class="line">            processMappedStatement(ms, parser);</div><div class="line">        &#125;</div><div class="line">        //忽略RowBounds-否则会进行Mybatis自带的内存分页</div><div class="line">        args[2] = RowBounds.DEFAULT;</div><div class="line">        //分页信息</div><div class="line">        Page page = getPage(rowBounds);</div><div class="line">        //pageSizeZero的判断</div><div class="line">        if ((page.getPageSizeZero() != null &amp;&amp; page.getPageSizeZero()) &amp;&amp; page.getPageSize() == 0) &#123;</div><div class="line">            COUNT.set(null);</div><div class="line">            //执行正常（不分页）查询</div><div class="line">            Object result = invocation.proceed();</div><div class="line">            //得到处理结果</div><div class="line">            page.addAll((List) result);</div><div class="line">            //相当于查询第一页</div><div class="line">            page.setPageNum(1);</div><div class="line">            //这种情况相当于pageSize=total</div><div class="line">            page.setPageSize(page.size());</div><div class="line">            //仍然要设置total</div><div class="line">            page.setTotal(page.size());</div><div class="line">            //返回结果仍然为Page类型 - 便于后面对接收类型的统一处理</div><div class="line">            return page;</div><div class="line">        &#125;</div><div class="line">        //简单的通过total的值来判断是否进行count查询</div><div class="line">        if (page.isCount()) &#123;</div><div class="line">            COUNT.set(Boolean.TRUE);</div><div class="line">            //替换MS</div><div class="line">            args[0] = msCountMap.get(ms.getId());</div><div class="line">            //查询总数</div><div class="line">            Object result = invocation.proceed();</div><div class="line">            //还原ms</div><div class="line">            args[0] = ms;</div><div class="line">            //设置总数</div><div class="line">            page.setTotal((Integer) ((List) result).get(0));</div><div class="line">            if (page.getTotal() == 0) &#123;</div><div class="line">                return page;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        //pageSize&gt;0的时候执行分页查询，pageSize&lt;=0的时候不执行相当于可能只返回了一个count</div><div class="line">        if (page.getPageSize() &gt; 0 &amp;&amp;</div><div class="line">                ((rowBounds == RowBounds.DEFAULT &amp;&amp; page.getPageNum() &gt; 0)</div><div class="line">                        || rowBounds != RowBounds.DEFAULT)) &#123;</div><div class="line">            //将参数中的MappedStatement替换为新的qs</div><div class="line">            COUNT.set(null);</div><div class="line">            BoundSql boundSql = ms.getBoundSql(args[1]);</div><div class="line">            args[1] = parser.setPageParameter(ms, args[1], boundSql, page);</div><div class="line">            COUNT.set(Boolean.FALSE);</div><div class="line">            //执行分页查询</div><div class="line">            Object result = invocation.proceed();</div><div class="line">            //得到处理结果</div><div class="line">            page.addAll((List) result);</div><div class="line">        &#125;</div><div class="line">        //返回结果</div><div class="line">        return page;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在实际查询中打印出sql为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@25428560]</div><div class="line">==&gt;  Preparing: SELECT count(*) FROM translator t LEFT JOIN account a ON a.translator_id = t.id AND a.delete_flag = 1 WHERE t.delete_flag = 1 AND t.account_status != 0 AND t.account_status != 3 </div><div class="line">==&gt; Parameters: </div><div class="line">&lt;==    Columns: count(*)</div><div class="line">&lt;==        Row: 5</div><div class="line">&lt;==      Total: 1</div><div class="line">ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@25428560]</div><div class="line">==&gt;  Preparing: SELECT a.name as name, a.account_id as account_id, a.nick_name as nick_name, t.sex as sex, a.phone_number as phone_number, t.id as id, t.translator_level as translator_level, t.account_status as account_status FROM translator t LEFT JOIN account a on a.translator_id= t.id AND a.delete_flag = 1 WHERE t.delete_flag = 1 and t.account_status != 0 and t.account_status != 3 limit ?,? </div><div class="line">==&gt; Parameters: 0(Integer), 3(Integer)</div><div class="line">&lt;==    Columns: name, account_id, nick_name, sex, phone_number, id, translator_level, account_status</div><div class="line">&lt;==        Row: 121212@163.com, 1, 王五, 0, 13310101001, 1, null, 4</div><div class="line">&lt;==        Row: 222222@qq.com, 9, 张三, 1, 18811221122, 2, null, 4</div><div class="line">&lt;==        Row: lisi, 12, lisi, 0, 13899988223, 4, 1, 4</div><div class="line">&lt;==      Total: 3</div></pre></td></tr></table></figure>
<p>不加PageHelper打印出的sql为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@30e836ca]</div><div class="line">==&gt;  Preparing: SELECT a.name as name, a.account_id as account_id, a.nick_name as nick_name, t.sex as sex, a.phone_number as phone_number, t.id as id, t.translator_level as translator_level, t.account_status as account_status FROM translator t LEFT JOIN account a on a.translator_id= t.id AND a.delete_flag = 1 WHERE t.delete_flag = 1 and t.account_status != 0 and t.account_status != 3 </div><div class="line">==&gt; Parameters: </div><div class="line">&lt;==    Columns: name, account_id, nick_name, sex, phone_number, id, translator_level, account_status</div><div class="line">&lt;==        Row: 121212@163.com, 1, 王五, 0, 13310101001, 1, null, 4</div><div class="line">&lt;==        Row: 222222@qq.com, 9, 张三, 1, 18811221122, 2, null, 4</div><div class="line">&lt;==        Row: lisi, 12, lisi, 0, 13899988223, 4, 1, 4</div><div class="line">&lt;==        Row: wangmazi, 15, wangmazi, 0, 17722818182, 18, null, 1</div><div class="line">&lt;==        Row: xiaohua, 14, xiaohua, 1, 16322818182, 19, 0, 4</div><div class="line">&lt;==      Total: 5</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-mybatis插件&quot;&gt;&lt;a href=&quot;#1-mybatis插件&quot; class=&quot;headerlink&quot; title=&quot;1. mybatis插件&quot;&gt;&lt;/a&gt;1. mybatis插件&lt;/h2&gt;&lt;p&gt;在mybatis中使用插件，需要先实现接口Interceptor
    
    </summary>
    
    
      <category term="mybatis" scheme="http://yoursite.com/tags/mybatis/"/>
    
      <category term="PageHelper" scheme="http://yoursite.com/tags/PageHelper/"/>
    
  </entry>
  
  <entry>
    <title>hibernate和mybatis查询对比</title>
    <link href="http://yoursite.com/2018/07/31/hibernate%E5%92%8Cmybatis%E6%9F%A5%E8%AF%A2%E5%AF%B9%E6%AF%94/"/>
    <id>http://yoursite.com/2018/07/31/hibernate和mybatis查询对比/</id>
    <published>2018-07-31T14:25:39.000Z</published>
    <updated>2018-07-31T14:35:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-实体中没有引用对象"><a href="#1-实体中没有引用对象" class="headerlink" title="1. 实体中没有引用对象"></a>1. 实体中没有引用对象</h3><h4 id="1-1-实体编写实例"><a href="#1-1-实体编写实例" class="headerlink" title="1.1 实体编写实例"></a>1.1 实体编写实例</h4><ol>
<li>hibernate</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@Entity</div><div class="line">@Table(name = &quot;translator_info_change_log&quot;)</div><div class="line">@NamedQuery(name = &quot;TranslatorInfoChangeLog.findAll&quot;, query = &quot;SELECT o FROM TranslatorInfoChangeLog o&quot;)</div><div class="line">public class TranslatorInfoChangeLog extends AbstractModel &#123;</div><div class="line">    @Id</div><div class="line">    @GeneratedValue(strategy = GenerationType.IDENTITY)</div><div class="line">    private Long id;</div><div class="line">   </div><div class="line">    @Column(name = &quot;translator_id&quot;)</div><div class="line">    private Long translatorId;</div><div class="line">    </div><div class="line">    @Column(name = &quot;details&quot;)</div><div class="line">    private String details;</div><div class="line">    </div><div class="line">    @Enumerated(EnumType.ORDINAL)</div><div class="line">    @Column(name = &quot;account_status&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li>@Entity：标志这是一个数据库实体（pojo）</li>
<li>@Table：对应数据库的表名</li>
<li>@Id：标识此列是数据库中的主键</li>
<li>@GeneratedValue：数据库主键的生成方式，JPA提供的四种标准用法为TABLE（使用一个特定的数据库表格来保存主键），SEQUENCE（根据底层数据库的序列来生成主键，条件是数据库支持序列），IDENTITY（主键由数据库自动生成（主要是自动增长型）），AUTO（主键由程序控制）</li>
<li>@Column：对应数据库中的列名</li>
</ul>
<ol>
<li>mybatis<br>直接使用上面JPA的数据模型就可以，也可以不加上面的所有注解，为了JPA也能使用最好按上面的方式。</li>
</ol>
<h4 id="1-2-查询编写示例"><a href="#1-2-查询编写示例" class="headerlink" title="1.2 查询编写示例"></a>1.2 查询编写示例</h4><ol>
<li>hibernate</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public interface TranslatorInfoChangeLogRepository extends JpaRepository&lt;TranslatorInfoChangeLog, Long&gt;, JpaSpecificationExecutor&lt;TranslatorInfoChangeLog&gt; &#123;</div><div class="line">    // 使用sql语句查询</div><div class="line">    // @Query(value = &quot;select * from translator_info_change_log t where t.id = ?1&quot;, nativeQuery = true)</div><div class="line">    // 使用hql语句查询</div><div class="line">    @Query(value = &quot;select t from TranslatorInfoChangeLog where t.id = ?1&quot;)</div><div class="line">    TranslatorInfoChangeLog findChangeLog(Long id);</div><div class="line">    </div><div class="line">    @Modifying</div><div class="line">    @Query(&quot;update TranslatorInfoChangeLog p set status=0 where p.id in :ids&quot;)</div><div class="line">    void deleteTranslatorInfo(@Param(&quot;ids&quot;) List&lt;Long&gt; ids);</div><div class="line">    </div><div class="line">    TranslatorInfoChangeLog findById(Long id);</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li>需要继承JpaRepository、JpaSpecificationExecutor</li>
<li>这里只能返回本实体及其父类</li>
<li>findById转化成的SQL语句为：select * from modify_log where id = ? </li>
<li>@Modifying：标识是个更改操作</li>
<li>@Query：要执行的SQL语句，这不是原生的SQL,可以设置参数（nativeQuery = true），这就可以写原生SQL</li>
<li>示例中的findChangeLog和findById作用是一样的，findChangeLog是用sql语句进行查询，findById是jpa根据方法名称进行解析后查询。</li>
</ul>
<ol>
<li>mybatis</li>
</ol>
<ul>
<li>编写查询的接口</li>
<li>直接在查询接口对应的xml文件写sql语句</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;TranslatorInfoChangeLog&gt; queryModifyLog(@Param(&quot;id&quot;) Long id);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;queryModifyLog&quot; resultType=&quot;TranslatorInfoChangeLog&quot; patameterType=&quot;Long&quot;&gt;</div><div class="line">select * from translator_info_change_log where id = ?</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<p>其中查询语句写在<select>标签里。</select></p>
<h4 id="1-3-建议"><a href="#1-3-建议" class="headerlink" title="1.3 建议"></a>1.3 建议</h4><p>此类查询建议使用JPA完成，开发速度快，只需按规则定义方法名就可以根据不同的字段进行查询，而用mybatis需要编写不同的SQL语句。</p>
<h3 id="2-实体中存在单实体引用对象（一对一或者多对一）"><a href="#2-实体中存在单实体引用对象（一对一或者多对一）" class="headerlink" title="2. 实体中存在单实体引用对象（一对一或者多对一）"></a>2. 实体中存在单实体引用对象（一对一或者多对一）</h3><h4 id="2-1-实体编写实例（以多对一为例）"><a href="#2-1-实体编写实例（以多对一为例）" class="headerlink" title="2.1 实体编写实例（以多对一为例）"></a>2.1 实体编写实例（以多对一为例）</h4><p>台词和人物信息的关系，多个台词可能都属于同一个人物的。在多的一端（台词表）添加外键（人物的id），与人物表相关联。</p>
<ol>
<li>hibernate</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@ManyToOne(cascade = CascadeType.REFRESH, targetEntity = Character.class, optional = true)</div><div class="line">@JoinColumn(name = &quot;character_person_id&quot;)</div><div class="line">private Character character;</div></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li>@ManyToOne：标识关联关系，cascade标识相关级联操作，其中CascadeType.PERSIST：级联新增（又称级联保存，CascadeType.MERGE:级联合并（级联更新），CascadeType.REMOVE:级联删除，CascadeType.REFRESH:级联刷新，CascadeType.ALL:以上四种都是。</li>
<li>targetEntity 定义关系类的类型，默认是该成员属性对应的类类型，所以通常不需要提供定义。</li>
<li>optional标识是否可为空。</li>
<li>@JoinColumn：标识用于关联的字段<br>@ ManyToOne和OneToOne的fetch 属性默认值是FetchType.EAGER</li>
</ul>
<ol>
<li>Mybatis</li>
</ol>
<p>直接使用上面JPA的数据模型就可以，也可以不加上面的所有注解，为了JPA也能使用最好按上面的方式。</p>
<h4 id="2-2-查询编写示例"><a href="#2-2-查询编写示例" class="headerlink" title="2.2 查询编写示例"></a>2.2 查询编写示例</h4><ol>
<li>hibernate</li>
</ol>
<p>正常查询，因为设置了级联查询，会直接查询出来，OneToOne和ManyToOne默认不是延迟加载，所以不用设置就是及时加载.</p>
<ol>
<li>mybatis</li>
</ol>
<ul>
<li>返回模型设置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">……</div><div class="line">&lt;association property=&quot;character&quot; column=&quot;character_person_id&quot; javaType=&quot;com.star.ott.scriptsTranslation.domain.Character&quot;&gt;</div><div class="line">    &lt;id property=&quot;id&quot; column=&quot;c_id&quot;/&gt;</div><div class="line">    &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;</div><div class="line">    &lt;result property=&quot;englishName&quot; column=&quot;english_name&quot;/&gt;</div><div class="line">    &lt;result property=&quot;age&quot; column=&quot;age&quot;/&gt;</div><div class="line">    &lt;result property=&quot;sex&quot; column=&quot;sexjavaType=&quot;com.star.ott.scriptsTranslation.domain.enums.Sex&quot;</div><div class="line">            typeHandler=&quot;org.apache.ibatis.type.EnumOrdinalTypeHandl&quot;/&gt;</div><div class="line">    &lt;result property=&quot;remarks&quot; column=&quot;remarks&quot;/&gt;</div><div class="line">    &lt;result property=&quot;characterType&quot; column=&quot;character_type&quot;</div><div class="line">            javaType=&quot;com.star.ott.scriptsTranslation.domain.enums.CracterType&quot;</div><div class="line">            typeHandler=&quot;org.apache.ibatis.type.EnumOrdinalTypeHandl&quot;/&gt;</div><div class="line">    &lt;result property=&quot;dramaId&quot; column=&quot;dramaId&quot;/&gt;</div><div class="line">&lt;/association&gt;</div><div class="line">……</div></pre></td></tr></table></figure>
<ul>
<li>查询语言需要做关联</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;&quot; resultMap=&quot;&quot;&gt;</div><div class="line">……</div><div class="line">LEFT JOIN character_person c ON c.id = l.character_person_id AND c.delete_flag = 1</div><div class="line">……</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<ul>
<li>一对一和多对一，实体映射用<association>标签。</association></li>
</ul>
<h4 id="2-3-建议"><a href="#2-3-建议" class="headerlink" title="2.3 建议"></a>2.3 建议</h4><p>此类查询建议使用JPA完成，开发速度快，只需要设置实体的注解，mybatis需要join语句，还需要设置返回的resultMap。</p>
<h3 id="3-实体中存在多实体引用对象（一对多）"><a href="#3-实体中存在多实体引用对象（一对多）" class="headerlink" title="3. 实体中存在多实体引用对象（一对多）"></a>3. 实体中存在多实体引用对象（一对多）</h3><p>例如剧集下存在多个台词，剧集是“一”的一方，台词是“多”的一方，在多的一端（台词表）添加外键（剧集的id），与剧集表相关联。</p>
<h4 id="3-1-实体编写示例"><a href="#3-1-实体编写示例" class="headerlink" title="3.1 实体编写示例"></a>3.1 实体编写示例</h4><ol>
<li>hibernate</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">……</div><div class="line">@OneToMany(cascade = CascadeType.REFRESH, fetch = FetchType.LAZY)</div><div class="line">@JoinColumn(name=&quot;episodeid&quot;)</div><div class="line">@Where(clause = &quot;delete_flag = 1&quot;)</div><div class="line">@OrderBy(value = &quot;id asc&quot;)</div><div class="line">private List&lt;Line&gt; lines;</div><div class="line">……</div></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li>@OneToMany：标识关联关系，Cascade标识相关级联操作，fetch标识加载方式是懒加载还是及时加载。</li>
<li>@Where：过滤条件，只查询符合条件的级联表里的记录。</li>
<li>@OrderBy：对查询的记录进行按字段排序。</li>
<li>默认是延迟加载。</li>
</ul>
<ol>
<li>mybatis</li>
</ol>
<p>直接使用上面JPA的数据模型就可以，也可以不加上面的所有注解，为了hibernate也能使用最好按上面的方式。</p>
<h4 id="3-2-查询编写示例"><a href="#3-2-查询编写示例" class="headerlink" title="3.2 查询编写示例"></a>3.2 查询编写示例</h4><ol>
<li>hibernate</li>
</ol>
<p>正常查询，因为设置了级联查询，会直接查询出来，OneToMany默认是延迟加载</p>
<ol>
<li>Mybatis</li>
</ol>
<ul>
<li>返回model设置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">……</div><div class="line">&lt;collection property=&quot;sourceLanguages&quot; column=&quot;line_id&quot; ofType=&quot;com.star.ott.scriptsTranslation.domain.TranslationLine&quot;&gt;</div><div class="line">    &lt;id property=&quot;id&quot; column=&quot;tl_id&quot;/&gt;</div><div class="line">    &lt;result property=&quot;translationTaskId&quot; column=&quot;translation_task_id&quot;/&gt;</div><div class="line">    &lt;result property=&quot;lineId&quot; column=&quot;line_id&quot;/&gt;</div><div class="line">    &lt;result property=&quot;lineStr&quot; column=&quot;line_str&quot;/&gt;</div><div class="line">    &lt;result property=&quot;language&quot; column=&quot;language&quot;</div><div class="line">            javaType=&quot;com.star.ott.scriptsTranslation.domain.enums.Language&quot;</div><div class="line">            typeHandler=&quot;org.apache.ibatis.type.EnumOrdinalTypeHandler&quot;/&gt;</div><div class="line">&lt;/collection&gt;</div><div class="line">……</div></pre></td></tr></table></figure>
<ul>
<li>查询语言需要做关联</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;&quot; resultMap=&quot;&quot;&gt;</div><div class="line">……</div><div class="line">LEFT JOIN translation_line tl ON tl.line_id = l.id AND tl.delete_flag = 1 AND tl.translation_task_id IS NULL</div><div class="line">……</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<ul>
<li>一对多，实体映射用<collection>标签。</collection></li>
<li><strong>collection和association标签的实体映射需要放在一起，不能交叉放置，否则会出现错误。</strong></li>
</ul>
<h4 id="3-3-建议"><a href="#3-3-建议" class="headerlink" title="3.3 建议"></a>3.3 建议</h4><p>此类查询建议使用hibernate完成，开发速度快，只需要设置实体的注解，mybatis需要join语句，还需要设置返回的resultMap但是执行效率上mybatis会更好一些，如果数据量大，就需要测试后选择。</p>
<h3 id="4-两个实体间存在中间实体关联（多对多）"><a href="#4-两个实体间存在中间实体关联（多对多）" class="headerlink" title="4. 两个实体间存在中间实体关联（多对多）"></a>4. 两个实体间存在中间实体关联（多对多）</h3><h4 id="4-1-两张表与关系表OneToMany级联，关系表与两张表ManyToOne级联。"><a href="#4-1-两张表与关系表OneToMany级联，关系表与两张表ManyToOne级联。" class="headerlink" title="4.1 两张表与关系表OneToMany级联，关系表与两张表ManyToOne级联。"></a>4.1 两张表与关系表OneToMany级联，关系表与两张表ManyToOne级联。</h4><p><strong>例1：</strong> 用户组与权限的关系，一个用户组可以拥有多个权限，一个权限又可包含多个用户组。</p>
<p><img src="http://7ycyh7.com1.z1.glb.clouddn.com/image2017-9-25%209-6-5.png" alt="image"></p>
<h5 id="4-1-1-实体编写示例"><a href="#4-1-1-实体编写示例" class="headerlink" title="4.1.1 实体编写示例"></a>4.1.1 实体编写示例</h5><ol>
<li>hibernate</li>
</ol>
<p>Role实体</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Entity</div><div class="line">@Table(name=&quot;glw_role&quot;)</div><div class="line">public class Role&#123;</div><div class="line">    @Id</div><div class="line">    @GeneratedValue(strategy=GenerationType.TABLE)</div><div class="line">    private Long id;</div><div class="line">    @Column(length=50)</div><div class="line">    private String name;</div><div class="line">    @OneToMany(mappedBy=&quot;role&quot;,cascade=CascadeType.ALL)</div><div class="line">    private Set&lt;RoleResource&gt; roleResources = new HashSet&lt;RoleResource&gt;();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Resource实体</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Entity</div><div class="line">@Table(name=&quot;glw_resource&quot;)</div><div class="line">public class Resource&#123;</div><div class="line">    @Id</div><div class="line">    @GeneratedValue(strategy=GenerationType.TABLE)</div><div class="line">    private Long id;</div><div class="line">    @Column(length=50)</div><div class="line">    private String name;</div><div class="line">    @OneToMany(mappedBy=&quot;resource&quot;,cascade=CascadeType.ALL)</div><div class="line">    private Set&lt;RoleResource&gt; roleResources = new HashSet&lt;RoleResource&gt;();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>RoleResource辅助实体</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@Entity</div><div class="line">@Table(name=&quot;glw_role_resource&quot;)</div><div class="line">public class Resource&#123;</div><div class="line">    @Id</div><div class="line">    @GeneratedValue(strategy=GenerationType.TABLE)</div><div class="line">    private Long id;</div><div class="line">    @Column</div><div class="line">    private Integer sort;</div><div class="line">    @ManyToOne(cascade=Cascade.ALL)</div><div class="line">    @JoinColumn(name=&quot;roleId&quot;,nullable=true)</div><div class="line">    private Role role;</div><div class="line">    @ManyToOne(cascade=Cascade.ALL)</div><div class="line">    @JoinColumn(name=&quot;resourceId&quot;,nullable=true)</div><div class="line">    private Resource resource;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>mybatis<br>直接使用上面JPA的数据模型就可以，也可以不加上面的所有注解，为了JPA也能使用最好按上面的方式。</li>
</ol>
<h5 id="4-1-2-查询示例编写"><a href="#4-1-2-查询示例编写" class="headerlink" title="4.1.2 查询示例编写"></a>4.1.2 查询示例编写</h5><ol>
<li><p>hibernate<br>正常查询，因为设置了级联查询，会直接查询出来，（查询不同的Dao就会对应生成不同的实体）。</p>
</li>
<li><p>mybatis</p>
</li>
</ol>
<ul>
<li>返回model设置对应的 association 或 collection</li>
<li>正常sql语句的链表查询</li>
</ul>
<h4 id="4-2-两张表与关系表相对各自独立，没有完整级联"><a href="#4-2-两张表与关系表相对各自独立，没有完整级联" class="headerlink" title="4.2 两张表与关系表相对各自独立，没有完整级联"></a>4.2 两张表与关系表相对各自独立，没有完整级联</h4><p><strong>例2：</strong> 例如在translator中的，译员的母语和语言tag之间是多对多关系，tag是数据字典，初始化值后便不会改变。因为语言tag不仅母语需要使用，擅长语言这个属性也需要使用，所以中间表需要加字段“tag类型”用以区分是tag是被谁在使用。</p>
<p><img src="http://7ycyh7.com1.z1.glb.clouddn.com/%E7%BB%98%E5%9B%BE1.png" alt="image"></p>
<h5 id="4-2-1-实体编写示例"><a href="#4-2-1-实体编写示例" class="headerlink" title="4.2.1 实体编写示例"></a>4.2.1 实体编写示例</h5><ol>
<li>hibernate</li>
</ol>
<p>translator和中间表之间一对多级联，中间表和数据字典之间不做级联，可以由translator对中间表进行crud操作，中间表和数据字典之间的关系需要手动维护。</p>
<p>translator</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">……</div><div class="line">@OneToMany(cascade = &#123;CascadeType.REFRESH, CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE&#125;, fetch = FetchType.LAZY, orphanRemoval = true)</div><div class="line">@JoinColumn(name = &quot;translator_id&quot;)</div><div class="line">@Where(clause = &quot;delete_flag = 1 and dict_type = 2&quot;)</div><div class="line">private Set&lt;TranslatorDictRelation&gt; motherTongue;</div><div class="line">……</div></pre></td></tr></table></figure>
<p>tag</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">……</div><div class="line">@Id</div><div class="line">@GeneratedValue(strategy = GenerationType.IDENTITY)</div><div class="line">private Long id;</div><div class="line">/**</div><div class="line"> * 数据字典类型</div><div class="line"> */</div><div class="line">@Enumerated(EnumType.ORDINAL)</div><div class="line">@Column(name = &quot;dict_type&quot;)</div><div class="line">private DictType dictType;</div><div class="line">/**</div><div class="line"> * 标签号</div><div class="line"> */</div><div class="line">@Column(name = &quot;tag_num&quot;)</div><div class="line">private Integer tagNum;</div><div class="line">/**</div><div class="line"> * 标签值</div><div class="line"> */</div><div class="line">@Column(name = &quot;tag_value&quot;)</div><div class="line">private String tagValue;</div><div class="line">……</div></pre></td></tr></table></figure>
<p>TranslatorDictRelation</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">……</div><div class="line">@Id</div><div class="line">@GeneratedValue(strategy = GenerationType.IDENTITY)</div><div class="line">private Long id;</div><div class="line">/**</div><div class="line"> * 译员id</div><div class="line"> */</div><div class="line">@Column(name = &quot;translator_id&quot;)</div><div class="line">private Long translatorId;</div><div class="line">/**</div><div class="line"> * tag id</div><div class="line"> */</div><div class="line">@Column(name = &quot;dict_id&quot;)</div><div class="line">private Long dictId;</div><div class="line">/**</div><div class="line"> * 数据字典类型</div><div class="line"> */</div><div class="line">@Enumerated(EnumType.ORDINAL)</div><div class="line">@Column(name = &quot;dict_type&quot;)</div><div class="line">private DictType dictType;</div><div class="line">……</div></pre></td></tr></table></figure>
<ol>
<li>mybatis</li>
</ol>
<p>直接使用上面JPA的数据模型就可以，也可以不加上面的所有注解，为了JPA也能使用最好按上面的方式。</p>
<h5 id="4-2-2-查询示例编写"><a href="#4-2-2-查询示例编写" class="headerlink" title="4.2.2 查询示例编写"></a>4.2.2 查询示例编写</h5><ol>
<li><p>hibernate<br>正常查询，因为设置了级联查询，会直接查询出来，（查询不同的Dao就会对应生成不同的实体）。</p>
</li>
<li><p>mybatis</p>
</li>
</ol>
<ul>
<li>返回model设置对应的 association 或 collection</li>
<li>正常sql语句的链表查询</li>
</ul>
<h4 id="4-3-两张表用ManyToMany级联，实体映射上不与关系表级联"><a href="#4-3-两张表用ManyToMany级联，实体映射上不与关系表级联" class="headerlink" title="4.3 两张表用ManyToMany级联，实体映射上不与关系表级联"></a>4.3 两张表用ManyToMany级联，实体映射上不与关系表级联</h4><p><strong>例3：</strong> 两张多对多表关系均可能出现crud操作，中间表除了作为外键的字段和唯一id，没有其他字段。</p>
<h5 id="4-3-1-实体编写示例"><a href="#4-3-1-实体编写示例" class="headerlink" title="4.3.1 实体编写示例"></a>4.3.1 实体编写示例</h5><p>TranslatorTest<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">@Entity</div><div class="line">@Table(name = &quot;translator_test&quot;)</div><div class="line">@NamedQuery(name = &quot;TranslatorTest.findAll&quot;, query = &quot;SELECT o FROM TranslatorTest o&quot;)</div><div class="line">public class TranslatorTest &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 主键</div><div class="line">     */</div><div class="line">    @Id</div><div class="line">    @GeneratedValue(strategy = GenerationType.IDENTITY)</div><div class="line">    private Long id;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 证件号</div><div class="line">     */</div><div class="line">    @Column(name = &quot;credential_number&quot;)</div><div class="line">    private String credentialNumber;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 空闲时段</div><div class="line">     */</div><div class="line">    @ManyToMany(fetch = FetchType.LAZY,cascade = CascadeType.ALL)</div><div class="line">    @JoinTable(name = &quot;translator_dict_relation_test&quot;,</div><div class="line">            joinColumns = &#123;@JoinColumn(name = &quot;translator_id&quot;)&#125;,  // 由哪端进行维护</div><div class="line">            inverseJoinColumns = &#123;@JoinColumn(name = &quot;dict_id&quot;)&#125;) // 可由两张表进行维护关系和查询，用不同的dao就行</div><div class="line">    @OrderBy(&quot;id&quot;)</div><div class="line">    private Set&lt;TagTest&gt; freeTime = new HashSet&lt;&gt;();</div><div class="line">    ……</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>TagTest<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@Entity</div><div class="line">@Table(name = &quot;tag_test&quot;)</div><div class="line">@NamedQuery(name = &quot;TagTest.findAll&quot;, query = &quot;SELECT o FROM TagTest o&quot;)</div><div class="line">public class TagTest &#123;</div><div class="line">    /**</div><div class="line">     * 主键</div><div class="line">     */</div><div class="line">    @Id</div><div class="line">    @GeneratedValue(strategy = GenerationType.IDENTITY)</div><div class="line">    private Long id;</div><div class="line">    /**</div><div class="line">     * 标签值</div><div class="line">     */</div><div class="line">    @Column(name = &quot;tag_value&quot;)</div><div class="line">    private String tagValue;</div><div class="line"></div><div class="line">    @ManyToMany(mappedBy = &quot;freeTime&quot;, cascade = CascadeType.ALL) // 映射的字段</div><div class="line">    private Set&lt;TranslatorTest&gt; translatorTestSet = new HashSet&lt;&gt;();</div><div class="line">    ……</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>中间关系表不需要映射实体，但是需要创建出来：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `translator_dict_relation_test`(</div><div class="line">  `id`                 bigint(20)       NOT NULL AUTO_INCREMENT               COMMENT &apos;标识&apos;,</div><div class="line">  `translator_id`      bigint(20)                                             COMMENT &apos;译员项标识&apos;,</div><div class="line">  `dict_id`            bigint(20)                                             COMMENT &apos;数据字典标识&apos;,</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `FK_translator_dict_id` (`translator_id`),</div><div class="line">  KEY `FK_dict_translator_id` (`dict_id`),</div><div class="line">  CONSTRAINT `FK_translator_dict_id` FOREIGN KEY (`translator_id`) REFERENCES `translator_test` (`id`),</div><div class="line">  CONSTRAINT `FK_dict_translator_id` FOREIGN KEY (`dict_id`) REFERENCES `tag_test` (`id`)</div><div class="line">)ENGINE=InnoDB</div><div class="line">COMMENT = &apos;translator_dict_relation_test&apos;</div><div class="line">CHARACTER SET utf8 COLLATE utf8_general_ci;</div></pre></td></tr></table></figure>
<h5 id="4-3-2-查询示例编写"><a href="#4-3-2-查询示例编写" class="headerlink" title="4.3.2 查询示例编写"></a>4.3.2 查询示例编写</h5><ol>
<li>JPA<br>正常进行crud操作，JPA会自动对关联的表以及中间表进行相关操作。</li>
<li>mybatis<br>正常sql语句的链表查询。</li>
</ol>
<h4 id="4-4-建议"><a href="#4-4-建议" class="headerlink" title="4.4 建议"></a>4.4 建议</h4><ul>
<li>此类查询建议使用mybatis完成，使用JPA设置关联关系存在限制性，又容易出现循环关联，查询时不灵活等问题。</li>
<li>多对多关系的解除由关系维护端来完成，关系被维护端不能解除关系，但是此处需要注意，不建议用级联修改关系。</li>
<li>多对多关系可以不做表间的外键，而是对单独的表进行增删改查，再维护对应关系表。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-实体中没有引用对象&quot;&gt;&lt;a href=&quot;#1-实体中没有引用对象&quot; class=&quot;headerlink&quot; title=&quot;1. 实体中没有引用对象&quot;&gt;&lt;/a&gt;1. 实体中没有引用对象&lt;/h3&gt;&lt;h4 id=&quot;1-1-实体编写实例&quot;&gt;&lt;a href=&quot;#1-1-实
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="mybatis" scheme="http://yoursite.com/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>java BigDecimal比较大小compareTo和equals</title>
    <link href="http://yoursite.com/2018/03/13/java-BigDecimal%E6%AF%94%E8%BE%83%E5%A4%A7%E5%B0%8FcompareTo%E5%92%8Cequals/"/>
    <id>http://yoursite.com/2018/03/13/java-BigDecimal比较大小compareTo和equals/</id>
    <published>2018-03-13T11:41:57.000Z</published>
    <updated>2018-03-13T11:44:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>Java在java.math包中提供的API类BigDecimal，用来对超过16位有效位的数进行精确的运算，常用BigDecimal来存金额。在对金额进行校验的时候发生异常，后来发现是比较大小的方法equals导致的。</p>
<p>BigDecimal的equals方法源码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public boolean equals(Object x) &#123;</div><div class="line">    if (!(x instanceof BigDecimal))</div><div class="line">        return false;</div><div class="line">    BigDecimal xDec = (BigDecimal) x;</div><div class="line">    if (x == this)</div><div class="line">        return true;</div><div class="line">    if (scale != xDec.scale)</div><div class="line">        return false;</div><div class="line">    long s = this.intCompact;</div><div class="line">    long xs = xDec.intCompact;</div><div class="line">    if (s != INFLATED) &#123;</div><div class="line">        if (xs == INFLATED)</div><div class="line">            xs = compactValFor(xDec.intVal);</div><div class="line">        return xs == s;</div><div class="line">    &#125; else if (xs != INFLATED)</div><div class="line">        return xs == compactValFor(this.intVal);</div><div class="line">    return this.inflated().equals(xDec.inflated());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>equals方法不仅比较了两个数的大小，还比较了精度是否相等，当出现5和5.0这种，就会被认为是不相等的。</p>
<p>compareTo的源码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public int compareTo(BigDecimal val) &#123;</div><div class="line">    // Quick path for equal scale and non-inflated case.</div><div class="line">    if (scale == val.scale) &#123;</div><div class="line">        long xs = intCompact;</div><div class="line">        long ys = val.intCompact;</div><div class="line">        if (xs != INFLATED &amp;&amp; ys != INFLATED)</div><div class="line">            return xs != ys ? ((xs &gt; ys) ? 1 : -1) : 0;</div><div class="line">    &#125;</div><div class="line">    int xsign = this.signum();</div><div class="line">    int ysign = val.signum();</div><div class="line">    if (xsign != ysign)</div><div class="line">        return (xsign &gt; ysign) ? 1 : -1;</div><div class="line">    if (xsign == 0)</div><div class="line">        return 0;</div><div class="line">    int cmp = compareMagnitude(val);</div><div class="line">    return (xsign &gt; 0) ? cmp : -cmp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>compareTo方法只比较了两个数的大小，没有比较精度是否相等，当出现5和5.0这种，就会被认为是相等的。</p>
<p>BigDecimal常用方法：</p>
<ol>
<li>add(BigDecimal)：BigDecimal对象中的值相加，然后返回这个对象。</li>
<li>subtract(BigDecimal)：BigDecimal对象中的值相减，然后返回这个对象。</li>
<li>multiply(BigDecimal)：BigDecimal对象中的值相乘，然后返回这个对象。</li>
<li>divide(BigDecimal)：BigDecimal对象中的值相除，然后返回这个对象。</li>
<li>toString()：将BigDecimal对象的数值转换成字符串。</li>
<li>doubleValue()：将BigDecimal对象中的值以双精度数返回。</li>
<li>floatValue()：将BigDecimal对象中的值以单精度数返回。</li>
<li>longValue()：将BigDecimal对象中的值以长整数返回。</li>
<li>intValue()：将BigDecimal对象中的值以整数返回。</li>
</ol>
<p>相关文章：<a href="http://blog.csdn.net/lisongjia123/article/details/51232657" target="_blank" rel="external">http://blog.csdn.net/lisongjia123/article/details/51232657</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java在java.math包中提供的API类BigDecimal，用来对超过16位有效位的数进行精确的运算，常用BigDecimal来存金额。在对金额进行校验的时候发生异常，后来发现是比较大小的方法equals导致的。&lt;/p&gt;
&lt;p&gt;BigDecimal的equals方法
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="BigDecimal" scheme="http://yoursite.com/tags/BigDecimal/"/>
    
  </entry>
  
  <entry>
    <title>jpa联表查询对子表进行crud操作</title>
    <link href="http://yoursite.com/2018/03/13/jpa%E8%81%94%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%AF%B9%E5%AD%90%E8%A1%A8%E8%BF%9B%E8%A1%8Ccrud%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/03/13/jpa联表查询对子表进行crud操作/</id>
    <published>2018-03-13T11:41:05.000Z</published>
    <updated>2018-03-13T11:43:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>jpa使用@OneToMany注解进行两个表之间一对多的关联以方便级联查询。当需要对关联的表进行增删改操作的时候，需要根据实际需求选择合适的方法。</p>
<p>order表的模型，省略get和set。其中order和installment是一对多关系</p>
<p>Order.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">@Entity</div><div class="line">@Table(name = &quot;order&quot;)</div><div class="line">@NamedQuery(name = &quot;Order.findAll&quot;, query = &quot;SELECT o FROM Order o&quot;)</div><div class="line">public class Order extends AbstractModel &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 主键</div><div class="line">     */</div><div class="line">    @Id</div><div class="line">    @GeneratedValue(strategy = GenerationType.IDENTITY)</div><div class="line">    private Long id;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 订单号</div><div class="line">     */</div><div class="line">    @Column(name = &quot;order_number&quot;)</div><div class="line">    private String orderNumber;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 总价</div><div class="line">     */</div><div class="line">    @Column(name = &quot;quoted_price&quot;)</div><div class="line">    private BigDecimal quotedPrice;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 分期信息</div><div class="line">     */</div><div class="line">    @OneToMany(cascade = &#123;CascadeType.REFRESH, CascadeType.PERSIST, CascadeType.MERGE&#125;, fetch = FetchType.LAZY, orphanRemoval = true)</div><div class="line">    @JoinColumn(name = &quot;order_id&quot;)</div><div class="line">    @Where(clause = &quot;delete_flag = 1&quot;)</div><div class="line">    private List&lt;Installment&gt; installments;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 删除状态</div><div class="line">     */</div><div class="line">    @Enumerated(EnumType.ORDINAL)</div><div class="line">    @Column(name = &quot;delete_flag&quot;)</div><div class="line">    private Status status;</div><div class="line">    ……</div></pre></td></tr></table></figure></p>
<p>Installment.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">@Entity</div><div class="line">@Table(name = &quot;installment&quot;)</div><div class="line">@NamedQuery(name = &quot;Installment.findAll&quot;, query = &quot;SELECT o FROM Installment o&quot;)</div><div class="line">public class Installment extends AbstractModel &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 分期主键</div><div class="line">     */</div><div class="line">    @Id</div><div class="line">    @GeneratedValue(strategy = GenerationType.IDENTITY)</div><div class="line">    private Long id;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 订单标识</div><div class="line">     */</div><div class="line">    @Column(name = &quot;order_id&quot;)</div><div class="line">    private Long orderId;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 分期金额</div><div class="line">     */</div><div class="line">    @Column(name = &quot;quoted_price&quot;)</div><div class="line">    private BigDecimal quotedPrice;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 删除标识</div><div class="line">     */</div><div class="line">    @Enumerated(EnumType.ORDINAL)</div><div class="line">    @Column(name = &quot;delete_flag&quot;)</div><div class="line">    private Status status;</div><div class="line">    ……</div></pre></td></tr></table></figure>
<h3 id="1-被关联表的id不作为其他表的外键关联"><a href="#1-被关联表的id不作为其他表的外键关联" class="headerlink" title="1. 被关联表的id不作为其他表的外键关联"></a>1. 被关联表的id不作为其他表的外键关联</h3><p>如果被关联的表的id没有被其他表的外键关联，可以进行“全删全加”进行被关联表的进行增删改的操作。</p>
<p>fillingModifyPara</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">……</div><div class="line">order.setOrderNumber(orderDTO.getOrderNumbber());</div><div class="line">order.setQuotedPrice(orderDTO.getQuotedPrice());</div><div class="line">List&lt;InstallmentDTO&gt; installmentDTOs = orderDTO.getInstallments();</div><div class="line">List&lt;Installment&gt; installments = new ArrayList&lt;&gt;();</div><div class="line">for (InstallmentDTO installmentDTO : installmentDTOs) &#123;</div><div class="line">//可以写构造函数进行初始操作</div><div class="line">    Installment installment = new Installment();</div><div class="line">    installment.setOrderId();//修改操作，orderId由前端传入</div><div class="line">    installment.setQuotedPrice(installmentDTO.gettQuotedPrice());</div><div class="line">    installments.add(installment);</div><div class="line">&#125;</div><div class="line">order.getInstallments().clear();</div><div class="line">order.getInstallments().addAll(installments);</div></pre></td></tr></table></figure>
<p>这种方法将原来关联的表的相关内容先物理删除，再将新的内容全部添加上去。优点是方便简单，没有冗余数据；缺点是被关联的表的id不能作为其他表的外键关联。这里注意不要对installment再定义一个对象后进行order.set的操作，这样会出现两个对象而报错，详情可以参看hb源码。</p>
<h3 id="2-被关联表的id可能还关联了一堆乱七八糟的东西"><a href="#2-被关联表的id可能还关联了一堆乱七八糟的东西" class="headerlink" title="2. 被关联表的id可能还关联了一堆乱七八糟的东西"></a>2. 被关联表的id可能还关联了一堆乱七八糟的东西</h3><p>当被关联表的id可能还关联了一堆乱七八糟的东西的时候，就不能进行简单的“全删全加”操作来修改关联表的内容。这个时候的做法是现将从数据库中查出的联表信息全部逻辑删除（status设为无效），然后与传入的进行比对，id相同的将status设置为有效，并修改内容；传入的DTO中没有id的作为新增的加入。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">order.setOrderNumber(orderDTO.getOrderNumbber());</div><div class="line">order.setQuotedPrice(quotationDTO.getQuotedPrice());</div><div class="line">List&lt;Installment&gt; installments = orders.getInstallments();</div><div class="line">List&lt;InstallmentDTO&gt; installmentDTOS = quotationDTO.getInstallmentList();</div><div class="line">List&lt;Installment&gt; newInstallments = new ArrayList&lt;&gt;();</div><div class="line">installments.forEach(installment -&gt; &#123;installment.setStatus(Status.INVALID);&#125;);</div><div class="line">for (InstallmentDTO installmentDTO : installmentDTOS) &#123;</div><div class="line">    for (Installment installment : installments) &#123;</div><div class="line">        if (installment.getId().equals(installmentDTO.getId())) &#123;</div><div class="line">            installment.setStatus(Status.VALID);</div><div class="line">            installment.setQuotedPrice(installmentDTO.getQuotedPrice());</div><div class="line">            installment.setOrderId();</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        if (installmentDTO.getId() == null) &#123;</div><div class="line">            Installment installment = new Installment();</div><div class="line">            installment.setOrderId();</div><div class="line">            installment.setQuotedPrice(installmentDTO.gettQuotedPrice());</div><div class="line">            newInstallments.add(newInstallment);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">installments.addAll(newInstallments);</div><div class="line">orders.setInstallments(installments);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jpa使用@OneToMany注解进行两个表之间一对多的关联以方便级联查询。当需要对关联的表进行增删改操作的时候，需要根据实际需求选择合适的方法。&lt;/p&gt;
&lt;p&gt;order表的模型，省略get和set。其中order和installment是一对多关系&lt;/p&gt;
&lt;p&gt;Ord
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="jpa" scheme="http://yoursite.com/tags/jpa/"/>
    
  </entry>
  
  <entry>
    <title>Python2.7 pytesser提取图片中文字信息</title>
    <link href="http://yoursite.com/2017/11/30/Python2-7-pytesser%E6%8F%90%E5%8F%96%E5%9B%BE%E7%89%87%E4%B8%AD%E6%96%87%E5%AD%97%E4%BF%A1%E6%81%AF/"/>
    <id>http://yoursite.com/2017/11/30/Python2-7-pytesser提取图片中文字信息/</id>
    <published>2017-11-30T12:30:34.000Z</published>
    <updated>2017-11-30T12:31:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>图片中存在大段的文字，用手敲实在是费劲。很多在线转换的工具，速度慢，并且达到一定次数后会收费。贫穷让我自力更生，查到python可以通过安装pytesseract库来进行文字识别。而pytesser调用了tesseract，因此还需要安装Tesseract-OCR软件（OCR：Optical Character Recognition，即光学字符识别技术，专门用于对图片文字进行识别，并获取文本。tesseract-ocr引擎先由HP实验室研发，后来成为一个开源项目，主要由google进行改进优化）。另外还需要用的图像处理库PIL库。</p>
<p>网上相关资料很多，在安装过程中出现了很多问题，特将安装方法和遇到的问题做个记录，方便日后查阅。</p>
<p>运行环境为：OS X Yosemite 10.10.5</p>
<h2 id="1-安装PIL和pytesseract库"><a href="#1-安装PIL和pytesseract库" class="headerlink" title="1.安装PIL和pytesseract库"></a>1.安装PIL和pytesseract库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RosyMacBook-Pro:~ Rosy$ pip install pytesseract</div><div class="line">RosyMacBook-Pro:~ Rosy$ pip install PIL</div></pre></td></tr></table></figure>
<h2 id="2-安装Tesseract-OCR"><a href="#2-安装Tesseract-OCR" class="headerlink" title="2.安装Tesseract-OCR"></a>2.安装Tesseract-OCR</h2><h3 id="2-1-安装homebrew"><a href="#2-1-安装homebrew" class="headerlink" title="2.1 安装homebrew"></a>2.1 安装homebrew</h3><p>Homebrew是MacOS上的包管理器，类似于ubuntu中的apt-get，centos中的yum。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RosyMacBook-Pro:~ Rosy$ ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>
<p>安装好后，可用 <em>brew -v</em> 查看认是否安装成功。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RosyMacBook-Pro:~ Rosy$ brew -v</div><div class="line">Homebrew 1.3.8</div><div class="line">Homebrew/homebrew-core (git revision e939; last commit 2017-11-29)</div></pre></td></tr></table></figure>
<h3 id="2-2-安装tesseract"><a href="#2-2-安装tesseract" class="headerlink" title="2.2 安装tesseract"></a>2.2 安装tesseract</h3><p>安装tesseract会提示 <strong><em>tesseract:XQuartz is required to install this formula. X11Requirment unsatiffied!</em></strong> </p>
<p><strong>需要先安装xquartz！</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 安装xquartz</div><div class="line">RosyMacBook-Pro:~ Rosy$ brew cask install xquartz</div><div class="line">// 安装tesseract的同时安装训练工具</div><div class="line">RosyMacBook-Pro:~ Rosy$ brew install --with-training-tools tesseract</div></pre></td></tr></table></figure>
<h3 id="2-3-安装Tesseract-OCR语言包配置"><a href="#2-3-安装Tesseract-OCR语言包配置" class="headerlink" title="2.3 安装Tesseract-OCR语言包配置"></a>2.3 安装Tesseract-OCR语言包配置</h3><p>默认安装的是eng英文语言包。如果需要对汉语进行提取，则需要安装汉语语言包。</p>
<p>语言包下载地址：<a href="https://github.com/tesseract-ocr/tessdata" target="_blank" rel="external">https://github.com/tesseract-ocr/tessdata</a></p>
<p>下载chi_sim.traineddata（中文简体），将其拷贝到/usr/local/Cellar/tesseract/3.05.01/share/tessdata下。</p>
<p><img src="http://7ycyh7.com1.z1.glb.clouddn.com/WechatIMG2.jpeg" alt="image"></p>
<p>验证Tesseract-OCR：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RosyMacBook-Pro:~ Rosy$ tesseract /Users/Rosy/Desktop/test.png /Users/Rosy/Desktop/test -l chi_sim</div><div class="line">Tesseract Open Source OCR Engine v3.05.01 with Leptonica</div><div class="line">RosyMacBook-Pro:~ Rosy$</div></pre></td></tr></table></figure>
<p>其中 <em>-l</em> 表示识别的语言，test是输出到文件txt的名字。在指定路径下能够看到生成的txt文件。</p>
<p>png格式的图片，提前其中的文字信息</p>
<p><img src="http://7ycyh7.com1.z1.glb.clouddn.com/test2.png" alt="image"></p>
<p>提取后的效果：<br><img src="http://7ycyh7.com1.z1.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-30%20%E4%B8%8B%E5%8D%882.55.41.png" alt="image"></p>
<h2 id="3-python程序提取图片信息"><a href="#3-python程序提取图片信息" class="headerlink" title="3.python程序提取图片信息"></a>3.python程序提取图片信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#coding:utf-8</div><div class="line">import sys </div><div class="line">import pytesseract</div><div class="line">from PIL import Image</div><div class="line"></div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(&apos;utf-8&apos;)</div><div class="line">image = Image.open(&quot;/Users/Rosy/Desktop/test.png&quot;)</div><div class="line">text = pytesseract.image_to_string(image,lang=&apos;chi_sim&apos;) </div><div class="line">with open(&quot;/Users/Rosy/Desktop/output.txt&quot;, &quot;w&quot;) as f:</div><div class="line">    print(text)</div><div class="line">    f.write(str(text))</div></pre></td></tr></table></figure>
<p>提取结果</p>
<p><img src="http://7ycyh7.com1.z1.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-30%20%E4%B8%8B%E5%8D%883.09.58.png" alt="image"></p>
<p>其中需要说明：</p>
<ul>
<li>import pytesseract报错如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import pytesseract</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">  File &quot;pytesseract.py&quot;, line 9, in &lt;module&gt;</div><div class="line">    import Image</div><div class="line">  File &quot;/Library/Python/2.7/site-packages/PIL/Image.py&quot;, line 27, in &lt;module&gt;</div><div class="line">    from . import VERSION, PILLOW_VERSION, _plugins</div><div class="line">ValueError: Attempted relative import in non-package</div></pre></td></tr></table></figure>
<p>说pytesseract.py无法引用Image这个包，在确认了PIL是正常安装且能够正常使用，于是找到了pytesseract.py报错的地方，源码是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">try:</div><div class="line">    import Image</div><div class="line">except ImportError:</div><div class="line">    from PIL import Image</div></pre></td></tr></table></figure>
<p>我的PIL的Image文件和pytesseract.py不在同一目录下，因此没法直接引用。并且没有走 <em>from PIL import Image</em> 这条语句，说明是异常没有捕获到，改一个范围更大的异常进行捕获就可以了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">try:</div><div class="line">    import Image</div><div class="line">except Exception:</div><div class="line">    from PIL import Image</div></pre></td></tr></table></figure>
<ul>
<li>python不能够读取中午，加了 <em>#coding:utf-8</em> 也不行；查阅了网上的资料，加上如下三行，搞定！</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import sys </div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(&apos;utf-8&apos;)</div></pre></td></tr></table></figure>
<p>具体添加的位置见完整代码。</p>
<p>另外，尝试了有背景花纹，颜色和背景接近和非正常字体的图片的文字提取信息。发现正常字体在颜色和背景接近的情况下，能够大致识别出文字信息，而在非正常字体的情况下几乎不能正确提前信息。见下图：</p>
<p><img src="http://7ycyh7.com1.z1.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-30%20%E4%B8%8B%E5%8D%883.45.29.png" alt="image"></p>
<p>另外，对图片的处理和对Tesseract-OCR语言包的训练，可以提高识别率，以后可能会继续研究。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图片中存在大段的文字，用手敲实在是费劲。很多在线转换的工具，速度慢，并且达到一定次数后会收费。贫穷让我自力更生，查到python可以通过安装pytesseract库来进行文字识别。而pytesser调用了tesseract，因此还需要安装Tesseract-OCR软件（OC
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="pytesseract" scheme="http://yoursite.com/tags/pytesseract/"/>
    
      <category term="Tesseract-OCR" scheme="http://yoursite.com/tags/Tesseract-OCR/"/>
    
  </entry>
  
  <entry>
    <title>docker里用tomcat8下载文件</title>
    <link href="http://yoursite.com/2017/11/30/docker%E9%87%8C%E7%94%A8tomcat8%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/11/30/docker里用tomcat8下载文件/</id>
    <published>2017-11-30T12:30:04.000Z</published>
    <updated>2017-11-30T12:32:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>在docker中启动Tomcat作为下载文件服务器，如果存在中文名的文件，则需要对docker的容器编码格式进行修改，使其能够支持中文，否则将无法在下载中文名文件。</p>
<h2 id="1-修改docker容器编码格式"><a href="#1-修改docker容器编码格式" class="headerlink" title="1. 修改docker容器编码格式"></a>1. 修改docker容器编码格式</h2><p>直接启动docker容器，发现中文文件在里面显示为乱码</p>
<p><img src="http://7ycyh7.com1.z1.glb.clouddn.com/1.png" alt="image"></p>
<p>查看docker容器编码格式，可以看到当前编码格式为POSIX，这种编码格式不支持中文.</p>
<p><img src="http://7ycyh7.com1.z1.glb.clouddn.com/2.png" alt="image"></p>
<p>我们需要自己修改容器的编码格式。</p>
<h3 id="1-1-安装中文语言包"><a href="#1-1-安装中文语言包" class="headerlink" title="1.1 安装中文语言包"></a>1.1 安装中文语言包</h3><p>查看容器所有的语言环境，如果没有中文语言包，则需要自己安装。</p>
<p><img src="http://7ycyh7.com1.z1.glb.clouddn.com/3.png" alt="image"></p>
<p>安装中文语言包：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@e0f34910ee74 /]# yum install glibc-common</div></pre></td></tr></table></figure>
<p>安装好后再次查看语言包信息，出现中文语言包。</p>
<p><img src="http://7ycyh7.com1.z1.glb.clouddn.com/4.png" alt="image"></p>
<h3 id="1-2-docker-build生成新的镜像"><a href="#1-2-docker-build生成新的镜像" class="headerlink" title="1.2 docker build生成新的镜像"></a>1.2 docker build生成新的镜像</h3><p>将下好语言包的容器commit成一个新的镜像</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@host-10-0-251-159 dockerbuild]# docker commit c2eb75865693 webcrawler-service:test</div></pre></td></tr></table></figure>
<p>基于这个新镜像写一个Dockerfile，然后基于Dockerfile生成我们需要的镜像。<br>Dockerfile为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@host-10-0-251-159 dockerbuild]# cat Dockerfile </div><div class="line">FROM webcrawler-service:test</div><div class="line">ENV LANG zh_CN.UTF-8</div></pre></td></tr></table></figure>
<p>docker build成新的镜像</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@host-10-0-251-159 dockerbuild]# docker build -t webcrawler-service-new .</div></pre></td></tr></table></figure>
<p>基于这个新镜像webcrawler-service-new启动一个容器，进入这个容器，我们可以看到容器编码为我们设置的zh_CN.UTF-8，生成一个新的中文名文件，不再出现乱码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@host-10-0-251-159 /]# docker run -tid eec4bea /run.sh</div><div class="line">[root@host-10-0-251-159 /]# docker exec -ti eec4bea /bin/bash</div></pre></td></tr></table></figure>
<p><img src="http://7ycyh7.com1.z1.glb.clouddn.com/5.png" alt="image"></p>
<p><img src="http://7ycyh7.com1.z1.glb.clouddn.com/6.png" alt="image"></p>
<h2 id="2-Tomcat8-HTTP文件下载文件"><a href="#2-Tomcat8-HTTP文件下载文件" class="headerlink" title="2. Tomcat8 HTTP文件下载文件"></a>2. Tomcat8 HTTP文件下载文件</h2><h3 id="2-1-修改Tomcat配置文件"><a href="#2-1-修改Tomcat配置文件" class="headerlink" title="2.1 修改Tomcat配置文件"></a>2.1 修改Tomcat配置文件</h3><p>在Tomcat安装目录下，修改web.xml文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[root@eec4bea40bab conf]# vi /usr/local/tomcat/conf/web.xml</div><div class="line">……</div><div class="line">    &lt;servlet&gt;</div><div class="line">        &lt;servlet-name&gt;default&lt;/servlet-name&gt;</div><div class="line">        &lt;servlet-class&gt;org.apache.catalina.servlets.DefaultServlet&lt;/servlet-class&gt;</div><div class="line">        &lt;init-param&gt;</div><div class="line">            &lt;param-name&gt;debug&lt;/param-name&gt;</div><div class="line">            &lt;param-value&gt;0&lt;/param-value&gt;</div><div class="line">        &lt;/init-param&gt;</div><div class="line">        &lt;init-param&gt;</div><div class="line">            &lt;param-name&gt;listings&lt;/param-name&gt;</div><div class="line">            &lt;param-value&gt;true&lt;/param-value&gt; （把原来的false改为true）</div><div class="line">        &lt;/init-param&gt;</div><div class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</div><div class="line">    &lt;/servlet&gt;</div><div class="line">……</div></pre></td></tr></table></figure>
<h3 id="2-2-创建用于下载的xml文件"><a href="#2-2-创建用于下载的xml文件" class="headerlink" title="2.2 创建用于下载的xml文件"></a>2.2 创建用于下载的xml文件</h3><p>在安装目录下的conf/Catalina/localhost/下新建一个xml文件，用于访问下载列表。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@eec4bea40bab conf]# vi /usr/local/tomcat/conf/web.xml </div><div class="line">[root@eec4bea40bab conf]# cat /usr/local/tomcat/conf/Catalina/localhost/download.xml </div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;Context  reloadable=&quot;true&quot; docBase=&quot;/usr/download&quot; crossContext=&quot;true&quot;&gt;</div><div class="line">&lt;/Context&gt;</div></pre></td></tr></table></figure>
<p>其中docBase的路径为对外暴露的下载路径，需要存在该路径。<br>docker容器，对外暴露需要访问的端口，浏览器访问，出现下载列表：</p>
<p><img src="http://7ycyh7.com1.z1.glb.clouddn.com/7.png" alt="image"></p>
<p>因为有需求是文件名需要有中文。一开始中文出现乱码，导致无法下载文件。查阅了网上很多资料，都说是因为Tomcat默认的编码方式是iso8859-1，而iso8859-1不属于中文码表，故而出现乱码。建议修改server.xml文件，将编码方式修改为utf-8： <em>URIEncoding=”utf-8”</em>。我进行尝试后发现依然中文乱码。后来发现Tomcat8默认的编码已经是utf-8了，所以不需要修改server.xml文件 <strong>（如果从Tomcat早期版本迁移到Tomcat8需要注意这个问题）</strong>。后来多次测试，发现是系统环境的问题，如果系统本身不支持中文，则修改Tomcat后也不支持中文文件的下载，需要先修改系统环境语言。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在docker中启动Tomcat作为下载文件服务器，如果存在中文名的文件，则需要对docker的容器编码格式进行修改，使其能够支持中文，否则将无法在下载中文名文件。&lt;/p&gt;
&lt;h2 id=&quot;1-修改docker容器编码格式&quot;&gt;&lt;a href=&quot;#1-修改docker容器编码
    
    </summary>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="Tomcat8" scheme="http://yoursite.com/tags/Tomcat8/"/>
    
  </entry>
  
  <entry>
    <title>java基本数据类型及其封装类</title>
    <link href="http://yoursite.com/2017/11/30/java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E5%B0%81%E8%A3%85%E7%B1%BB/"/>
    <id>http://yoursite.com/2017/11/30/java基本数据类型及其封装类/</id>
    <published>2017-11-30T12:28:58.000Z</published>
    <updated>2017-11-30T12:33:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前刚从python写java，碰到过两个String比较大小，习惯性用了“==”，发现不管我的String赋什么样的值，最后都是false。后来网上搜了一下，发现是封装类的原因。</p>
<h2 id="1-相关说明"><a href="#1-相关说明" class="headerlink" title="1.相关说明"></a>1.相关说明</h2><p>说到封装类，不得不提到栈内存和堆内存。<br>堆内存在Java运行时被使用来为对象和JRE类分配内存。不论什么时候我们创建了对象，它将一直会在堆内存上创建。垃圾回收运行在堆内存上来释放没有任何引用的对象所占的内存，任何在堆上被创建的对象都有一个全局的访问，并且可以在应用的任何位置被引用。</p>
<p>Java的栈内存被用来线程的执行，他们包含生命周期很短的具体值的方法和在堆中使用这个方法对象的引用。栈内存是LIFO（后进先出）序列。当方法被调用的时候，堆内存中一个新的块被创建，保存了本地原始值和在方法中对其他对象的引用。这个方法结束之后，这个块对其他方法就变成可用的了。和堆内存比，栈内存要小的多，因为明确使用了内存分配规则（LIFO），和堆内存相比栈内存非常快。</p>
<h2 id="2-封装类型和基本类型比较"><a href="#2-封装类型和基本类型比较" class="headerlink" title="2. 封装类型和基本类型比较"></a>2. 封装类型和基本类型比较</h2><h3 id="2-1-封装类型和基本类型说明"><a href="#2-1-封装类型和基本类型说明" class="headerlink" title="2.1 封装类型和基本类型说明"></a>2.1 封装类型和基本类型说明</h3><p>Java的基本数据类型：int，double，float，long，byte，char，boolean。<br>对应的封装类：Integer，Double，Float，Long，Byte，Char，Boolean。<br>封装类型和基本类型的内存模型本质上是不一样的。基本数据类型直接存储在内存中的内存栈上的，数据本身的值就是存储在栈空间里面，不存在“引用”的概念。封装类型是按照Java里面存储对象的内存模型来进行数据存储的，使用Java内存堆和内存栈来进行这种类型的数据存储，对象本身的值存储在内存堆上，栈内存只包含原始值变量和堆中对象变量的引用。封装类型和基本类型有不同的默认值：封装类型默认值为null，基本类型的默认值于本身的类型有关。基本数据类型本身就是一个值。</p>
<h3 id="2-2基本数据类型及其封装类的转换"><a href="#2-2基本数据类型及其封装类的转换" class="headerlink" title="2.2基本数据类型及其封装类的转换"></a>2.2基本数据类型及其封装类的转换</h3><p>定义基本数据类型转封装类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">intnum=3;</div><div class="line">Integerinteger=newInteger(num);</div></pre></td></tr></table></figure>
<p>在添加了自动装拆箱的功能之后:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Integer integer=3;</div></pre></td></tr></table></figure>
<p>封装类转基本数据类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">integer integer=newInteger(3);</div><div class="line">int num=integer.intValue();</div></pre></td></tr></table></figure>
<p>当然，也可以直接int num=integer，这里的自动拆箱，其实也是调用了封装类的intValue()方法来实现的。<br>将String类型字符串与基本数据类型进行转换。<br>字符串转基本数据类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String ageString=&quot;23&quot;;</div><div class="line">int age=Integer.parseInt(ageString);</div></pre></td></tr></table></figure>
<p>基本数据类型转字符串：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String age=23+&quot;&quot;;</div><div class="line">或者Stringage = String.valueOf(23);</div></pre></td></tr></table></figure>
<p>封装类转字符串,直接调用封装类对象的toString()方法即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Integer age = 23;</div><div class="line">String ageString=age.toString();</div></pre></td></tr></table></figure>
<h3 id="2-3-封装类型和基本类型数值直接的比较方法（equal和-）"><a href="#2-3-封装类型和基本类型数值直接的比较方法（equal和-）" class="headerlink" title="2.3 封装类型和基本类型数值直接的比较方法（equal和==）"></a>2.3 封装类型和基本类型数值直接的比较方法（equal和==）</h3><p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int n=3;</div><div class="line">int m=3;</div></pre></td></tr></table></figure>
<p>变量n和变量m都是直接存储的“3”这个数值，所以用==比较的时候结果是true。<br>而对于非基本数据类型的变量，是引用类型的变量，引用类型的变量存储的并不是“值”本身，而是于其关联的对象在内存中的地址。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String str1;</div></pre></td></tr></table></figure>
<p>这句话声明了一个引用类型的变量，此时它并没有和任何对象关联。<br>而通过newString（”hello”）来产生一个对象（也称作为类String的一个实例），并将这个对象和str1、str2进行绑定：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">str1=newString(&quot;hello&quot;);（或者：String str1=&quot;hello&quot;;）</div><div class="line">str2=newString(&quot;hello&quot;);（或者：String str2=&quot;hello&quot;;）</div></pre></td></tr></table></figure>
<p>那么str1指向了一个对象，此时变量str1中存储的是它指向的对象在内存中的存储地址，并不是“值”本身，也就是说并不是直接存储的字符串”hello”。这里面的引用和C/C++中的指针很类似。<br>因此在用==对str1和str2进行第一次比较时，得到的结果是false。因此它们分别指向的是不同的对象，也就是说它们实际存储的内存地址不同。<br>而在第二次比较时，都让str1和str2指向了str指向的对象，那么得到的结果毫无疑问是true。<br>equals方法是基类Object中的方法，因此对于所有的继承于Object的类都会有该方法。<br>在Object类中，equals方法是用来比较两个对象的引用是否相等，即是否指向同一个对象。String类对equals方法进行了重写，用来比较指向的字符串对象所存储的字符串是否相等。</p>
<p>对于封装过之后，每个类型都有对应的缓存：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>缓存情况</th>
</tr>
</thead>
<tbody>
<tr>
<td>Byte</td>
<td>全部缓存</td>
</tr>
<tr>
<td>Boolean</td>
<td>全部缓存</td>
</tr>
<tr>
<td>Integer</td>
<td>-128~127缓存</td>
</tr>
<tr>
<td>Character</td>
<td>&lt;=127缓存</td>
</tr>
<tr>
<td>Short</td>
<td>-128~127缓存</td>
</tr>
<tr>
<td>Long</td>
<td>-128~127缓存</td>
</tr>
<tr>
<td>Float</td>
<td>没有缓存</td>
</tr>
<tr>
<td>Double</td>
<td>没有缓存</td>
</tr>
</tbody>
</table>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Integer i1=127;// java在编译的时候，被翻译成-&gt;Integer i1=Integer.valueOf(127);</div><div class="line">Integer i2=127;</div><div class="line">System.out.println(i1==i2);// true</div><div class="line">Integer _i1=128;</div><div class="line">Integer _i2=128;</div><div class="line">System.out.println(_i1==_i2);//false</div></pre></td></tr></table></figure>
<p>对于-128到127之间的数，会进行缓存，Integer i1=127时，会将127进行缓存，下次再写Integer i2=127时，就会直接从缓存中取，就不会new了。所以i1 == i2 是true；而_i1 == _i2是false。</p>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><h3 id="3-1基本类型："><a href="#3-1基本类型：" class="headerlink" title="3.1基本类型："></a>3.1基本类型：</h3><p>优点：</p>
<ul>
<li>用于计算效率高</li>
<li>不会由于常量池引起比较大小错误</li>
</ul>
<p>缺点：</p>
<ul>
<li>当数据库中查询出结果之后封装结果集时如果返回的值时null时，如果直接赋值给这个基本类型的字段时，会在运行时报出异常，不能将null赋给一个基本类型，而用Integer就不存在这样都的情况</li>
<li>当用spring的表单对象时如果页面传来的值是只有字段没有值是如果表单对象中有基本类型的值时会抛出异常。需要设置在数据库中为该字段设置默认值，但是这经常会被忽略。</li>
</ul>
<h3 id="3-2封装类型"><a href="#3-2封装类型" class="headerlink" title="3.2封装类型"></a>3.2封装类型</h3><p>优点：</p>
<ul>
<li>可以存放null，从数据库中查出值时可能会有null</li>
<li>表示一个值（不用于计算，只用于保存值时和int类型一样）;</li>
</ul>
<p>缺点</p>
<ul>
<li>不能用于两个Integer对象双等判断两个对象的值相等，会出现错误的。</li>
</ul>
<p>java中Integer，String判断相等与integer的比较大小不适合频繁的用于计算，要用双等判断两个对象的值是否相等时，要调用intValue方法<br>综上所述，在建立实体类时，用封装类型比较好；如果需要频发的计算，则用基本类型效率更高。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前刚从python写java，碰到过两个String比较大小，习惯性用了“==”，发现不管我的String赋什么样的值，最后都是false。后来网上搜了一下，发现是封装类的原因。&lt;/p&gt;
&lt;h2 id=&quot;1-相关说明&quot;&gt;&lt;a href=&quot;#1-相关说明&quot; class=&quot;h
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="基本类" scheme="http://yoursite.com/tags/%E5%9F%BA%E6%9C%AC%E7%B1%BB/"/>
    
      <category term="封装类" scheme="http://yoursite.com/tags/%E5%B0%81%E8%A3%85%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>JAVA写入word文档（用POI包）</title>
    <link href="http://yoursite.com/2017/11/07/JAVA%E5%86%99%E5%85%A5word%E6%96%87%E6%A1%A3%EF%BC%88%E7%94%A8POI%E5%8C%85%EF%BC%89/"/>
    <id>http://yoursite.com/2017/11/07/JAVA写入word文档（用POI包）/</id>
    <published>2017-11-07T08:14:06.000Z</published>
    <updated>2017-11-07T08:35:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Apache的POI是一种流行的API，允许程序员创建，修改和使用显示Java程序的MS-Office文件。它是开发和Apache软件基金会的分布式设计或修改使用Java程序MS-Office文件的开源库。它包含的类和方法来将用户输入的数据或文件到MS-Office文档解码。POI对<strong>Excel</strong>、<strong>Word</strong>、<strong>PowerPoint</strong>甚至是<strong>Visio</strong>都有组件。近期工作中有项目需要生成Word，并且有指定样式（字体、字号页眉页脚、水印等），特记录一下POI在Word上的用法。</p>
<p>官网地址：<a href="https://poi.apache.org/" target="_blank" rel="external">https://poi.apache.org/</a>。</p>
<h2 id="1-创建docx文档（写入段落和表格）"><a href="#1-创建docx文档（写入段落和表格）" class="headerlink" title="1. 创建docx文档（写入段落和表格）"></a>1. 创建docx文档（写入段落和表格）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args) throws XmlException, IOException</div><div class="line">&#123;</div><div class="line">    //创建一个空白文档</div><div class="line">    XWPFDocument document = new XWPFDocument();</div><div class="line">    </div><div class="line">    //给段落加下边框</div><div class="line">    paragraph.setBorderBottom(Borders.BASIC_BLACK_DASHES);</div><div class="line">    </div><div class="line">    //给段落加左边框</div><div class="line">    paragraph.setBorderLeft(Borders.BASIC_BLACK_DASHES);</div><div class="line">    </div><div class="line">    //给段落加右边框</div><div class="line">    paragraph.setBorderRight(Borders.BASIC_BLACK_DASHES);</div><div class="line">    </div><div class="line">    //给段落加上边框</div><div class="line">    paragraph.setBorderTop(Borders.BASIC_BLACK_DASHES);</div><div class="line">    </div><div class="line">    //创建一个段落</div><div class="line">    XWPFParagraph paragraph = document.createParagraph();</div><div class="line">    XWPFRun run = paragraph.createRun();</div><div class="line">    run.setText(&quot;这是一个word文档，用于测试，用poi写入。  可以有空格，可以改写&quot;);</div><div class="line">    </div><div class="line">    //创建表格</div><div class="line">    XWPFTable table = document.createTable();</div><div class="line">    </div><div class="line">    //创建第一行</div><div class="line">    XWPFTableRow tableRowOne = table.getRow(0);</div><div class="line">    tableRowOne.getCell(0).setText(&quot;col one, row one&quot;);</div><div class="line">    tableRowOne.addNewTableCell().setText(&quot;col two, row one&quot;);</div><div class="line">    tableRowOne.addNewTableCell().setText(&quot;col three, row one&quot;);</div><div class="line">    </div><div class="line">    //创建第二行</div><div class="line">    XWPFTableRow tableRowTwo = table.createRow();</div><div class="line">    tableRowTwo.getCell(0).setText(&quot;col one, row two&quot;);</div><div class="line">    tableRowTwo.getCell(1).setText(&quot;col two, row two&quot;);</div><div class="line">    tableRowTwo.getCell(2).setText(&quot;col three, row two&quot;);</div><div class="line">    </div><div class="line">    //Write the Document in file system</div><div class="line">    FileOutputStream out = new FileOutputStream(new File(&quot;C:\\Users\\dell\\Desktop\\createparagraph.docx&quot;));</div><div class="line">    document.write(out);</div><div class="line">    out.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-段落对齐和添加样式"><a href="#2-段落对齐和添加样式" class="headerlink" title="2. 段落对齐和添加样式"></a>2. 段落对齐和添加样式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args) throws XmlException, IOException</div><div class="line">&#123;</div><div class="line">    XWPFDocument document = new XWPFDocument();</div><div class="line">    //创建段落</div><div class="line">    XWPFParagraph paragraphone = document.createParagraph();</div><div class="line"></div><div class="line">    //设置段落右对齐样式</div><div class="line">    paragraphone.setAlignment(ParagraphAlignment.RIGHT);</div><div class="line">    XWPFRun runone=paragraphone.createRun();</div><div class="line">    runone.setText(&quot;右对齐右对齐右对齐右对齐右对齐右对齐右对齐右对齐右对齐右对齐.&quot;);</div><div class="line"></div><div class="line">    //创建一个新段落</div><div class="line">    XWPFParagraph paragraphtwo=document.createParagraph();</div><div class="line"></div><div class="line">    //设置段落居中对齐样式</div><div class="line">    paragraphtwo.setAlignment(ParagraphAlignment.CENTER);</div><div class="line">    XWPFRun runtwo=paragraphtwo.createRun();</div><div class="line">    runtwo.setText(&quot;居中对齐居中对齐居中对齐居中对齐居中对齐居中对齐居中对齐居中对齐.&quot;);</div><div class="line"></div><div class="line">    //创建一个新段落</div><div class="line">    XWPFParagraph paragraphthree = document.createParagraph();</div><div class="line">    </div><div class="line">    //设置加粗和斜体</div><div class="line">    XWPFRun paragraphOneRunOne = paragraphthree.createRun();</div><div class="line">    paragraphOneRunOne.setBold(true);</div><div class="line">    paragraphOneRunOne.setItalic(true);</div><div class="line">    paragraphOneRunOne.setText(&quot;Font Style&quot;);</div><div class="line">    paragraphOneRunOne.addBreak();</div><div class="line">    </div><div class="line">    //设置文本位置</div><div class="line">    XWPFRun paragraphOneRunTwo = paragraphthree.createRun();</div><div class="line">    paragraphOneRunTwo.setText(&quot;Font Style two&quot;);</div><div class="line">    paragraphOneRunTwo.setTextPosition(100);</div><div class="line">    </div><div class="line">    //创建一个新段落</div><div class="line">    XWPFRun paragraphOneRunThree = paragraphthree.createRun();</div><div class="line">    </div><div class="line">    //设置文字中划线样式（可能弃用）</div><div class="line">    paragraphOneRunThree.setStrike(true);</div><div class="line">    </div><div class="line">    //设置文字大小</div><div class="line">    paragraphOneRunThree.setFontSize(20);</div><div class="line">    </div><div class="line">    //设置文字段落内对齐，垂直对齐（垂直靠下对齐，垂直居中对齐，垂直向上对齐）</div><div class="line">    paragraphOneRunThree.setSubscript(VerticalAlign.SUBSCRIPT);</div><div class="line">    paragraphOneRunThree.setText(&quot; Different Font Styles&quot;);</div><div class="line">    </div><div class="line">    //Write the Document in file system</div><div class="line">    FileOutputStream out = new FileOutputStream(newFile(&quot;C:\\Users\\dell\\Desktop\\createparagraph.docx&quot;));</div><div class="line">    document.write(out);</div><div class="line">    out.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-从已有的docx文件中获取信息"><a href="#3-从已有的docx文件中获取信息" class="headerlink" title="3. 从已有的docx文件中获取信息"></a>3. 从已有的docx文件中获取信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args) throws XmlException, IOException</div><div class="line">&#123;</div><div class="line">    //传流构建XWPFDocument</div><div class="line">    XWPFDocument docx = new XWPFDocument(new FileInputStream(&quot;C:\\Users\\dell\\Desktop\\createparagraph.docx&quot;));</div><div class="line">    </div><div class="line">    //传路径构建XWPFDocument</div><div class="line">    XWPFDocument document = new XWPFDocument(POIXMLDocument.openPackage(&quot;C:\\Users\\dell\\Desktop\\createparagraph.docx&quot;));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-处理页眉页脚（由模板文件进行文字替换）"><a href="#4-处理页眉页脚（由模板文件进行文字替换）" class="headerlink" title="4. 处理页眉页脚（由模板文件进行文字替换）"></a>4. 处理页眉页脚（由模板文件进行文字替换）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">public static void replaceFooterAndHeader(XWPFDocument doc)&#123;</div><div class="line">        List&lt;XWPFParagraph&gt; footers = doc.getHeaderFooterPolicy().getDefaultFooter().getParagraphs();</div><div class="line">        List&lt;XWPFParagraph&gt; headers = doc.getHeaderFooterPolicy().getDefaultHeader().getParagraphs();</div><div class="line">       </div><div class="line">        //处理页脚</div><div class="line">        for (XWPFParagraph paragraph : footers) &#123;</div><div class="line">            List&lt;XWPFRun&gt; runs = paragraph.getRuns();</div><div class="line">            for (XWPFRun run : runs) &#123;</div><div class="line">                String text = run.getText(0);</div><div class="line">                if(StringUtils.isNotEmpty(text))&#123;</div><div class="line">                    for(Entry&lt;String, String&gt; entry : params.entrySet())&#123;</div><div class="line">                        String key = entry.getKey();</div><div class="line">                        if(text.indexOf(key) != -1)&#123;</div><div class="line">                            Object value = entry.getValue();</div><div class="line">                            if(value instanceof String)&#123;</div><div class="line">                                text = text.replace(key, value.toString());</div><div class="line">                                run.setText(text,0);</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">       </div><div class="line">        //处理页眉</div><div class="line">        for (XWPFParagraph paragraph : headers) &#123;</div><div class="line">            List&lt;XWPFRun&gt; runs = paragraph.getRuns();</div><div class="line">            for (XWPFRun run : runs) &#123;</div><div class="line">                String text = run.getText(0);</div><div class="line">                if(StringUtils.isNotEmpty(text))&#123;</div><div class="line">                    for(Entry&lt;String, String&gt; entry : params.entrySet())&#123;</div><div class="line">                        String key = entry.getKey();</div><div class="line">                        if(text.indexOf(key) != -1)&#123;</div><div class="line">                            Object value = entry.getValue();</div><div class="line">                            if(value instanceof String)&#123;</div><div class="line">                                text = text.replace(key, value.toString());</div><div class="line">                                run.setText(text,0);</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="5-获取docx文件中的图片"><a href="#5-获取docx文件中的图片" class="headerlink" title="5.获取docx文件中的图片"></a>5.获取docx文件中的图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args) throws XmlException, InvalidFormatException, FileNotFoundException, IOException&#123;</div><div class="line">    String path =&quot;C:\\Users\\dell\\Desktop\\picture.docx&quot;;</div><div class="line">    File file = new File(path);</div><div class="line">    FileInputStream fis = new FileInputStream(file);</div><div class="line">    XWPFDocument document = new XWPFDocument(fis);</div><div class="line">    XWPFWordExtractor xwpfWordExtractor = new XWPFWordExtractor(document);</div><div class="line">    String text = xwpfWordExtractor.getText();</div><div class="line">    System.out.println(text);</div><div class="line">    List&lt;XWPFPictureData&gt; picList = document.getAllPictures();</div><div class="line">    for (XWPFPictureData pic : picList) &#123;</div><div class="line">        System.out.println(pic.getPictureType() + file.separator + pic.suggestFileExtension()+file.separator+pic.getFileName());</div><div class="line">        byte[] bytev = pic.getData();</div><div class="line">        FileOutputStream fos = new FileOutputStream(&quot;d:\\&quot;+pic.getFileName());</div><div class="line">        fos.write(bytev);</div><div class="line">    &#125;</div><div class="line">    fis.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6-POI读取-doc-和-docx"><a href="#6-POI读取-doc-和-docx" class="headerlink" title="6. POI读取.doc 和.docx"></a>6. POI读取.doc 和.docx</h2><h3 id="6-1-HWPF和XWPF"><a href="#6-1-HWPF和XWPF" class="headerlink" title="6.1 HWPF和XWPF"></a>6.1 HWPF和XWPF</h3><p>HWPF：<strong>MS－Word 97-2003(.doc)</strong>，基于BIFF8格式的JAVA接口。只支持.doc文件简单的操作，读写能力有限。本API为POI项目早期开发，很不幸的 是主要负责HWPF模块开发的工程师已经离开Apache组织，现在该模块没有人维护、更新、完善。 </p>
<p>XWPF：<strong>MS－Word 2007+(.docx)</strong>，基于OOXML格式的JAVA接口。较HWPF功能完善。 </p>
<h3 id="6-2-HSSF和XSSF"><a href="#6-2-HSSF和XSSF" class="headerlink" title="6.2 HSSF和XSSF"></a>6.2 HSSF和XSSF</h3><p>HSSF：<strong>MS－Excel 97-2003（.xls）</strong>，基于BIFF8格式的JAVA接口。 </p>
<p>XSSF：<strong>MS－Excel 2007+(.xlsx)</strong>，基于OOXML格式的JAVA接口。 </p>
<p>具体见： <a href="http://blog.csdn.net/qq_20389175/article/details/44058209" target="_blank" rel="external">POI读取.doc 和.docx的区别</a></p>
<p>另外很好的例子地址：<a href="http://www.cnblogs.com/unruly/p/7552998.html" target="_blank" rel="external">http://www.cnblogs.com/unruly/p/7552998.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Apache的POI是一种流行的API，允许程序员创建，修改和使用显示Java程序的MS-Office文件。它是开发和Apache软件基金会的分布式设计或修改使用Java程序MS-Office文件的开源库。它包含的类和方法来将用户输入的数据或文件到MS-Office文档解码
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="poi" scheme="http://yoursite.com/tags/poi/"/>
    
  </entry>
  
  <entry>
    <title>程序中的返回码</title>
    <link href="http://yoursite.com/2017/11/07/%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E8%BF%94%E5%9B%9E%E7%A0%81/"/>
    <id>http://yoursite.com/2017/11/07/程序中的返回码/</id>
    <published>2017-11-07T08:09:04.000Z</published>
    <updated>2017-11-07T08:34:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP状态码可以指明请求是否成功，还可以揭示请求失败的确切原因，是前后端进行“交流”的重要语言。在实际开发过程中，存在着对不同状态码应用场景不清楚，如何正确抛出合适的状态码的问题，使得前端开发人员不能很好的获取发起请求后后台的反应。本文旨在通过实际应用对现业务涉及的状态码进行探究记录，为以后开发中遇到类似问题作个参考。</p>
<h2 id="1-查询一个资源"><a href="#1-查询一个资源" class="headerlink" title="1. 查询一个资源"></a>1. 查询一个资源</h2><p>例如：GET：/v1/characters/{id}</p>
<h3 id="1-1-接口定义"><a href="#1-1-接口定义" class="headerlink" title="1.1 接口定义"></a>1.1 接口定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public interface CharacterService &#123;</div><div class="line">    @GET</div><div class="line">    @Path(&quot;&#123;id&#125;&quot;)</div><div class="line">    @ApiOperation(value = &quot;根据人物id查询人物详情&quot;, notes = &quot;根据人物id查询人物详情&quot;, response = CharacterDTO.class, tags = &#123;&quot;CharacterService&quot;,&#125;)</div><div class="line">    @ApiResponses(value = &#123;</div><div class="line">            @ApiResponse(code = 204, message = &quot;没有数据&quot;),</div><div class="line">            @ApiResponse(code = 404, message = &quot;@06404:请求参数错误&quot;),</div><div class="line">            @ApiResponse(code = 500, message = &quot;@06500:服务器异常&quot;)&#125;)</div><div class="line">    CharacterDTO getCharacterById(@ApiParam(value = &quot;人物ID&quot;, required = true) @NotNull(message = &quot;CharacterID must be not null&quot;) @PathParam(&quot;id&quot;) Long id);</div></pre></td></tr></table></figure>
<h3 id="1-2-接口实现"><a href="#1-2-接口实现" class="headerlink" title="1.2 接口实现"></a>1.2 接口实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public CharacterDTO getCharacterById(Long characterId) &#123;</div><div class="line">        CharacterDTO characterDTO = null;</div><div class="line">        try&#123;</div><div class="line">            Character character = characterRepository.findByIdAndStatus(characterId, Status.VALID);</div><div class="line">            if (null == character)&#123;</div><div class="line">                return null;</div><div class="line">               //此处return null表示查询请求正确，但是没有资源，不抛异常，返回码204，表示没有数据。</div><div class="line">               //LOGGER.error(&quot;can not query character from db and character is: &quot; + characterId);</div><div class="line">               // throw new WebApplicationException(ScriptsTranslationReturnCode.NOT_FOUND_MODEL, &quot;can not find character&quot;);</div><div class="line">            &#125;</div><div class="line">            return beanMapper.map(character,CharacterDTO.class);</div><div class="line">        &#125; catch (WebApplicationException we)&#123;</div><div class="line">            LOGGER.error(we.getMessage(),we);</div><div class="line">            throw we;</div><div class="line">        &#125; catch (Exception e)&#123;</div><div class="line">            LOGGER.error(&quot;query character information by id error&quot;,e);</div><div class="line">            throw new WebApplicationException(ScriptsTranslationReturnCode.SERVICE_EXCEPTION, &quot;service exception&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>参数正确请求得到一个资源，返回200；</li>
<li>参数正确资源不存在，返回204，或者404；</li>
<li>参数类型错误（其他应该返回400），返回404，路径斜杠后的参数错误不会返回400.</li>
</ul>
<h2 id="2-查询一个资源，该资源可能关联其他子资源。"><a href="#2-查询一个资源，该资源可能关联其他子资源。" class="headerlink" title="2. 查询一个资源，该资源可能关联其他子资源。"></a>2. 查询一个资源，该资源可能关联其他子资源。</h2><p>例如：GET: {id}/lines-info</p>
<h3 id="2-1-接口定义"><a href="#2-1-接口定义" class="headerlink" title="2.1 接口定义"></a>2.1 接口定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@GET</div><div class="line">    @Path(&quot;&#123;id : \\d+&#125;/device-models&quot;)</div><div class="line">    @ApiOperation(value = &quot;根据镜像id得到终端型号列表&quot;, notes = &quot;根据镜像id得到终端型号列表&quot;, response = SimpleImageContentDTO.class, responseContainer = &quot;List&quot;, tags=&#123; &quot;image content&quot;&#125;)</div><div class="line">    @ApiResponses(value = &#123;</div><div class="line">            @ApiResponse(code = 200, message = &quot;OK&quot;, response = DeviceModelDTO.class, responseContainer = &quot;List&quot;),</div><div class="line">            @ApiResponse(code = 204, message = &quot;没有数据&quot;),</div><div class="line">            @ApiResponse(code = 422, message = &quot;06450：无法处理的镜像资源&quot;, responseContainer = &quot;Object&quot;),</div><div class="line">            @ApiResponse(code = 500, message = &quot;06500：服务异常&quot;, responseContainer = &quot;Object&quot;) &#125;)</div><div class="line">    List&lt;DeviceModelDTO&gt; queryDeviceModelsById(@ApiParam(value = &quot;镜像id&quot;,required = true) @NotNull(message = &quot;The image content id must not be null&quot;) @PathParam(&quot;id&quot;) Long id);</div></pre></td></tr></table></figure>
<h3 id="2-2-接口实现"><a href="#2-2-接口实现" class="headerlink" title="2.2 接口实现"></a>2.2 接口实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">    public List&lt;DeviceModelDTO&gt; queryDeviceModelsById(Long id) &#123;</div><div class="line">        try&#123;</div><div class="line">            ImageContent imageContent = imageContentRepository.findByIdAndStatus(id, Status.VALID);</div><div class="line">            if (imageContent==null)&#123;</div><div class="line">                throw new UnprocessableEntityException(TerminalDeviceReturnCode.UNPROCESSABLE_IMAGE_CONTENT,&quot;image content not found&quot;);</div><div class="line">            &#125;</div><div class="line">            List&lt;DeviceModel&gt; deviceModelList = deviceModelRepository.queryDeviceModelsByImageContentId(id);</div><div class="line">            if (CollectionUtils.isEmpty(deviceModelList))&#123;</div><div class="line">                return null;</div><div class="line">            &#125;</div><div class="line">            return beanMapper.mapAsList(deviceModelList,DeviceModelDTO.class);</div><div class="line">        &#125; catch (WebApplicationException we) &#123;</div><div class="line">            LOGGER.error(&quot;query device models by Id error!&quot; ,we);</div><div class="line">            throw we;</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            LOGGER.error(&quot;query device models by Id error!&quot; ,e);</div><div class="line">            throw new WebApplicationException(TerminalDeviceReturnCode.SERVICE_EXCEPTION, &quot;service exception!&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>根据A资源查询B资源</p>
<ul>
<li>正确查询，返回200；</li>
<li>根据查不到A资源信息，返回422，抛异常UnprocessableException。</li>
<li>可以查到A资源，但是根据A资源查不到B资源，返回204或者404；</li>
</ul>
<h2 id="3-修改一个资源"><a href="#3-修改一个资源" class="headerlink" title="3. 修改一个资源"></a>3. 修改一个资源</h2><p>例如：PUT:/translation-lines-info/{id}</p>
<h3 id="3-1接口定义"><a href="#3-1接口定义" class="headerlink" title="3.1接口定义"></a>3.1接口定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@PUT</div><div class="line">    @Path(&quot;&#123;id&#125;&quot;)</div><div class="line">    @ApiOperation(value = &quot;修改人物信息&quot;, notes = &quot;修改人物信息&quot;, response = CharacterDTO.class, tags = &#123;&quot;CharacterService&quot;,&#125;)</div><div class="line">    @ApiResponses(value = &#123;</div><div class="line">            @ApiResponse(code = 201, message = &quot;修改成功&quot;),</div><div class="line">            @ApiResponse(code = 404, message = &quot;@06404：人物信息不存在&quot;),</div><div class="line">            @ApiResponse(code = 400, message = &quot;@06400: 请求参数错误&quot;),</div><div class="line">            @ApiResponse(code = 409, message = &quot;@06411:人物名称冲突&quot;),</div><div class="line">            @ApiResponse(code = 500, message = &quot;@06500：服务异常&quot;)&#125;)</div><div class="line">    CharacterDTO modifyCharacter(@ApiParam(value = &quot;人物id&quot;, required = true) @NotNull(message = &quot;parameter must not be null&quot;) @PathParam(&quot;id&quot;) Long id, @NotNull(message = &quot;parameter must be not null&quot;) @ApiParam(value = &quot;人物信息&quot;, required = true) CharacterDTO characterDTO);</div></pre></td></tr></table></figure>
<h3 id="3-2-接口实现"><a href="#3-2-接口实现" class="headerlink" title="3.2 接口实现"></a>3.2 接口实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public CharacterDTO modifyCharacter(Long id, CharacterDTO characterDTO) &#123;</div><div class="line">        try &#123;</div><div class="line">            Character character = characterRepository.findByIdAndStatus(id,Status.VALID);</div><div class="line">            if(character == null)&#123;</div><div class="line">                throw new WebApplicationException(ScriptsTranslationReturnCode.NOT_FOUND_MODEL, &quot;modify character error! can not found character info exception!&quot;);</div><div class="line">            &#125;</div><div class="line">            String chName = characterDTO.getName();</div><div class="line">            String enName = characterDTO.getEnglishName();</div><div class="line">            Long dramaId = characterDTO.getDramaId();</div><div class="line">            if(org.springframework.util.StringUtils.isEmpty(chName) || org.springframework.util.StringUtils.isEmpty(enName) || dramaId == null)&#123;</div><div class="line">                throw new ClientErrorException(HttpStatus.BAD_REQUEST, ScriptsTranslationReturnCode.PARAM_ERROR, &quot; chname or enname or dramaid is empty!&quot;);</div><div class="line">            &#125;</div><div class="line">            List&lt;Character&gt; chNamesOrEnNames = characterRepository.findOtherIdExistNames(chName,enName,id,dramaId);</div><div class="line">            if(chNamesOrEnNames.size() &gt; 0)&#123;</div><div class="line">                throw new ClientErrorException(HttpStatus.CONFLICT, ScriptsTranslationReturnCode.DRAMA_ADD_OR_UPDATE_CHARACTER_NAME_CONFICT, &quot; chname or enname conflict&quot;);</div><div class="line">            &#125;</div><div class="line">            Character modifyCharacher = fillingModifyParams(characterDTO, character);</div><div class="line">            Character modifyResult = characterRepository.saveAndFlush(modifyCharacher);</div><div class="line">            return beanMapper.map(modifyResult, CharacterDTO.class);</div><div class="line">        &#125;catch (ClientErrorException we)&#123;</div><div class="line">            LOGGER.error(we.getMessage(),we);</div><div class="line">            throw we;</div><div class="line">        &#125; catch (Exception e)&#123;</div><div class="line">            LOGGER.error(&quot;modify character error&quot;,e);</div><div class="line">            throw new WebApplicationException(ScriptsTranslationReturnCode.SERVICE_EXCEPTION, &quot;service exception&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>修改成功返回201；</li>
<li>根据路径上的id查询人物信息没查到，返回404；</li>
<li>如果路径上的id为非数字类型，返回404；</li>
<li>如果dto里的类型错误，返回400（body和？后的参数类型错误，返回400），抛出BadRequestException；</li>
<li>修改的数据与原数据产生了冲突（根据业务定义），返回409，抛出ClienErrorException。</li>
</ul>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>现在涉及到的状态码有以下几个：</p>
<ul>
<li>200：用于成功查询到信息。</li>
<li>201：用于修改或添加成功。</li>
<li>204：用于删除成功，也可用于找不到资源。</li>
<li>400：body和“？”后的参数类型错误，抛出BadRequestException。</li>
<li>404：“/”后的参数错误，或者找不到资源。</li>
<li>409：修改的数据与原数据产生了冲突（根据业务定义），返回409，抛出ClienErrorException。</li>
<li>422：当用户针对不存在的资源进行操作时，则返回404，当用户传入无效字段，则返回422，抛出异常UnprocessableException。<br>例如：<br>修改A资源，但A资源不存在，则返回404；<br>根据A资源，添加A与B资源的关系，此时操作主体是A与B资源的关系表，当A和B都不存在时，则是属于创建某个资源，发生了一个验证错误，此时应该返回422。</li>
</ul>
<hr>
<h2 id="附1-常用http状态码"><a href="#附1-常用http状态码" class="headerlink" title="附1. 常用http状态码"></a>附1. 常用http状态码</h2><p>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。</p>
<ul>
<li><blockquote>
<p>200 OK - [<strong>GET</strong>]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）（在编程中，一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。）</p>
</blockquote>
</li>
<li><blockquote>
<p>201 CREATED - [<strong>POST/PUT/PATCH</strong>]：用户新建或修改数据成功。</p>
</blockquote>
</li>
<li><blockquote>
<p>202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</p>
</blockquote>
</li>
<li><blockquote>
<p>204 NO CONTENT - [DELETE]：用户删除数据成功。</p>
</blockquote>
</li>
<li><blockquote>
<p>400 INVALID REQUEST - [<strong>POST/PUT/PATCH</strong>]：用户请求错误，参数格式不符合调用API规定、资源不存在、语义参数服务端无法处理等</p>
</blockquote>
</li>
<li><blockquote>
<p>401 Unauthorized - [*] ：表示用户<strong>没有权限</strong>（令牌、用户名、密码错误）。</p>
</blockquote>
</li>
<li><blockquote>
<p>403 Forbidden - [*]：表示用户<strong>得到授权</strong>（与401错误相对），但是<strong>访问是被禁止</strong>的。</p>
</blockquote>
</li>
<li><blockquote>
<p>404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，<strong>服务器没有进行操作</strong>，该操作是幂等的。</p>
</blockquote>
</li>
<li><blockquote>
<p>406 Not Acceptable - [<strong>GET</strong>]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</p>
</blockquote>
</li>
<li><blockquote>
<p>410 Gone -[<strong>GET</strong>]：用户请求的资源被永久删除，且不会再得到的。</p>
</blockquote>
</li>
<li><blockquote>
<p>422 Unprocesable entity - [<strong>POST/PUT/PATCH</strong>]：<strong>当创建一个对象时，发生一个验证错误。</strong></p>
</blockquote>
</li>
<li><blockquote>
<p>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</p>
</blockquote>
</li>
</ul>
<h2 id="附2-服务接口方法名规"><a href="#附2-服务接口方法名规" class="headerlink" title="附2. 服务接口方法名规"></a>附2. 服务接口方法名规</h2><ul>
<li><blockquote>
<p>add开头方法代表添加数据：add</p>
</blockquote>
</li>
<li><blockquote>
<p>modify开头方法代表修改业务数据：modify</p>
</blockquote>
</li>
<li><blockquote>
<p>query开头方法代表查询多条数据：queryByCondition，queryByIDs</p>
</blockquote>
</li>
<li><blockquote>
<p>get开头方法代表返回一条数据：getByID</p>
</blockquote>
</li>
<li><blockquote>
<p>delete开头方法代表删除数据：deleteByID</p>
</blockquote>
</li>
<li><blockquote>
<p>提供服务的方法不要有重载</p>
</blockquote>
</li>
<li><blockquote>
<p>方法参数不要超过5个，多于5个请使用包装类（DTO）</p>
</blockquote>
</li>
<li><blockquote>
<p>方法参数类型不能使用int/char/double/long/boolean/short/float，必须换成对应Integer/Character/Double/Long/Boolean/Short/Float类型</p>
</blockquote>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTTP状态码可以指明请求是否成功，还可以揭示请求失败的确切原因，是前后端进行“交流”的重要语言。在实际开发过程中，存在着对不同状态码应用场景不清楚，如何正确抛出合适的状态码的问题，使得前端开发人员不能很好的获取发起请求后后台的反应。本文旨在通过实际应用对现业务涉及的状态码
    
    </summary>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>swagger常用注解</title>
    <link href="http://yoursite.com/2017/07/18/swagger%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2017/07/18/swagger常用注解记录/</id>
    <published>2017-07-18T05:35:10.000Z</published>
    <updated>2017-07-19T05:14:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>翻译自<a href="https://github.com/swagger-api/swagger-core/wiki/Annotations-1.5.X#apiimplicitparam-apiimplicitparams" target="_blank" rel="external">https://github.com/swagger-api/swagger-core/wiki/Annotations-1.5.X#apiimplicitparam-apiimplicitparams</a>.<br>水平有限，不保证翻译准确，仅做自己学习记录之用。</p>
<h2 id="Api资源声明"><a href="#Api资源声明" class="headerlink" title="Api资源声明"></a>Api资源声明</h2><h3 id="Api"><a href="#Api" class="headerlink" title="@Api"></a>@Api</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Path(&quot;/pet&quot;)</div><div class="line">@Api(value = &quot;pet&quot;, authorizations = &#123;</div><div class="line">      @Authorization(value=&quot;sampleoauth&quot;, scopes = &#123;&#125;)</div><div class="line">    &#125;)</div><div class="line">@Produces(&#123;&quot;application/json&quot;, &quot;application/xml&quot;&#125;)</div><div class="line">public class PetResource &#123;</div><div class="line"> ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个例子中我们可以看出，@Api标签下的所有操作都属于pet类（所有这些操作可以放在一起）。Swagger会选用@Produces标签下的值，但是你也可以根据需要进行覆盖。@Api也可以用于声明资源级别的权限。这些声明可以作用于其下的所有操作，但是这些操作也可以根据需要被重写。<br>除了用value()，也可以使用tags()来为操作设置多个tags，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@Api(tags = &#123;&quot;external_info&quot;,&quot;user_info&quot;&#125;)</div></pre></td></tr></table></figure>
<p>此时，如果存在value()属性，将会被忽略。<br>布尔属性hidden可以用来完全隐藏一个@Api。当使用子资源删除不必要的工件这尤其有用。<br>更多请参见：<a href="http://docs.swagger.io/swagger-core/current/apidocs/index.html?io/swagger/annotations/Api.html" target="_blank" rel="external">javadocs</a>。</p>
<h2 id="操作声明"><a href="#操作声明" class="headerlink" title="操作声明"></a>操作声明</h2><h3 id="ApiOperation"><a href="#ApiOperation" class="headerlink" title="@ApiOperation"></a>@ApiOperation</h3><p>@ApiOperation用于声明单个操作。该操作应该是路径与HTTP方法的唯一结合。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@GET</div><div class="line"> @Path(&quot;/findByStatus&quot;)</div><div class="line"> @ApiOperation(value = &quot;Finds Pets by status&quot;,</div><div class="line">    notes = &quot;Multiple status values can be provided with comma seperated strings&quot;,</div><div class="line">    response = Pet.class,</div><div class="line">    responseContainer = &quot;List&quot;)</div><div class="line"> public Response findPetsByStatus(...) &#123; ... &#125;</div></pre></td></tr></table></figure>
<ul>
<li><blockquote>
<p>value属性是对这个API的简短描述，最后控制在120个字符以内。</p>
</blockquote>
</li>
<li><blockquote>
<p>notes属于可以对操作进行详细说明。</p>
</blockquote>
</li>
<li><blockquote>
<p>response是方法的返回类型，需要注意的是实际的方法声明返回的是一个通用的JAX-RS的类，而不是实际发送给用户的响应。如果返回的对象是实际的结果，它可以不用背声明直接被使用。</p>
</blockquote>
</li>
<li><blockquote>
<p>responseContainer用于返回一个list。记住Java具有类型擦除功能，因此在返回结果中使用泛型可能导致结果不能被正确解析，所以response应该被直接使用。</p>
</blockquote>
</li>
<li><blockquote>
<p>@Get和@Path标签分别用于操作HTTP方法和告诉我们方法的路径。</p>
</blockquote>
</li>
</ul>
<p>以上生成的API为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&quot;/pet/findByStatus&quot;: &#123;</div><div class="line">  &quot;get&quot;: &#123;</div><div class="line">    &quot;tags&quot;: [</div><div class="line">      &quot;pet&quot;</div><div class="line">    ],</div><div class="line">    &quot;summary&quot;: &quot;Finds Pets by status&quot;,</div><div class="line">    &quot;description&quot;: &quot;Multiple status values can be provided with comma seperated strings&quot;,</div><div class="line">    &quot;responses&quot;: &#123;</div><div class="line">      &quot;200&quot;: &#123;</div><div class="line">        &quot;description&quot;: &quot;successful operation&quot;,</div><div class="line">        &quot;schema&quot;: &#123;</div><div class="line">          &quot;type&quot;: &quot;array&quot;,</div><div class="line">          &quot;items&quot;: &#123;</div><div class="line">            &quot;$ref&quot;: &quot;#/definitions/Pet&quot;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      ...</div></pre></td></tr></table></figure>
<p>更多请参见：<a href="http://docs.swagger.io/swagger-core/current/apidocs/index.html?io/swagger/annotations/Api.html" target="_blank" rel="external">javadocs</a>。</p>
<h3 id="ApiResponses-ApiResponse"><a href="#ApiResponses-ApiResponse" class="headerlink" title="@ApiResponses, @ApiResponse"></a>@ApiResponses, @ApiResponse</h3><p>众所周知可以使用HTTP状态码返回错误或成功信息。返回的类型已经在@ApiOperation定义了，其余的返回码可以在@ApiResponses, @ApiResponse标签中描述。</p>
<p>@ApiResponse用于描述一个操作的可能返回结果。它不能直接被方法，类或者接口使用而需要作为一列值被@ApiResponses包含。<br>如果响应伴随了一个body，那这个body模型也可以被描述。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@ApiResponses(value = &#123; </div><div class="line">      @ApiResponse(code = 400, message = &quot;Invalid ID supplied&quot;, </div><div class="line">                   responseHeaders = @ResponseHeader(name = &quot;X-Rack-Cache&quot;, description = &quot;Explains whether or not a cache was used&quot;, response = Boolean.class)),</div><div class="line">      @ApiResponse(code = 404, message = &quot;Pet not found&quot;) &#125;)</div><div class="line">  public Response getPetById(...) &#123;...&#125;</div></pre></td></tr></table></figure>
<h3 id="Authorization-AuthorizationScope"><a href="#Authorization-AuthorizationScope" class="headerlink" title="@Authorization, @AuthorizationScope"></a>@Authorization, @AuthorizationScope</h3><p>这两个标签仅仅作为@Api和@ApiOperation的输入使用，不能直接用于资源和操作。一旦在API里声明和配置了授权模式，你可以将该标签用于需要的资源或某个操作上。具体使用如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@ApiOperation(value = &quot;Add a new pet to the store&quot;, </div><div class="line">    authorizations = &#123;</div><div class="line">      @Authorization(</div><div class="line">          value=&quot;petoauth&quot;, </div><div class="line">          scopes = &#123; @AuthorizationScope(scope = &quot;add:pet&quot;) &#125;</div><div class="line">          )</div><div class="line">    &#125;</div><div class="line">  )</div><div class="line">  public Response addPet(...) &#123;...&#125;</div></pre></td></tr></table></figure>
<p>在上述例子中，我们声明addPet操作使用了授权模式，然后使用@AuthorizationScope对add:pet进行范围的调整。正如上面提到的，我们可以发现@AuthorizationScope被用作了@Authorization的一个输入，进一步可以作为@ApiOperation的输入。<br>以上生成的API为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&quot;security&quot;: [</div><div class="line">  &#123;</div><div class="line">    &quot;petoauth&quot;: [</div><div class="line">      &quot;add:pet&quot;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="ApiParam"><a href="#ApiParam" class="headerlink" title="@ApiParam"></a>@ApiParam</h2><p>@ApiParam只能作为JAX-RS参数标签使用（@PathParam, @QueryParam, @HeaderParam, @FormParam, JAX-RS 2中 @BeanParam）。当swagger-core扫描这些标签时，@ApiParam可以被用于增加更多参数的细节或者改变从代码中读取的值。<br>Swagger采用注解的value()值作为参数名，并且会基于注解设置参数类型。<br>Swagger也会使用@DefaultValue的值作为默认值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> @Path(&quot;/&#123;username&#125;&quot;)</div><div class="line"> @ApiOperation(value = &quot;Updated user&quot;,</div><div class="line">    notes = &quot;This can only be done by the logged in user.&quot;)</div><div class="line">public Response updateUser(</div><div class="line">      @ApiParam(value = &quot;name that need to be updated&quot;, required = true) @PathParam(&quot;username&quot;) String username,</div><div class="line">      @ApiParam(value = &quot;Updated user object&quot;, required = true) User user) &#123;...&#125;</div></pre></td></tr></table></figure>
<p>如上面的例子所示，我们有两个参数。第一个username是路径的一部分，另一个是User对象，上例中作为body。两个参数都将quired属性设置为了true。@PathParam，尽管是多余的，但是因为它是默认强制毕业有点，且不能被覆盖。<br>以上生成的API为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&quot;parameters&quot;: [</div><div class="line">  &#123;</div><div class="line">    &quot;name&quot;: &quot;username&quot;,</div><div class="line">    &quot;in&quot;: &quot;path&quot;,</div><div class="line">    &quot;description&quot;: &quot;name that need to be deleted&quot;,</div><div class="line">    &quot;required&quot;: true,</div><div class="line">    &quot;type&quot;: &quot;string&quot;</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    &quot;in&quot;: &quot;body&quot;,</div><div class="line">    &quot;name&quot;: &quot;body&quot;,</div><div class="line">    &quot;description&quot;: &quot;Updated user object&quot;,</div><div class="line">    &quot;required&quot;: true,</div><div class="line">    &quot;schema&quot;: &#123;</div><div class="line">      &quot;$ref&quot;: &quot;#/definitions/User&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="ApiImplicitParam-ApiImplicitParams"><a href="#ApiImplicitParam-ApiImplicitParams" class="headerlink" title="@ApiImplicitParam, @ApiImplicitParams"></a>@ApiImplicitParam, @ApiImplicitParams</h3><p>你可能希望手动对操作的参数进行描述，可能的理由有以下：</p>
<ul>
<li><blockquote>
<p>使用了没有采用JAX-RS标签的Servlets。</p>
</blockquote>
</li>
<li><blockquote>
<p>想隐藏一个参数，因为它已经被定义并且希望用完全不同的定义进行覆盖。</p>
</blockquote>
</li>
<li><blockquote>
<p>描述一个被过滤器或者其他资源优先获取的JAX-RS的实现类。</p>
</blockquote>
</li>
</ul>
<p>@ApiImplicitParams可以有多个@ApiImplicitParams进行定义多个参数,注意这个注解@ApiImplicitParam必须被包含在注解@ApiImplicitParams之内。。</p>
<p>当隐式定义多个参数时，name，dataType和paramType的定义是最重要的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@ApiImplicitParams(&#123;</div><div class="line">    @ApiImplicitParam(name = &quot;name&quot;, value = &quot;User&apos;s name&quot;, required = true, dataType = &quot;string&quot;, paramType = &quot;query&quot;),</div><div class="line">    @ApiImplicitParam(name = &quot;email&quot;, value = &quot;User&apos;s email&quot;, required = false, dataType = &quot;string&quot;, paramType = &quot;query&quot;),</div><div class="line">    @ApiImplicitParam(name = &quot;id&quot;, value = &quot;User ID&quot;, required = true, dataType = &quot;long&quot;, paramType = &quot;query&quot;)</div><div class="line">  &#125;)</div><div class="line"> public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;...&#125;</div></pre></td></tr></table></figure>
<p>在上例中，我们可以看到一个servlet定义和几个参数，dataType既可以是一个原语（primitive）也可以是一个类名。paramType可以是Swagger支持的任意类型的参数。</p>
<p>生成API为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&quot;parameters&quot;: [</div><div class="line">  &#123;</div><div class="line">    &quot;name&quot;: &quot;name&quot;,</div><div class="line">    &quot;description&quot;: &quot;User&apos;s name&quot;,</div><div class="line">    &quot;required&quot;: true,</div><div class="line">    &quot;type&quot;: &quot;string&quot;,</div><div class="line">    &quot;in&quot;: &quot;query&quot;</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    &quot;name&quot;: &quot;email&quot;,</div><div class="line">    &quot;description&quot;: &quot;User&apos;s email&quot;,</div><div class="line">    &quot;required&quot;: false,</div><div class="line">    &quot;type&quot;: &quot;string&quot;,</div><div class="line">    &quot;in&quot;: &quot;query&quot;</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    &quot;name&quot;: &quot;id&quot;,</div><div class="line">    &quot;description&quot;: &quot;User ID&quot;,</div><div class="line">    &quot;required&quot;: true,</div><div class="line">    &quot;type&quot;: &quot;integer&quot;,</div><div class="line">    &quot;format&quot;: &quot;int64&quot;,</div><div class="line">    &quot;in&quot;: &quot;query&quot;</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>ApiImplicitParam 与 ApiParam 的区别：</p>
<ul>
<li><blockquote>
<p>对Servlets或者非 JAX-RS的环境，只能使用 ApiImplicitParam。</p>
</blockquote>
</li>
<li><blockquote>
<p>在使用上，ApiImplicitParam比ApiParam具有更少的代码侵入性，只要写在方法上就可以了，但是需要提供具体的属性才能配合swagger ui解析使用。</p>
</blockquote>
</li>
<li><blockquote>
<p>ApiParam只需要较少的属性，与swagger ui配合更好。</p>
</blockquote>
</li>
</ul>
<h3 id="ResponseHeader"><a href="#ResponseHeader" class="headerlink" title="@ResponseHeader"></a>@ResponseHeader</h3><p>如果你需要描述一个响应头（response header），你可以提供的响应头的名称、描述和类型，简单地将它添加到@ApiOperation或@ApiResponse中。<br>例如在一个给出的响应中是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@ApiResponses(value = &#123; </div><div class="line">    @ApiResponse(code = 400, message = &quot;Invalid ID supplied&quot;, </div><div class="line">                 responseHeaders = @ResponseHeader(name = &quot;X-Rack-Cache&quot;, description = &quot;Explains whether or not a cache was used&quot;, response = Boolean.class)),</div><div class="line">    @ApiResponse(code = 404, message = &quot;Pet not found&quot;) &#125;)</div><div class="line">public Response getPetById(...) &#123;...&#125;</div></pre></td></tr></table></figure>
<h2 id="Model声明"><a href="#Model声明" class="headerlink" title="Model声明"></a>Model声明</h2><h3 id="ApiModel"><a href="#ApiModel" class="headerlink" title="@ApiModel"></a>@ApiModel</h3><p>Swagger-core基于引用API内省的方式构建模型定义。@ApiModel允许操作模型的元数据从一个简单的描述或名称变为一个多态的定义。<br>最基础的功能如下，使用@ApiModel改变一个模型的名称并为其添加描述：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@ApiModel(value=&quot;DifferentModel&quot;, description=&quot;Sample model for the documentation&quot;)</div><div class="line">class OriginalModel &#123;...&#125;</div></pre></td></tr></table></figure>
<p>上例我们改变模型的名称，输出结果为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&quot;DifferentModel&quot;: &#123;</div><div class="line">      &quot;description&quot;: &quot;Sample model for the documentation&quot;,</div><div class="line">      ...</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>还可以使用@ApiModel通过指定子类型实现模型组成:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@ApiModel(value = &quot;Pet&quot;, subTypes = &#123;Cat.class&#125;)</div><div class="line">public class Pet &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ApiModelProperty"><a href="#ApiModelProperty" class="headerlink" title="@ApiModelProperty"></a>@ApiModelProperty</h3><p>尽管swagger-core会内省字段和setters/getters，它也可以读取和处理JAXB注释。@ApiModelProperty允许通过控制Swagger-specific定义被允许的值和增加的注解。它还提供了额外的过滤性能，以防你在某些情况下想隐藏属性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@ApiModelProperty(value = &quot;pet status in the store&quot;, allowableValues = &quot;available,pending,sold&quot;)</div><div class="line">public String getStatus() &#123;</div><div class="line">  return status;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上例为一个模型熟悉添加了描述，此外我们可以发现，虽然status是一个String类型，但是我们证明了他只有三个可能值。API输出为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&quot;properties&quot;: &#123;</div><div class="line">        ...,</div><div class="line">        &quot;status&quot;: &#123;</div><div class="line">          &quot;type&quot;: &quot;string&quot;,</div><div class="line">          &quot;description&quot;: &quot;pet status in the store&quot;,</div><div class="line">          &quot;enum&quot;: [</div><div class="line">            &quot;available&quot;,</div><div class="line">            &quot;pending&quot;,</div><div class="line">            &quot;sold&quot;</div><div class="line">          ]</div><div class="line">        &#125;</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<h2 id="Swagger-Definition"><a href="#Swagger-Definition" class="headerlink" title="Swagger Definition"></a>Swagger Definition</h2><h3 id="SwaggerDefinition"><a href="#SwaggerDefinition" class="headerlink" title="@SwaggerDefinition"></a>@SwaggerDefinition</h3><p>SwaggerDefinition注解提供了许多与Swagger对象的顶级属性相关的属性，可以在自动生成的定义里设置这些属性。SwaggerDefinition注解可以加在任意类上，会在Swagger自动配置过程中国被扫描。此外，它可以用于标记/配置接口上，而不必须用于JAX-RS API类，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">@SwaggerDefinition(</div><div class="line">        info = @Info(</div><div class="line">                description = &quot;Gets the weather&quot;,</div><div class="line">                version = &quot;V12.0.12&quot;,</div><div class="line">                title = &quot;The Weather API&quot;,</div><div class="line">                termsOfService = &quot;http://theweatherapi.io/terms.html&quot;,</div><div class="line">                contact = @Contact(</div><div class="line">                   name = &quot;Rain Moore&quot;, </div><div class="line">                   email = &quot;rain.moore@theweatherapi.io&quot;, </div><div class="line">                   url = &quot;http://theweatherapi.io&quot;</div><div class="line">                ),</div><div class="line">                license = @License(</div><div class="line">                   name = &quot;Apache 2.0&quot;, </div><div class="line">                   url = &quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</div><div class="line">                )</div><div class="line">        ),</div><div class="line">        consumes = &#123;&quot;application/json&quot;, &quot;application/xml&quot;&#125;,</div><div class="line">        produces = &#123;&quot;application/json&quot;, &quot;application/xml&quot;&#125;,</div><div class="line">        schemes = &#123;SwaggerDefinition.Scheme.HTTP, SwaggerDefinition.Scheme.HTTPS&#125;,</div><div class="line">        tags = &#123;</div><div class="line">                @Tag(name = &quot;Private&quot;, description = &quot;Tag used to denote operations as private&quot;)</div><div class="line">        &#125;, </div><div class="line">        externalDocs = @ExternalDocs(value = &quot;Meteorology&quot;, url = &quot;http://theweatherapi.io/meteorology.html&quot;)</div><div class="line">)</div><div class="line">public interface TheWeatherApiConfig &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上例所示的所有属性都会使相关元数据被添加到生成的swagger.json/swagger.yaml文件中。<br>如果添加了多个@SwaggerDefinition注解，他们会被按照顺序聚合——当出现重复的属性，将会出现覆盖。</p>
<h3 id="Info"><a href="#Info" class="headerlink" title="@Info"></a>@Info</h3><p>@Info注释添加通用的元数据属性定义——Info对象对应的规范。例如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@SwaggerDefinition(</div><div class="line">        info = @Info(</div><div class="line">                description = &quot;Gets the weather&quot;,</div><div class="line">                version = &quot;V12.0.12&quot;,</div><div class="line">                title = &quot;The Weather API&quot;,</div><div class="line">                termsOfService = &quot;http://theweatherapi.io/terms.html&quot;,</div><div class="line">                ...</div><div class="line">        ),</div><div class="line">...</div></pre></td></tr></table></figure>
<h3 id="Contact"><a href="#Contact" class="headerlink" title="@Contact"></a>@Contact</h3><p>@Contact标签为@Info添加了contract属性——与Contract对象一样的规范。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@SwaggerDefinition(</div><div class="line">        info = @Info(</div><div class="line">                ...</div><div class="line">                contact = @Contact(</div><div class="line">                   name = &quot;Rain Moore&quot;, </div><div class="line">                   email = &quot;rain.moore@theweatherapi.io&quot;, </div><div class="line">                   url = &quot;http://theweatherapi.io&quot;</div><div class="line">                ),</div><div class="line">                ...</div><div class="line">        ),</div><div class="line">...</div></pre></td></tr></table></figure>
<h3 id="License"><a href="#License" class="headerlink" title="@License"></a>@License</h3><p>@License标签为@Info添加了license属性——与license对象一样的规范。例如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@SwaggerDefinition(</div><div class="line">        info = @Info(</div><div class="line">                ...</div><div class="line">                license = @License(</div><div class="line">                   name = &quot;Apache 2.0&quot;, </div><div class="line">                   url = &quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</div><div class="line">                )</div><div class="line">        ),</div><div class="line">...</div></pre></td></tr></table></figure>
<h3 id="Extension"><a href="#Extension" class="headerlink" title="@Extension"></a>@Extension</h3><p>extension标签允许为Swagger定义添加扩展属性。目前支持在@ApiOperation @Info和@Tag注释。有两种方法可以使用它:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">   extensions = &#123;</div><div class="line">       @Extension(properties = &#123;</div><div class="line">           @ExtensionProperty(name = &quot;test1&quot;, value = &quot;value1&quot;),</div><div class="line">           @ExtensionProperty(name = &quot;test2&quot;, value = &quot;value2&quot;)</div><div class="line">       &#125;)</div><div class="line">    &#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>这种方法得到的是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">   &quot;x-test1&quot; : &quot;value1&quot;,</div><div class="line">   &quot;x-test2&quot; : &quot;value2&quot;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>如果注释中没有明确说明，属性名会自动加上前缀“x-”。<br>另外一种方法可以命名扩展属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">   extensions = &#123; </div><div class="line">       @Extension( name = &quot;my-extension&quot;, properties = &#123;</div><div class="line">           @ExtensionProperty(name = &quot;test1&quot;, value = &quot;value1&quot;),</div><div class="line">           @ExtensionProperty(name = &quot;test2&quot;, value = &quot;value2&quot;)</div><div class="line">       &#125;)</div><div class="line">    &#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>会得到将扩展属性包裹在json对象中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">   &quot;x-my-extension&quot; : &#123;</div><div class="line">      &quot;test1&quot; : &quot;value1&quot;,</div><div class="line">      &quot;test2&quot; : &quot;value2&quot;</div><div class="line">   &#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<h3 id="ExtensionProperty"><a href="#ExtensionProperty" class="headerlink" title="@ExtensionProperty"></a>@ExtensionProperty</h3><p>这并不是一个独立的扩展属性，用法详见@Extension的例子。</p>
<h2 id="定制Swagger定义"><a href="#定制Swagger定义" class="headerlink" title="定制Swagger定义"></a>定制Swagger定义</h2><p>如果现有的标签都不适用，你需要自定义标签，你可以使用Swagger引擎，ReaderListener提供了相关回调函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public interface ReaderListener &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Called before the Swagger definition gets populated from scanned classes. Use this method to</div><div class="line">     * pre-process the Swagger definition before it gets populated.</div><div class="line">     *</div><div class="line">     * @param reader the reader used to read annotations and build the Swagger definition</div><div class="line">     * @param swagger the initial swagger definition</div><div class="line">     */</div><div class="line"></div><div class="line">    void beforeScan(Reader reader, Swagger swagger);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Called after a Swagger definition has been populated from scanned classes. Use this method to</div><div class="line">     * post-process Swagger definitions.</div><div class="line">     *</div><div class="line">     * @param reader the reader used to read annotations and build the Swagger definition</div><div class="line">     * @param swagger the configured Swagger definition</div><div class="line">     */</div><div class="line"></div><div class="line">    void afterScan(Reader reader, Swagger swagger);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当类在进行资源扫描中发现该注释，自定义的注释会被被实例化并进行相应的调用。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class BasePathModifier implements ReaderListener &#123;</div><div class="line">    void beforeScan(Reader reader, Swagger swagger)&#123;&#125;</div><div class="line"></div><div class="line">    void afterScan(Reader reader, Swagger swagger)&#123;</div><div class="line">        swagger.setBasePath( System.getProperty( &quot;swagger.basepath&quot;, swagger.getBasePath() ));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;翻译自&lt;a href=&quot;https://github.com/swagger-api/swagger-core/wiki/Annotations-1.5.X#apiimplicitparam-apiimplicitparams&quot; target=&quot;_blank&quot; rel=&quot;e
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="swagger" scheme="http://yoursite.com/tags/swagger/"/>
    
  </entry>
  
  <entry>
    <title>devicemapper设置direct-lvm踩坑记</title>
    <link href="http://yoursite.com/2017/04/11/devicemapper%E8%AE%BE%E7%BD%AEdirect-LVM%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/04/11/devicemapper设置direct-LVM踩坑记/</id>
    <published>2017-04-11T12:44:52.000Z</published>
    <updated>2017-04-12T07:49:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇碎碎念，想到哪儿就写到哪儿。。<br>官网上说：<em>Docker hosts running the devicemapper storage driver default to a configuration mode known as loop-lvm. This mode uses sparse files to build the thin pool used by image and container snapshots. The mode is designed to work out-of-the-box with no additional configuration. However, production deployments should not run under loop-lvm mode.</em><br>所有的资料都说生产环境中建议用direct-lvm进行存储。网上说优点是便于扩容，备份和数据的迁移，还有的说性能更好。<br>扩容，备份和数据易迁移是使用外挂硬盘的优点，并不能解释为什么devicemapper用direct-lvm存储模式被官方强烈推荐。甚至在第一次启动docker的时候如果devicemapper不是用direct-lvm还会被警告：<br><em>WARNING: Usage of loopback devices is strongly discouraged for production use. Either use <code>–storage-opt dm.thinpooldev</code> or use <code>–storage-opt dm.no_warn_on_loop_devices=true</code> to suppress this warning.</em><br>性能好这个优点有一定道理，网上有人对此做过性能的测试<a href="http://blog.csdn.net/gushenbusi/article/details/49494629" target="_blank" rel="external">http://blog.csdn.net/gushenbusi/article/details/49494629</a>，得出结论“direct-lvm直接使用dm-thin内核模块，直接使用raw分区，在高负载和高密度下具有性能优势。”可能我没有在高负载高密度下使用docker的需求，所以使用direct-lvm的性能优势对我作用也不大。<br>在实际使用过程中碰到的问题是：在centos7.1下使用docker1.8.1，devicemapper的loop-lvm模式。某天发现容器的空间被占满了，于是便将文件清掉。然后发现了奇怪的情况：删除容器内的文件，宿主机并不会释放空间，容器空间依然是被占满的。在对精简池（thin pool），宿主机磁盘，和容器限制大小进行了改变，并在docker1.8.2和docker1.12.6下分别进行实验，发现有以下情况：<br> 在centos7.1下，docker1.8.2和1.12.6容器内文件的变化对宿主机存储空间的影响基本一致：</p>
<blockquote>
<ul>
<li>容器内内生成文件，再删除，宿主机不会释放空间，需要删除容器才会释放空间。</li>
<li>容器内生成文件，再删除，宿主机不会释放空间，再生成文件，宿主机重新可能会重新分配空间；也可能不会重新分配空间。</li>
<li>docker1.8.2下:<br>资源池预设空间小于宿主机磁盘大小，在容器中生成文件大于容器预设大小时，无法写入文件，但容器不会崩。<br>资源池预设空间大于宿主机磁盘大小，在容器中生成文件大于容器预设大小时，无法写入文件，但容器崩，退出后将无法再启动容器。<br>docker1.12.6下,当容器中生成文件大于容器预设大小时，无法写入文件，且容器崩溃。</li>
<li>当资源池和宿主机的预设空间大于宿主机空间，在容器中生成文件大于容器预设大小时，宿主机提示磁盘空间占满，docker1.8.2导致了宿主机崩溃，docker1.12.6则不会导致宿主机崩溃，但删除容器后不会释放空间，需要删除devicemapper文件夹。</li>
</ul>
</blockquote>
<p><a href="http://www.cnblogs.com/Andrew-XinFei/p/6245330.html" target="_blank" rel="external">http://www.cnblogs.com/Andrew-XinFei/p/6245330.html</a>这篇文章中提到：</p>
<blockquote>
<p>devicemapper + loop-lvm 还有一个缺陷，因为它是稀疏文件，所以它会不断增长。用户在使用过程中会注意到 /var/lib/docker/devicemapper/devicemapper/data 不断增长，而且无法控制。很多人会希望删除镜像或者可以解决这个问题，结果发现效果并不明显。原因就是这个稀疏文件的空间释放后基本不进行垃圾回收的问题。因此往往会出现即使删除了文件内容，空间却无法回收，随着使用这个稀疏文件一直在不断增长。所以:对于 CentOS/RHEL 的用户来说，在没有办法使用 UnionFS 的情况下，一定要配置 direct-lvm 给 devicemapper，无论是为了性能，稳定性还是空间利用率。</p>
</blockquote>
<p>感觉这段话是解决了上述问题。于是便千辛万苦申请了磁盘，设置之后发现情况并没有改变，删除文件磁盘依然不会释放空间，可能对上述文章理解有误吧，总之改成direct-lvm模式也没有解决我的问题。如果容器内有持续增长的文件，比如日志文件这种，撑爆容器是迟早的事情针对这种情况，目前想到的方法是将这些文件外挂到宿主机上，不知道还有没有别的方法。<br>上文说到千辛万苦挂磁盘，也想说一下。对于设置direct-lvm模式，官网讲得很清楚：<a href="https://docs.docker.com/engine/userguide/storagedriver/device-mapper-driver/#configure-docker-with-devicemapper" target="_blank" rel="external">https://docs.docker.com/engine/userguide/storagedriver/device-mapper-driver/#configure-docker-with-devicemapper</a>，过了英语四级的小伙伴就不要犯懒了。总之我犯了个懒，还用了百度，百度了中文安装方法。还是上述文章，里面的步骤写的很清楚，但是我运行老是报错，我的环境是centos7.3，docker1.12.6，出现的问题，在起容器的时候会有：<br><em>/usr/bin/docker-current: Error response from daemon: shim error: docker-runc not installed on system.</em><br>在给容器映射端口的时候有：<br><em>/usr/bin/docker-current: Error response from daemon: driver failed programming external connectivity on endpoint stoic_wright (35ded5c721d0ccde517d932e54c4062197a84252a72b951de4fd66fbe6f01d88): exec: “docker-proxy”: executable file not found in $PATH.</em><br>仔细对照官网，发现官网在添加direct-pool信息的时候，是将其直接写入配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[root@localhost Desktop]# vi /usr/lib/systemd/system/docker.service</div><div class="line">[Service]</div><div class="line">Type=notify</div><div class="line">NotifyAccess=all</div><div class="line">EnvironmentFile=-/etc/sysconfig/docker</div><div class="line">EnvironmentFile=-/etc/sysconfig/docker-storage</div><div class="line">EnvironmentFile=-/etc/sysconfig/docker-network</div><div class="line">Environment=GOTRACEBACK=crash</div><div class="line">Environment=DOCKER_HTTP_HOST_COMPAT=1</div><div class="line">Environment=PATH=/usr/libexec/docker:/usr/bin:/usr/sbin</div><div class="line">ExecStart=/usr/bin/dockerd-current \</div><div class="line">          --add-runtime docker-runc=/usr/libexec/docker/docker-runc-current \</div><div class="line">          --default-runtime=docker-runc \</div><div class="line">          --exec-opt native.cgroupdriver=systemd \</div><div class="line">          --userland-proxy-path=/usr/libexec/docker/docker-proxy-current \</div><div class="line">          --storage-driver=devicemapper \</div><div class="line">          --storage-opt=dm.thinpooldev=/dev/mapper/docker-thinpool \</div><div class="line">          --storage-opt=dm.use_deferred_removal=true \</div><div class="line">          --storage-opt=dm.use_deferred_deletion=true</div><div class="line">          $OPTIONS \</div></pre></td></tr></table></figure></p>
<p>而上述文章采用了drop-in方法（官网也有提及），修改了daemon.conf和daemon.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@srv00 ~]# mkdir /etc/systemd/system/docker.service.d</div><div class="line">[root@srv00 ~]# vi /etc/systemd/system/docker.service.d/daemon.conf</div><div class="line">[Service]</div><div class="line">ExecStart=</div><div class="line">ExecStart=/usr/bin/dockerd</div><div class="line">[root@srv00 ~]# vi /etc/docker/daemon.json</div><div class="line">&#123;</div><div class="line">  &quot;storage-driver&quot;: &quot;devicemapper&quot;,</div><div class="line">   &quot;storage-opts&quot;: [</div><div class="line">     &quot;dm.thinpooldev=/dev/mapper/vgdocker-thinpool&quot;,</div><div class="line">     &quot;dm.use_deferred_removal=true&quot;,</div><div class="line">     &quot;dm.use_deferred_deletion=true&quot;</div><div class="line">   ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不同在于ExecStart，原始配置文件启动的是<em>/usr/bin/dockerd-current</em>，而drop-in的方法启动的是<em>/usr/bin/dockerd</em>。<br>进入<em>/usr/libexec/docker/</em>文件夹，确实没有<em>docker-runc</em>和<em>docker-proxy</em>存在，有的是<em>docker-runc-current</em>和<em>docker-proxy-current</em>。加上两个软连接，问题解决：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># cd /usr/libexec/docker/ </div><div class="line"># sudo ln -s docker-runc-current docker-runc</div><div class="line"># sudo ln -s docker-proxy-current docker-proxy</div></pre></td></tr></table></figure>
<p>使用配置文件本来是件好事，比如修改配置不必重启服务，只需发送SIGHUP信号即可。<br>但是目前在dockerd中使用配置文件会有一些问题：例如无法得知具体哪项生效了，启动日志以及docker info，还有ps -ef都不会给出生效配置，这对于排障很不方便。<br>当 dockerd的参数和daemon.json文件中的配置有所重复或者冲突，会直接导致引擎启动失败。<strong>因此在这些问题解决前，先使用修改docker.service这类做法来实现。</strong><br><a href="https://blog.lab99.org/post/docker-2016-07-14-faq.html" target="_blank" rel="external">https://blog.lab99.org/post/docker-2016-07-14-faq.html</a>这篇文章解决了我的很多疑惑，对初学者很有意义。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇碎碎念，想到哪儿就写到哪儿。。&lt;br&gt;官网上说：&lt;em&gt;Docker hosts running the devicemapper storage driver default to a configuration mode known as loop-lvm. T
    
    </summary>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="devicemapper" scheme="http://yoursite.com/tags/devicemapper/"/>
    
      <category term="direct-lvm" scheme="http://yoursite.com/tags/direct-lvm/"/>
    
  </entry>
  
  <entry>
    <title>搭建docker私有仓库并进行用户认证</title>
    <link href="http://yoursite.com/2017/03/01/%E6%90%AD%E5%BB%BAdocker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%B9%B6%E8%BF%9B%E8%A1%8C%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81/"/>
    <id>http://yoursite.com/2017/03/01/搭建docker私有仓库并进行用户认证/</id>
    <published>2017-03-01T07:42:38.000Z</published>
    <updated>2017-07-19T05:17:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>自定义的镜像可以通过公有仓库进行管理，也可以搭建一个本地的私有仓库进行管理。</p>
<h2 id="1-运行环境"><a href="#1-运行环境" class="headerlink" title="1.运行环境"></a>1.运行环境</h2><blockquote>
<ul>
<li>OS:centos7</li>
<li>docker-reistry1.0 下载<a href="http://7ycyh7.com1.z1.glb.clouddn.com/registry.tar" target="_blank" rel="external">registry.tar</a></li>
<li>nginx1.10.2</li>
<li>docker1.8.2</li>
</ul>
</blockquote>
<h2 id="2-使用docker-registry搭建私有仓库"><a href="#2-使用docker-registry搭建私有仓库" class="headerlink" title="2.使用docker-registry搭建私有仓库"></a>2.使用docker-registry搭建私有仓库</h2><p>将registry.tar上传到安装了docker的centos7中，导入nginx镜像。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# docker load &lt; registry.tar</div><div class="line">[root@registry ~]# docker images</div><div class="line">REPOSITORY           TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">docker.io/registry   latest              07d93e41c370        13 months ago       422.8 MB</div></pre></td></tr></table></figure></p>
<p>修改所有计算节点的的hosts配置文件，并刷新hostname。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# vi /etc/hosts</div><div class="line">192.168.147.130  registry</div><div class="line">192.168.147.130  registry_private</div><div class="line">[root@localhost ~]# hostname -F /etc/hostname(刷新hostname)</div></pre></td></tr></table></figure></p>
<p>在docker配置文件中添加允许连接镜像仓库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# vi /etc/sysconfig/docker</div><div class="line">OPTIONS=&apos;--insecure-registry registry:5000 --insecure-registry registry_private:5001</div></pre></td></tr></table></figure></p>
<p>重启docker：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# service docker restart</div></pre></td></tr></table></figure></p>
<p>运行镜像仓库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# docker run -d -p 5000:5000 --name=registry --restart=always --privileged=true  --log-driver=none -v /home/data/registrydata:/tmp/registry registry</div><div class="line">03859903eb0322eaa7b29a915737bb22b685c466d020da499d491485c1f67307</div><div class="line">[root@registry ~]# docker ps -a</div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                    NAMES</div><div class="line">03859903eb03        registry            &quot;docker-registry&quot;   About an hour ago   Up 45 minutes       0.0.0.0:5000-&gt;5000/tcp   registry</div></pre></td></tr></table></figure></p>
<p>上传镜像到仓库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# docker tag sshd:centos  registry:5000/sshd:centos</div><div class="line">[root@localhost ~]# docker push registry:5000/sshd:centos</div><div class="line">The push refers to a repository [registry:5000/sshd] (len: 1)</div><div class="line">Sending image list</div><div class="line">Pushing repository registry:5000/sshd (1 tags)</div><div class="line">9509659cbefb: Image successfully pushed </div><div class="line">f0efe62f33e4: Image successfully pushed </div><div class="line">Pushing tag for rev [f0efe62f33e4] on &#123;http://registry:5000/v1/repositories/sshd/tags/centos&#125;</div><div class="line">[root@localhost ~]# curl registry:5000/v1/search</div><div class="line">&#123;&quot;num_results&quot;: 1, &quot;query&quot;: &quot;&quot;, &quot;results&quot;: [&#123;&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;library/sshd&quot;&#125;]&#125;</div></pre></td></tr></table></figure></p>
<p>下载镜像到本地：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@registry ~]# docker pull registry:5000/sshd:centos</div><div class="line">f0efe62f33e4: Download complete </div><div class="line">9509659cbefb: Download complete </div><div class="line">Status: Image is up to date for registry:5000/sshd:centos</div></pre></td></tr></table></figure></p>
<h2 id="3-为私有仓库添加用户认证"><a href="#3-为私有仓库添加用户认证" class="headerlink" title="3.为私有仓库添加用户认证"></a>3.为私有仓库添加用户认证</h2><p>registry没有安全权限的设置，除非防火墙限制，否则任何人都可以pull、push镜像到registry。更安全的做法是在外层加入登录认证机制。可以使用nginx做反向代理，为私有仓库添加用户认证。</p>
<h3 id="3-1安装及配置nginx"><a href="#3-1安装及配置nginx" class="headerlink" title="3.1安装及配置nginx"></a>3.1安装及配置nginx</h3><p>安装nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@registry ~]# yum install nginx</div></pre></td></tr></table></figure></p>
<p>安装htpasswd工具，生成加密后的密码，并将用户名和密码存储在本地指定路径的文件中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@registry ~]# git clone git://github.com/http-auth/htpasswd.git</div><div class="line">[root@registry ~]# npm install -g htpasswd</div><div class="line">[root@registry ~]# npm install -g htpasswd</div><div class="line">[root@registry ~]# htpasswd -c /etc/nginx/docker-registry.htpasswd usr1</div><div class="line">New password: </div><div class="line">Re-type new password: </div><div class="line">Adding password for user usr1.</div></pre></td></tr></table></figure></p>
<p>配置nginx：在/etc/nginx/sites-enabled/目录下添加新的站点配置文件docker-registry：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">[root@registry nginx]# mkdir /etc/nginx/sites-enabled/</div><div class="line">[root@registry nginx]# vi /etc/nginx/sites-enabled/docker-registry</div><div class="line">upstream docker-registry &#123;</div><div class="line"> server localhost:5000;</div><div class="line">&#125;</div><div class="line">server &#123;</div><div class="line"> listen 5001;</div><div class="line"> server_name registry_private;</div><div class="line"> proxy_set_header Host       $http_host;   # required for Docker client sake</div><div class="line"> proxy_set_header X-Real-IP  $remote_addr; # pass on real client IP</div><div class="line"> client_max_body_size 0; # disable any limits to avoid HTTP 413 for large image uploads</div><div class="line"> # required to avoid HTTP 411: see Issue #1486 (https://github.com/dotcloud/docker/issues/1486)</div><div class="line"> chunked_transfer_encoding on;</div><div class="line"> location / &#123;</div><div class="line">     # let Nginx know about our auth file</div><div class="line">     auth_basic              &quot;Restricted&quot;;</div><div class="line">     auth_basic_user_file    docker-registry.htpasswd;</div><div class="line">     proxy_pass http://docker-registry;</div><div class="line"> &#125;</div><div class="line"> location /_ping &#123;</div><div class="line">     auth_basic off;</div><div class="line">     proxy_pass http://docker-registry;</div><div class="line"> &#125;</div><div class="line"> location /v1/_ping &#123;</div><div class="line">     auth_basic off;</div><div class="line">     proxy_pass http://docker-registry;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>建立配置文件软连接，放在/etc/nginx/conf.d/下，让nginx启用它，然后重启nginx服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@registry sites-enabled]# sudo ln -s /etc/nginx/sites-enabled/docker-registry /etc/nginx/conf.d/docker-registry.conf</div><div class="line">[root@registry sites-enabled]# service nginx restart</div></pre></td></tr></table></figure></p>
<p>如果这一步遇到这个问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@registry sites-enabled]# systemctl status nginx.service</div><div class="line">nginx.service - The nginx HTTP and reverse proxy server</div><div class="line">   Loaded: loaded (/usr/lib/systemd/system/nginx.service; disabled)</div><div class="line">   Active: failed (Result: exit-code) since Thu 2017-03-02 11:08:27 CST; 14s ago</div><div class="line">  Process: 39831 ExecStartPre=/usr/sbin/nginx -t (code=exited, status=1/FAILURE)</div><div class="line">  Process: 39830 ExecStartPre=/usr/bin/rm -f /run/nginx.pid (code=exited, status=0/SUCCESS)</div><div class="line">Mar 02 11:08:27 registry systemd[1]: Starting The nginx HTTP and reverse proxy server...</div><div class="line">Mar 02 11:08:27 registry nginx[39831]: nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</div><div class="line">**Mar 02 11:08:27 registry nginx[39831]: nginx: [emerg] bind() to 0.0.0.0:5001 failed (13: Permission denied)**</div><div class="line">Mar 02 11:08:27 registry nginx[39831]: nginx: configuration file /etc/nginx/nginx.conf test failed</div><div class="line">Mar 02 11:08:27 registry systemd[1]: nginx.service: control process exited, code=exited status=1</div><div class="line">Mar 02 11:08:27 registry systemd[1]: Failed to start The nginx HTTP and reverse proxy server.</div><div class="line">Mar 02 11:08:27 registry systemd[1]: Unit nginx.service entered failed state.</div></pre></td></tr></table></figure></p>
<p>可能是是开启了selinux导致的，查看是否开启了selinux，”Enforecing”代表开启了selinux，”disabled”或者”permissive”则是关闭了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@registry sites-enabled]# getenforce</div><div class="line">Enforcing</div><div class="line">[root@registry sites-enabled]# setenforce 0 (临时关闭selinux)</div><div class="line">[root@registry sites-enabled]# getenforce</div><div class="line">Permissive</div></pre></td></tr></table></figure></p>
<p>这时访问registry_private:5001，则被禁止：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@registry sites-enabled]# getenforce</div><div class="line">Permissive</div></pre></td></tr></table></figure></p>
<p>临时修改重启电脑后再重启nginx，每次均需要修改，可以永久关闭，修改/etc/selinux/config 文件，将SELINUX=enforcing改为SELINUX=disabled，重启电脑生效。<br>通过用户名和密码登录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@registry sites-enabled]# curl usr1:123456@registry_private:5001/v1/search</div><div class="line">&#123;&quot;num_results&quot;: 1, &quot;query&quot;: &quot;&quot;, &quot;results&quot;: [&#123;&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;library/sshd&quot;&#125;]&#125;</div></pre></td></tr></table></figure></p>
<p>如果用浏览器登录，则会出现要求填写用户名和密码的对话框。</p>
<h3 id="3-2为nginx安装ssl证书"><a href="#3-2为nginx安装ssl证书" class="headerlink" title="3.2为nginx安装ssl证书"></a>3.2为nginx安装ssl证书</h3><p>此时登录registry_private下载镜像，会无法下载：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@registry sites-enabled]# docker login registry_private:5001</div><div class="line">Username: usr1</div><div class="line">Password: </div><div class="line">Email: </div><div class="line">WARNING: login credentials saved in /root/.docker/config.json</div><div class="line">Login Succeeded</div><div class="line">[root@registry sites-enabled]# docker pull registry_private:5001/sshd:centos</div><div class="line">Trying to pull repository registry_private:5001/sshd ... failed</div><div class="line">Could not reach any registry endpoint</div></pre></td></tr></table></figure></p>
<p>这是因为docker-registry不允许http明文传输，此时可以安装SSL证书，使用HTTPS传输。<br>首先在nginx配置文件中添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@registry sites-enabled]#  vi /etc/nginx/conf.d/docker-registry.conf</div><div class="line">......</div><div class="line">server &#123;</div><div class="line"> listen 5001;</div><div class="line"> server_name registry_private;</div><div class="line"> ssl on;</div><div class="line"> ssl_certificate /etc/nginx/ssl/nginx.crt;</div><div class="line"> ssl_certificate_key /etc/nginx/ssl/nginx.key;</div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>创建相关证书：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">[root@registry sites-enabled]# mkdir /etc/nginx/ssl  (创建配置目录)</div><div class="line">[root@registry sites-enabled]# cd /etc/pki/CA</div><div class="line">[root@registry CA]# openssl genrsa -out private/cakey.pem 2048  (生成秘钥)</div><div class="line">[root@registry CA]# cd /etc/pki/CA/private/</div><div class="line">y.pem</div><div class="line">[root@registry private]# chmod 400 cakey.pem (修改私钥文件权限)[root@registry private]# cd /etc/pki/CA/</div><div class="line">[root@registry CA]# openssl req -new -x509 -key private/cakey.pem -out cacert.pem  (生成根证书)</div><div class="line">You are about to be asked to enter information that will be incorporated</div><div class="line">into your certificate request.</div><div class="line">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class="line">There are quite a few fields but you can leave some blank</div><div class="line">For some fields there will be a default value,</div><div class="line">If you enter &apos;.&apos;, the field will be left blank.</div><div class="line">-----</div><div class="line">Country Name (2 letter code) [XX]:CN</div><div class="line">State or Province Name (full name) []:BJ</div><div class="line">Locality Name (eg, city) [Default City]:BJ</div><div class="line">Organization Name (eg, company) [Default Company Ltd]:  </div><div class="line">Organizational Unit Name (eg, section) []:</div><div class="line">Common Name (eg, your name or your server&apos;s hostname) []:</div><div class="line">Email Address []:</div></pre></td></tr></table></figure></p>
<p>生成根证书的时候会提示输入一些内容，可以随便输入，也可直接回车。如果有入，最好与后续为nginx生成证书签署请求的填写内容保持一致。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">[root@registry private]# cd /etc/pki/CA/</div><div class="line">[root@registry CA]# openssl req -new -x509 -key private/cakey.pem -out cacert.pem  (生成根证书)</div><div class="line">[root@registry CA]# cd /etc/nginx/ssl</div><div class="line">[root@registry ssl]# openssl genrsa -out nginx.key 2048  (为nginx web服务器生成ssl密钥)</div><div class="line">[root@registry ssl]# openssl req -new -key nginx.key -out nginx.csr  (为nginx生成证书请求)</div><div class="line">You are about to be asked to enter information that will be incorporated</div><div class="line">into your certificate request.</div><div class="line">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class="line">There are quite a few fields but you can leave some blank</div><div class="line">For some fields there will be a default value,</div><div class="line">If you enter &apos;.&apos;, the field will be left blank.</div><div class="line">-----</div><div class="line">Country Name (2 letter code) [XX]:CN</div><div class="line">State or Province Name (full name) []:BJ</div><div class="line">Locality Name (eg, city) [Default City]:BJ</div><div class="line">Organization Name (eg, company) [Default Company Ltd]:</div><div class="line">Organizational Unit Name (eg, section) []:</div><div class="line">Common Name (eg, your name or your server&apos;s hostname) []:regstry_private(**此处一定要填写需要授予证书的服务器域名或主机名**)</div><div class="line">Email Address []:</div><div class="line">Please enter the following &apos;extra&apos; attributes</div><div class="line">to be sent with your certificate request</div><div class="line">A challenge password []:</div><div class="line">An optional company name []:</div><div class="line">[root@registry ssl]# touch /etc/pki/CA/index.txt</div><div class="line">[root@registry ssl]# touch /etc/pki/CA/serial</div><div class="line">[root@registry ssl]# echo &quot;00&quot; &gt; /etc/pki/CA/serial</div><div class="line">[root@registry ssl]# openssl ca -in nginx.csr -out nginx.crt  (私有CA根据请求来签发证书)</div><div class="line">Using configuration from /etc/pki/tls/openssl.cnf</div><div class="line">Check that the request matches the signature</div><div class="line">Signature ok</div><div class="line">The commonName field needed to be supplied and was missing (生成证书请求是没有填写任何信息,所以有这一句话的提示。)</div></pre></td></tr></table></figure></p>
<p>让根证书起作用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@registry ssl]# cp /etc/pki/tls/certs/ca-bundle.crt&#123;,.bak&#125;  (备份，以防出错)</div><div class="line">[root@registry ssl]# cat /etc/pki/CA/cacert.pem &gt;&gt; /etc/pki/tls/certs/ca-bundle.crt</div></pre></td></tr></table></figure></p>
<p>此时再下载私有仓库的镜像：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@registry certs]# docker pull registry_private:5001/sshd:centos</div><div class="line">f0efe62f33e4: Download complete </div><div class="line">9509659cbefb: Download complete </div><div class="line">Status: Image is up to date for registry_private:5001/sshd:centos</div></pre></td></tr></table></figure></p>
<p>用网页登录时，需要注意是https协议。<br><img src="http://7ycyh7.com1.z1.glb.clouddn.com/屏幕快照%202017-03-02%20下午2.10.31.png" alt="网页登录"></p>
<p><strong>注意：下载不在同一主机上的私有仓库时，需要在docker的配置文件中添加 <em>–insecurity-registry</em> 参数。</strong></p>
<p>参考博客：<br><a href="https://segmentfault.com/a/1190000000801162" target="_blank" rel="external">https://segmentfault.com/a/1190000000801162</a><br><a href="http://cloud.51cto.com/art/201412/458680_all.htm" target="_blank" rel="external">http://cloud.51cto.com/art/201412/458680_all.htm</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自定义的镜像可以通过公有仓库进行管理，也可以搭建一个本地的私有仓库进行管理。&lt;/p&gt;
&lt;h2 id=&quot;1-运行环境&quot;&gt;&lt;a href=&quot;#1-运行环境&quot; class=&quot;headerlink&quot; title=&quot;1.运行环境&quot;&gt;&lt;/a&gt;1.运行环境&lt;/h2&gt;&lt;blockquote
    
    </summary>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="ssh" scheme="http://yoursite.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>docker搭建elk镜像</title>
    <link href="http://yoursite.com/2017/02/27/docker%E6%90%AD%E5%BB%BAelk%E9%95%9C%E5%83%8F/"/>
    <id>http://yoursite.com/2017/02/27/docker搭建elk镜像/</id>
    <published>2017-02-27T03:34:49.000Z</published>
    <updated>2017-02-27T14:48:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用elk(elasticsearch+logstash+kibana)不需要openssh，搭建openssh是为了方便往elasticsearch里添加数据。</p>
<p><strong>因为安装过程用到了service，亲测centos7的基础镜像不能用。用service起的命令可以手动起，也可以安装centos7.2版本，然后用 <em>–privileged</em> 赋予容器root权限</strong></p>
<h2 id="1-安装openssh"><a href="#1-安装openssh" class="headerlink" title="1.安装openssh"></a>1.安装openssh</h2><h3 id="1-1创建容器"><a href="#1-1创建容器" class="headerlink" title="1.1创建容器"></a>1.1创建容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">rosyMacBook-Pro:~ rosy$ docker run -tid --privileged yasanbee/centos7.2-systemd /bin/bash</div><div class="line">a435707cf766d50b517b61ffb74b86539bb0ce208965af566ee5e688726b041f</div><div class="line">rosyMacBook-Pro:~ rosy$ docker ps -a</div><div class="line">CONTAINER ID        IMAGE                        COMMAND                  CREATED             STATUS                    PORTS                     NAMES</div><div class="line">a435707cf766        yasanbee/centos7.2-systemd   &quot;/usr/sbin/init /bin/&quot;   5 seconds ago       Up 4 seconds                                        hungry_darwin</div></pre></td></tr></table></figure>
<p>进入容器，如果启动的时候就进入，亲测会出现无法退出的问题，所以建议先创建后进入容器。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rosyMacBook-Pro:~ rosy$ docker exec -ti a435 /bin/bash</div></pre></td></tr></table></figure>
<h3 id="1-2安装passwd"><a href="#1-2安装passwd" class="headerlink" title="1.2安装passwd"></a>1.2安装passwd</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@a435707cf766 /]# yum install passwd -y</div></pre></td></tr></table></figure>
<h3 id="1-3修改centos密码"><a href="#1-3修改centos密码" class="headerlink" title="1.3修改centos密码"></a>1.3修改centos密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@a435707cf766 /]# passwd</div><div class="line">Changing password for user root.</div><div class="line">New password: #此处输入密码并记住它，ssh连接需要</div><div class="line">BAD PASSWORD: The password is shorter than 8 characters</div><div class="line">Retype new password: </div><div class="line">passwd: all authentication tokens updated successfully.</div></pre></td></tr></table></figure>
<h3 id="1-4安装openssh"><a href="#1-4安装openssh" class="headerlink" title="1.4安装openssh"></a>1.4安装openssh</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@a435707cf766 /]# yum install openssh-server -y</div></pre></td></tr></table></figure>
<h3 id="1-5生成公钥、私钥"><a href="#1-5生成公钥、私钥" class="headerlink" title="1.5生成公钥、私钥"></a>1.5生成公钥、私钥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">[root@a435707cf766 /]# ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key</div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter passphrase (empty for no passphrase): #回车</div><div class="line">Enter same passphrase again: #回车</div><div class="line">Your identification has been saved in /etc/ssh/ssh_host_rsa_key.</div><div class="line">Your public key has been saved in /etc/ssh/ssh_host_rsa_key.pub.</div><div class="line">The key fingerprint is:</div><div class="line">f7:eb:32:e9:26:6a:ec:82:e7:0d:ae:2e:1a:61:38:f7 root@a435707cf766</div><div class="line">The key&apos;s randomart image is:</div><div class="line">+--[ RSA 2048]----+</div><div class="line">|                 |</div><div class="line">|                 |</div><div class="line">|                 |</div><div class="line">|.                |</div><div class="line">|+..     S .      |</div><div class="line">|.+ .     . .     |</div><div class="line">|.  .E.     ..    |</div><div class="line">|....ooo . =  .   |</div><div class="line">|ooo+o++. +.+o    |</div><div class="line">+-----------------+</div><div class="line">[root@a435707cf766 /]# ssh-keygen -t rsa -f /etc/ssh/ssh_host_ecdsa_key</div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter passphrase (empty for no passphrase): #回车</div><div class="line">Enter same passphrase again: #回车</div><div class="line">Your identification has been saved in /etc/ssh/ssh_host_ecdsa_key.</div><div class="line">Your public key has been saved in /etc/ssh/ssh_host_ecdsa_key.pub.</div><div class="line">The key fingerprint is:</div><div class="line">62:d8:41:ed:de:8f:26:4d:61:3b:66:37:d7:3e:7c:3f root@a435707cf766</div><div class="line">The key&apos;s randomart image is:</div><div class="line">+--[ RSA 2048]----+</div><div class="line">|      ..         |</div><div class="line">|     .  .        |</div><div class="line">|      ..         |</div><div class="line">|     o .. o      |</div><div class="line">|    . +.So o   . |</div><div class="line">|     . .. B o . .|</div><div class="line">|         = = o.. |</div><div class="line">|        . + .  Eo|</div><div class="line">|         o      *|</div><div class="line">+-----------------+</div><div class="line">[root@a435707cf766 /]# ssh-keygen -t rsa -f /etc/ssh/ssh_host_ed25519_key</div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter passphrase (empty for no passphrase): #回车</div><div class="line">Enter same passphrase again: #回车</div><div class="line">Your identification has been saved in /etc/ssh/ssh_host_ed25519_key.</div><div class="line">Your public key has been saved in /etc/ssh/ssh_host_ed25519_key.pub.</div><div class="line">The key fingerprint is:</div><div class="line">cb:6f:98:dc:b0:65:83:dd:d0:aa:25:c1:c2:ab:cb:7d root@a435707cf766</div><div class="line">The key&apos;s randomart image is:</div><div class="line">+--[ RSA 2048]----+</div><div class="line">|                 |</div><div class="line">|                 |</div><div class="line">|     . .   .     |</div><div class="line">|      o o . .    |</div><div class="line">|       oS+ +     |</div><div class="line">|      ..+.B .    |</div><div class="line">|     . .o% .     |</div><div class="line">|   ...  E.o      |</div><div class="line">|    o... ..      |</div><div class="line">+-----------------+</div></pre></td></tr></table></figure>
<h3 id="1-6编写启动脚本"><a href="#1-6编写启动脚本" class="headerlink" title="1.6编写启动脚本"></a>1.6编写启动脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@a435707cf766 /]# vi /run.sh</div><div class="line">#!/bin/bash</div><div class="line">/usr/sbin/sshd -D</div><div class="line">[root@a435707cf766 /]# chmod +x /run.sh</div></pre></td></tr></table></figure>
<h3 id="1-7修改SSH默认端口"><a href="#1-7修改SSH默认端口" class="headerlink" title="1.7修改SSH默认端口"></a>1.7修改SSH默认端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@a435707cf766 /]# vi /etc/ssh/sshd_config </div><div class="line">Port 222</div></pre></td></tr></table></figure>
<h3 id="1-8退出容器并将其保存为镜像"><a href="#1-8退出容器并将其保存为镜像" class="headerlink" title="1.8退出容器并将其保存为镜像"></a>1.8退出容器并将其保存为镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">rosyMacBook-Pro:~ rosy$ docker commit a435 sshd_centos7.2:centos7.2 </div><div class="line">sha256:8857ac6591c67e1a573a51faace20e958f148730ffe2e7ac49d26272cded8a51</div><div class="line">rosyMacBook-Pro:~ rosy$ docker images</div><div class="line">REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">sshd_centos7.2               centos7.2           8857ac6591c6        25 seconds ago      427.7 MB</div></pre></td></tr></table></figure>
<h2 id="2-搭建elk"><a href="#2-搭建elk" class="headerlink" title="2.搭建elk"></a>2.搭建elk</h2><p>添加数据和展示数据用elasticsearch和kibana就足够了，暂时用不到logstash，可以需要的时候再添加。<br>用各种方法，将elk.zip放进容器里面。可以外挂数据卷，外挂数据卷容器等，这里采用另起终端开了个服务器，再在容器里进行下载的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rosyMacBook-Pro:~ rosy$ python -m SimpleHTTPServer 8080</div></pre></td></tr></table></figure></p>
<p>在容器里面下载并保存在/root/下面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@39e9e27c9863 /]# curl -o /root/elk.zip 192.168.234.52:8080/elk.zip</div></pre></td></tr></table></figure></p>
<p>将elk.zip解压缩，如果容器里面没有unzip命令，需要安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@39e9e27c9863 /]# yum install unzip </div><div class="line">[root@39e9e27c9863 ~]# unzip /root/elk.zip</div><div class="line">[root@39e9e27c9863 ~]# cd /root/elk</div><div class="line">[root@39e9e27c9863 elk]# ls</div><div class="line">elasticsearch-1.7.3.noarch.rpm  kibana-4.1.2-linux-x64.tar.gz  logstash-1.5.4-1.noarch.rpm  logstash-forwarder-0.4.0-1.x86_64.rpm</div></pre></td></tr></table></figure></p>
<h3 id="2-1安装环境和安装包"><a href="#2-1安装环境和安装包" class="headerlink" title="2.1安装环境和安装包"></a>2.1安装环境和安装包</h3><h4 id="2-1-1安装环境"><a href="#2-1-1安装环境" class="headerlink" title="2.1.1安装环境"></a>2.1.1安装环境</h4><blockquote>
<ul>
<li>OS：Centos7.1</li>
<li>jdk1.7</li>
</ul>
</blockquote>
<h4 id="2-1-2安装包"><a href="#2-1-2安装包" class="headerlink" title="2.1.2安装包"></a>2.1.2安装包</h4><blockquote>
<ul>
<li>elasticsearch-1.7.3.noarch.rpm </li>
<li>kibana-4.1.2-linux-x64.tar.gz     </li>
</ul>
</blockquote>
<h4 id="2-1-2创建容器"><a href="#2-1-2创建容器" class="headerlink" title="2.1.2创建容器"></a>2.1.2创建容器</h4><p>基于我们生产的sshd镜像创建容器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rosyMacBook-Pro:~ rosy$ docker run -tid --privileged sshd_centos7.2:centos7.2 /bin/bash</div><div class="line">39e9e27c98630d10461621e71d12074a91d0d4a7a69f836a5155cd3a84493d30</div><div class="line">rosyMacBook-Pro:~ rosy$ docker exec -ti 39e9e /bin/bash</div></pre></td></tr></table></figure></p>
<p>也可以点击<a href="http://7ycyh7.com1.z1.glb.clouddn.com/elk.zip" target="_blank" rel="external">elk.zip</a>下载相关安装包</p>
<h3 id="2-2安装jdk1-7"><a href="#2-2安装jdk1-7" class="headerlink" title="2.2安装jdk1.7"></a>2.2安装jdk1.7</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@39e9e27c9863 /]# yum install java-1.7.0-openjdk</div></pre></td></tr></table></figure>
<h3 id="2-3安装elasticsearch"><a href="#2-3安装elasticsearch" class="headerlink" title="2.3安装elasticsearch"></a>2.3安装elasticsearch</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[root@39e9e27c9863 ~]# cd /root/elk</div><div class="line">[root@39e9e27c9863 elk]# yum localinstall elasticsearch-1.7.3.noarch.rpm</div><div class="line">[root@39e9e27c9863 elk]# systemctl daemon-reload </div><div class="line">[root@39e9e27c9863 elk]# systemctl enable elasticsearch.service (设置开机自启动)</div><div class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/elasticsearch.service to /usr/lib/systemd/system/elasticsearch.service.</div><div class="line">[root@39e9e27c9863 elk]# systemctl start elasticsearch.service (开启服务)</div><div class="line">[root@39e9e27c9863 elk]# systemctl status elasticsearch.service (查询服务状态)</div><div class="line">● elasticsearch.service - Elasticsearch</div><div class="line">   Loaded: loaded (/usr/lib/systemd/system/elasticsearch.service; enabled; vendor preset: disabled)</div><div class="line">   Active: active (running) since Mon 2017-02-27 12:09:14 UTC; 9s ago</div><div class="line">     Docs: http://www.elastic.co</div><div class="line"> Main PID: 271 (java)</div><div class="line">   CGroup: /docker/39e9e27c98630d10461621e71d12074a91d0d4a7a69f836a5155cd3a84493d30/system.slice/elasticsearch.service</div><div class="line">           └─271 java -Xms256m -Xmx1g -Djava.awt.headless=true -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupa...</div><div class="line">Feb 27 12:09:14 39e9e27c9863 systemd[1]: Started Elasticsearch.</div><div class="line">Feb 27 12:09:14 39e9e27c9863 systemd[1]: Starting Elasticsearch...</div></pre></td></tr></table></figure>
<p>查看服务状态，看到服务在运行，则证明elasticsearch安装完成，对外提供服务的端口为9200。</p>
<h3 id="2-4安装kibana"><a href="#2-4安装kibana" class="headerlink" title="2.4安装kibana"></a>2.4安装kibana</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@39e9e27c9863 elk]# tar zxf /root/elk/kibana-4.1.2-linux-x64.tar.gz -C /usr/local/ </div><div class="line">[root@39e9e27c9863 elk]# cd /usr/local/</div><div class="line">[root@39e9e27c9863 local]# mv kibana-4.1.2-linux-x64/ kibana</div><div class="line">[root@39e9e27c9863 local]# cd /usr/local/kibana/bin</div><div class="line">[root@39e9e27c9863 bin]# ls</div><div class="line">kibana  kibana.bat</div></pre></td></tr></table></figure>
<p>此时运行<em>./kibana</em>即可开启，将启动kibana写到service里面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">[root@39e9e27c9863 local]# vi /etc/systemd/system/kibana.service</div><div class="line"></div><div class="line">[Service]</div><div class="line">ExecStart=/usr/local/kibana/bin/kibana</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div><div class="line">[root@39e9e27c9863 bin]# systemctl enable kibana.service</div><div class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/kibana.service to /etc/systemd/system/kibana.service.</div><div class="line">[root@39e9e27c9863 bin]# systemctl start kibana.service</div><div class="line">[root@39e9e27c9863 bin]# systemctl status kibana.service </div><div class="line">● kibana.service</div><div class="line">   Loaded: loaded (/etc/systemd/system/kibana.service; enabled; vendor preset: disabled)</div><div class="line">   Active: active (running) since Mon 2017-02-27 12:22:18 UTC; 7s ago</div><div class="line"> Main PID: 348 (node)</div><div class="line">   CGroup: /docker/39e9e27c98630d10461621e71d12074a91d0d4a7a69f836a5155cd3a84493d30/system.slice/kibana.service</div><div class="line">           └─348 /usr/local/kibana/bin/../node/bin/node /usr/local/kibana/bin/../src/bin/kibana.js</div><div class="line"></div><div class="line">Feb 27 12:22:18 39e9e27c9863 systemd[1]: Started kibana.service.</div><div class="line">Feb 27 12:22:18 39e9e27c9863 systemd[1]: Starting kibana.service...</div><div class="line">Feb 27 12:22:23 39e9e27c9863 kibana[348]: &#123;&quot;name&quot;:&quot;Kibana&quot;,&quot;hostname&quot;:&quot;39e9e27c9863&quot;,&quot;pid&quot;:348,&quot;level&quot;:30,&quot;msg&quot;:&quot;No existing kibana index found&quot;,&quot;time&quot;:&quot;2017-0...3Z&quot;,&quot;v&quot;:0&#125;</div><div class="line">Feb 27 12:22:23 39e9e27c9863 kibana[348]: &#123;&quot;name&quot;:&quot;Kibana&quot;,&quot;hostname&quot;:&quot;39e9e27c9863&quot;,&quot;pid&quot;:348,&quot;level&quot;:30,&quot;msg&quot;:&quot;Listening on 0.0.0.0:5601&quot;,&quot;time&quot;:&quot;2017-02-27T...9Z&quot;,&quot;v&quot;:0&#125;</div><div class="line">Hint: Some lines were ellipsized, use -l to show in full.</div></pre></td></tr></table></figure></p>
<p>查看服务状态，看到服务在运行，则证明kibana安装完成，kibana对外提供服务的端口为5601。</p>
<h3 id="2-5退出容器并将其保存为镜像"><a href="#2-5退出容器并将其保存为镜像" class="headerlink" title="2.5退出容器并将其保存为镜像"></a>2.5退出容器并将其保存为镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">rosyMacBook-Pro:~ rosy$ docker ps -a</div><div class="line">CONTAINER ID        IMAGE                        COMMAND                  CREATED             STATUS                    PORTS                     NAMES</div><div class="line">39e9e27c9863        sshd_centos7.2:centos7.2     &quot;/usr/sbin/init /bin/&quot;   3 hours ago         Up About an hour                                    ecstatic_liskov</div><div class="line">rosyMacBook-Pro:~ rosy$ docker commit 39e9e elk:sshd_centos7.2</div><div class="line">sha256:fe5366107fa2ddc79edc3a73091ef78789f3d28ecb8b2d88884ce69cb13511be</div><div class="line">rosyMacBook-Pro:~ rosy$ docker images</div><div class="line">REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">elk                          sshd_centos7.2      fe5366107fa2        11 seconds ago      1.027 GB</div></pre></td></tr></table></figure>
<h2 id="3-验证elk镜像"><a href="#3-验证elk镜像" class="headerlink" title="3.验证elk镜像"></a>3.验证elk镜像</h2><h3 id="3-1验证kibana"><a href="#3-1验证kibana" class="headerlink" title="3.1验证kibana"></a>3.1验证kibana</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rosyMacBook-Pro:~ rosy$ docker run -tid --privileged -p 5050:5601 -p 223:222 --name elk_test elk:sshd_centos7.2 /run.sh</div><div class="line">d2db917f76f5e176a2bec7fb2ce19c74078d22ba567395406b092171f174bb7b</div></pre></td></tr></table></figure>
<p>打开浏览器，输入ip地址和对外映射的端口5050，可以访问kibana的网页：<br><img src="http://7ycyh7.com1.z1.glb.clouddn.com/屏幕快照%202017-02-27%20下午8.58.05.png" alt="kibana"><br>则基于elk的镜像搭建成功。<br><strong>如果不是在本机上进行的访问，则需要注意关闭防火墙或者开启相应的端口。</strong><br>关闭防火墙方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rosyMacBook-Pro:~ rosy$ systemctl disable firewalld.service</div><div class="line">rosyMacBook-Pro:~ rosy$ systemctl stop firewalld.service</div></pre></td></tr></table></figure></p>
<p>防火墙开启端口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rosyMacBook-Pro:~ rosy$ firewall-cmd --permanent --add-port=5601/tcp    （防火墙开启5601端口）</div><div class="line">success</div><div class="line">rosyMacBook-Pro:~ rosy$ firewall-cmd --reload    （重载防火墙）</div><div class="line">success</div></pre></td></tr></table></figure></p>
<h3 id="3-2验证ssh"><a href="#3-2验证ssh" class="headerlink" title="3.2验证ssh"></a>3.2验证ssh</h3><p>远程ssh登录，启动容器对外映射的端口为223。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">rosyMacBook-Pro:~ rosy$ sudo ssh 192.168.234.52 -p 223</div><div class="line">Password:</div><div class="line">The authenticity of host &apos;[192.168.234.52]:223 ([192.168.234.52]:223)&apos; can&apos;t be established.</div><div class="line">RSA key fingerprint is f7:eb:32:e9:26:6a:ec:82:e7:0d:ae:2e:1a:61:38:f7.</div><div class="line">Are you sure you want to continue connecting (yes/no)? yes</div><div class="line">Warning: Permanently added &apos;[192.168.234.52]:223&apos; (RSA) to the list of known hosts.</div><div class="line">root@192.168.234.52&apos;s password: </div><div class="line">System is booting up. See pam_nologin(8)</div><div class="line">[root@d2db917f76f5 ~]# ls</div><div class="line">anaconda-ks.cfg  elk  elk.zip</div></pre></td></tr></table></figure></p>
<p>ssh成功连接容器。</p>
<h3 id="3-3验证elasticsearch"><a href="#3-3验证elasticsearch" class="headerlink" title="3.3验证elasticsearch"></a>3.3验证elasticsearch</h3><p>在容器中添加一条数据，ssh连接或者进入容器均可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@d2db917f76f5 ~]# curl -XPUT &apos;http://localhost:9200/twitter/tweet/1&apos; -d &apos;&#123;</div><div class="line">    &quot;user&quot; : &quot;kimchy&quot;,</div><div class="line">    &quot;post_date&quot; : &quot;2017-1-15T14:12:12&quot;,</div><div class="line">    &quot;message&quot; : &quot;trying out Elasticsearch&quot;</div><div class="line">&#125;&apos;</div><div class="line">&#123;&quot;_index&quot;:&quot;twitter&quot;,&quot;_type&quot;:&quot;tweet&quot;,&quot;_id&quot;:&quot;1&quot;,&quot;_version&quot;:1,&quot;created&quot;:true&#125;[root@d2db917f76f5 ~]# </div><div class="line">[root@d2db917f76f5 ~]#</div></pre></td></tr></table></figure></p>
<p>在网页中打开kibana，在setting中选择关键字“twitter”可以看见我们添加的数据：<br><img src="http://7ycyh7.com1.z1.glb.clouddn.com/屏幕快照%202017-02-27%20下午9.18.41.png" alt="twitter"></p>
<p>至此，elk的镜像便搭好了，至于elasticsearch和kibana的用法，会另起一篇叨叨。</p>
<p>本文参考了以下博客：<br>1.<a href="http://www.cnblogs.com/zhenyuyaodidiao/p/4948000.html" target="_blank" rel="external">http://www.cnblogs.com/zhenyuyaodidiao/p/4948000.html</a><br>2.<a href="http://www.cnblogs.com/zhenyuyaodidiao/p/4512249.html" target="_blank" rel="external">http://www.cnblogs.com/zhenyuyaodidiao/p/4512249.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用elk(elasticsearch+logstash+kibana)不需要openssh，搭建openssh是为了方便往elasticsearch里添加数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因为安装过程用到了service，亲测centos7的基础镜像不能用。用serv
    
    </summary>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="elk" scheme="http://yoursite.com/tags/elk/"/>
    
      <category term="openssh" scheme="http://yoursite.com/tags/openssh/"/>
    
  </entry>
  
  <entry>
    <title>mtr丢包率分析</title>
    <link href="http://yoursite.com/2017/02/15/mtr%E4%B8%A2%E5%8C%85%E7%8E%87%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/02/15/mtr丢包率分析/</id>
    <published>2017-02-15T13:00:15.000Z</published>
    <updated>2017-05-04T01:04:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Linux下，我们一般用ping来判断网络的丢包和延迟，用traceroute来跟踪路由路径。mtr将ping和traceroute结合起来，既能判断网络路由路径，又能得到丢包和延迟等信息。</p>
<p>mtr的用法网上随便一搜就一大堆：<a href="https://www.mankier.com/8/mtr" target="_blank" rel="external">https://www.mankier.com/8/mtr</a></p>
<p>mtr的数据一般长这样：</p>
<p><img src="http://7ycyh7.com1.z1.glb.clouddn.com/屏幕快照%202017-02-15%20下午10.15.06.png" alt="mtr数据图"></p>
<p>其中host为“???”的地方表示该节点不让ping。</p>
<p>Loss%:表示该节点的丢包率；</p>
<p>Snt:表示每秒发送数据包的数量，默认值是10 可以通过参数 <em>-c</em> 来指定数量；</p>
<p>Last:表示最近一次的返回延时；</p>
<p>Avg:表示延时平均值这个应该是发送ping包的平均延时；</p>
<p>Best:表示最好或者说延时最短的值；</p>
<p>Wrst:表示最差或者说时延最常的值；</p>
<p>StDev:表示标准偏差。</p>
<p>然后我对各节点丢包率无法理解：1.前n-1行的丢包率相加和最后一行的丢包率不想等；2.某些点的丢包率超过了最后一行的丢包率；3.ping其中丢包率高的节点，ping的丢包率和mtr结果在该点的丢包率差别极大。</p>
<p>针对这些问题，百度，Google提供了很多很有参考价值的信息，比如：<br><a href="https://www.linode.com/docs/networking/diagnostics/diagnosing-network-issues-with-mtr/" target="_blank" rel="external">https://www.linode.com/docs/networking/diagnostics/diagnosing-network-issues-with-mtr/</a></p>
<p><a href="http://serverfault.com/questions/585862/why-mtr-is-much-faster-than-traceroute" target="_blank" rel="external">http://serverfault.com/questions/585862/why-mtr-is-much-faster-than-traceroute</a></p>
<p><a href="http://serverfault.com/questions/260414/how-to-interpret-traceroute-output-of-mtr" target="_blank" rel="external">http://serverfault.com/questions/260414/how-to-interpret-traceroute-output-of-mtr</a></p>
<p><a href="http://superuser.com/questions/591804/where-is-packet-loss-occuring-interpreting-mtr" target="_blank" rel="external">http://superuser.com/questions/591804/where-is-packet-loss-occuring-interpreting-mtr</a></p>
<p>对于中间节点丢包总结起来大约是这样说的：该节点本身<strong>网络不好</strong>；ICMP<strong>速率限制</strong>引起了数据包的丢失。判断方法是：</p>
<p>1.如果某节点有丢包，但是下一节点没有丢包，则证明该节点是ICMP速率限制。解决方法可以增加参数 <em>-i</em>（设置ICMP发送一次包的时间，默认为1秒）。</p>
<p>2.如果连续几个节点都存在丢包，则这些节点存在因网络不好而产生的丢包，但无法判断是否存在因速率限制而产生的丢包。</p>
<p>3.如果最后一个节点存在丢包，则这个节点的丢包率看做整条目录的丢包率。</p>
<p>但是以上判断方法是如何得到的，网上就没有很多的说明了。只好从mtr的原理开始研究。</p>
<p>从网络抓包开始。分别对同一个目标地址进行ping和mtr，抓取这两种操作时的网络发icmp包情况如下：</p>
<p>mtr的路径和抓包：</p>
<p><img src="http://7ycyh7.com1.z1.glb.clouddn.com/屏幕快照%202017-02-15%20下午11.22.58.png" alt=""></p>
<p><img src="http://7ycyh7.com1.z1.glb.clouddn.com/屏幕快照%202017-02-15%20下午11.23.45.png" alt=""></p>
<p>ping的抓包：</p>
<p><img src="http://7ycyh7.com1.z1.glb.clouddn.com/屏幕快照%202017-02-15%20下午11.28.57.png" alt=""></p>
<p>由ping和mtr的抓包情况图可以看出：<br>mtr对目标地址发送一个icmp包，然后在一个节点返回一个icmp包；然后再对目标节点发送一个icmp包，再第二个节点返回一个icmp包；一直到最后一个节点返回icmp包，这样一次发包完成。参数 <em>-i</em> 便是控制这一过程时间的，默认是1秒钟。当节点比较多的时候，会出现发送了很多icmp包，之前所说的增加 <em>-i</em> 的参数值，能够降低这个发包频率，以达到避免被icmp限速的目的。如果其中某个节点返回的包丢掉了，则在该节点上产生了丢包率。<br>ping的icmp发包过程是本地发送给目标地址一个icmp包，然后目标地址返回一个icmp包。中通节点没有返回任何icmp包。如果目标地址返回的包丢失，则产生丢包率。</p>
<p>由抓包可以看出，mtr的发包原理和traceroute类似，如下图：</p>
<p><img src="http://7ycyh7.com1.z1.glb.clouddn.com/mtr1.png" alt="mtr图"></p>
<p>其中TTL(Time To Live)指定IP包被路由器丢弃之前允许通过的最大网段数量，当TTL减少为0时，路由器将会丢弃收到的TTL=0的icmp包并向icmp包的发送者发送 <em>ICMP time exceeded</em> 消息。假设本地mtr目标主机中途经过了3个节点，本地向目标主机发送一个icmp包，TTL=1，遇到第一个路由的时候，TTL变为0，向本地返回 <em>ICMP time exceeded in-transit</em> 消息；然后本地再向目标主机发送一个icmp包，TTL=2，再遇到第二个路由的时候TTL变为0，返回 <em>ICMP time exceeded in-transit</em>；以此类推；当icmp包经过n跳到达最终的目标地址，则返回 <em>ICMP echo reply</em> 消息。如果某个阶段返回的icmp包丢失，则在此节点产生了丢包。</p>
<p>按照这个原理，理论上当某个节点的ip地址产生较大丢包的时候，我们调整发包间隔，使发包速率不大于ping的发包速率，那么这个节点mtr得到的丢包率应该和直接ping这个节点得到的丢包率相等。然而事实上mtr的丢包率远大于ping这个节点的丢包率。问题出在ping和mtr返回的icmp包上。</p>
<p>对于ping，本地给目标地址发送一个icmp包，如果目标主机收到了这个包，则返回一个类型为00的icmp (“ICMP echo reply”)。</p>
<p>对于mtr，是hop by hop 的ping，在每个节点因为TTL=0而返回一个icmp包，此时返回的icmp包类型是110(“ICMP time exceeded”)，到最后一个节点返回一个跟ping类似的icmp包(“ICMP echo reply”)，如果某个路由的规则对类型为110的icmp进行了限制，则可能导致该节点产生丢包，而ping该节点返回的类型为00的icmp包则没有影响，因此ping不会产生丢包。或者某一个路由为了防止icmp包攻击，只开放了ping发出的字段的icmp包。如果某一个节点因为icmp限制而产生丢包，而下一节点不对110类型的icmp包做限制，所以下一节点不产生丢包。这就是网上所说的<strong>如果本节点丢包，接下来的节点没有丢包，则该节点可能是路由限速导致的丢包，和网络好坏没有关系</strong>。另外，除了对110包的限制，还有可能返回路径和发包路径不一致，即返回路过了别的节点，那个节点对icmp限制了，但是mtr不会打印出来。这就是网上建议的<strong>两个方向进行监控</strong>。当mtr发包到达最后一个节点（即目标主机），主机正常返回一个 <em>ICMP echo reply</em>，相当于一个正常的ping过程，因此<strong>最后一跳存在丢包率，可以看做整个链路的丢包率</strong>。</p>
<p>对网络路由路径和中间节点丢包率的计算，常用工具都用了TTL机制，不知道是否有其他工具能够更加准确的测试，这个有待调查。<br>看到一个网站上对mtr丢包率问题的回答，其中有这样一段话：</p>
<p><em>As for assigning fault based on traceroutes: I’ve professionally done senior-level network operations for over a decade, with full access to switches and routers (error counts, traffic levels, cache flows – all manners of stats and metrics – giving me visibility well beyond what a simple traceroute could provide, yet determining where packet loss was occurring to a host on a remote network was still an inexact art, mostly because the return path from the other host was obscured: Unless I had a traceroute back to me from the remote host, I could only guess at how return traffic was getting back to my workstation. I shall suggest that beyond the first or second hop in your traceroutes, there’s not much you can do (or make meaningful deductions) with ping and traceroute.</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Linux下，我们一般用ping来判断网络的丢包和延迟，用traceroute来跟踪路由路径。mtr将ping和traceroute结合起来，既能判断网络路由路径，又能得到丢包和延迟等信息。&lt;/p&gt;
&lt;p&gt;mtr的用法网上随便一搜就一大堆：&lt;a href=&quot;https:/
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="mtr" scheme="http://yoursite.com/tags/mtr/"/>
    
      <category term="丢包率" scheme="http://yoursite.com/tags/%E4%B8%A2%E5%8C%85%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>模拟HTTP请求工具安装配置手册</title>
    <link href="http://yoursite.com/2017/01/16/%E6%A8%A1%E6%8B%9FHTTP%E8%AF%B7%E6%B1%82%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C/"/>
    <id>http://yoursite.com/2017/01/16/模拟HTTP请求工具安装配置手册/</id>
    <published>2017-01-16T12:20:12.000Z</published>
    <updated>2017-05-04T01:05:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>近期做网络测试，需要给网络加一定的压力，再测试此压力下的网络情况，提出的需求是：</p>
<blockquote>
<ul>
<li>模拟http请求，能够返回不同的大小的页面</li>
<li>自由调节压力，不需要将带宽跑满</li>
<li>轻量级</li>
</ul>
</blockquote>
<p>在网上调研了一些工具，例如iperf之类的，都是测带宽用的，换言之都会将带宽跑满，于是便自己搭了个简易的服务器，在服务器上造出不同大小的文件，然后在客户端进行curl请求，以造成不同的压力。</p>
<h2 id="1-服务器端"><a href="#1-服务器端" class="headerlink" title="1.服务器端"></a>1.服务器端</h2><h3 id="1-1系统环境"><a href="#1-1系统环境" class="headerlink" title="1.1系统环境"></a>1.1系统环境</h3><p>centos7</p>
<h3 id="1-2安装nginx"><a href="#1-2安装nginx" class="headerlink" title="1.2安装nginx"></a>1.2安装nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install nginx</div></pre></td></tr></table></figure>
<p>如果这一步找不到合适的源可以安装第三方软件库：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum -y install epel-release</div></pre></td></tr></table></figure>
<p>卸载该软件库为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum -y remove epel-releas</div></pre></td></tr></table></figure>
<h3 id="1-3配置nginx"><a href="#1-3配置nginx" class="headerlink" title="1.3配置nginx"></a>1.3配置nginx</h3><p>打开配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/nginx/nginx.conf</div></pre></td></tr></table></figure>
<p>修改配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">server &#123;listen       80 default_server; #此处为服务器监听端口，默认为80端口。listen       [::]:80 default_server; #此处为服务器监听端口，默认为80端口。server_name  _;root         /usr/share/nginx/html;   # Load configuration files for the default server block.include /etc/nginx/default.d/*.conf;location / &#123;autoindex on; #此处为开启服务器端目录浏览功能autoindex_exact_size on; #此处为显示目录中文件的大小autoindex_localtime on; #此处为显示目录中文件的创建时间        &#125;error_page 404 /404.html;location = /40x.html &#123;        &#125;error_page 500 502 503 504 /50x.html;location = /50x.html &#123;        &#125;</div></pre></td></tr></table></figure>
<p>修改好后保存退出，并检查配置文件的语法是否正确。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ nginx -t -c /etc/nginx/nginx.conf</div><div class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is oknginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</div></pre></td></tr></table></figure>
<p>启动nginx</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /usr/sbin/nginx -c /etc/nginx/nginx.conf</div></pre></td></tr></table></figure>
<h3 id="1-4服务器端造数据"><a href="#1-4服务器端造数据" class="headerlink" title="1.4服务器端造数据"></a>1.4服务器端造数据</h3><p>进入配置文件中的root文件夹root/usr/share/nginx/html，添加一个存放自己数据的文件夹</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /usr/share/nginx/html$ mkdir logs$ ls404.html  50x.html  index.html  logs  nginx-logo.png  poweredby.png</div></pre></td></tr></table></figure>
<p>进入自己创建的存放数据的文件夹logs，添加不同大小的文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /usr/share/nginx/html/logs$ dd <span class="keyword">if</span>=/dev/zero of=1M bs=1M count=1</div></pre></td></tr></table></figure>
<p>dd if=/dev/zero of=1M bs=1M count=1:bs=1M为创建文件大小；of=1M为创建文件的名称，可带上文件类型，如1M.txt。</p>
<h3 id="1-5通过网页访问服务器"><a href="#1-5通过网页访问服务器" class="headerlink" title="1.5通过网页访问服务器"></a>1.5通过网页访问服务器</h3><p>访问网站：<a href="http://10.0.251.180/logs/，其中10.0.251.180为服务器IP。出现我们创建的文件，则nginx正在运行。" target="_blank" rel="external">http://10.0.251.180/logs/，其中10.0.251.180为服务器IP。出现我们创建的文件，则nginx正在运行。</a></p>
<h2 id="2客户端配置文件"><a href="#2客户端配置文件" class="headerlink" title="2客户端配置文件"></a>2客户端配置文件</h2><h3 id="2-1修改配置文件"><a href="#2-1修改配置文件" class="headerlink" title="2.1修改配置文件"></a>2.1修改配置文件</h3><p>将httpdownload文件夹拷贝至root下面。<br>进入httpdownload文件夹，根据需求修改config.txt配置文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /root/httpdownload$ vi /root/httpdownload/config.txtIP:http://10.0.251.180/logs/filesize1:500Kcount1:1filesize2:1Mcount1:2</div></pre></td></tr></table></figure>
<p>第一项是下载服务器文件IP；第二项是下载文件大小；第三项是同时下载该大小文件的数量；可配置同时并发下载不同大小和数量的文件。需要将“filesize”和“count”的序号依次递增。</p>
<h3 id="2-2运行curls-sh"><a href="#2-2运行curls-sh" class="headerlink" title="2.2运行curls.sh"></a>2.2运行curls.sh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /root/httpdownload/curls.sh</div></pre></td></tr></table></figure>
<p><a href="https://github.com/RanWX/netMonitor/tree/master/httpdownload" target="_blank" rel="external">相关代码下载</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期做网络测试，需要给网络加一定的压力，再测试此压力下的网络情况，提出的需求是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;模拟http请求，能够返回不同的大小的页面&lt;/li&gt;
&lt;li&gt;自由调节压力，不需要将带宽跑满&lt;/li&gt;
&lt;li&gt;轻量级&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/01/11/hello-world/"/>
    <id>http://yoursite.com/2017/01/11/hello-world/</id>
    <published>2017-01-11T13:48:07.000Z</published>
    <updated>2017-01-11T13:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
